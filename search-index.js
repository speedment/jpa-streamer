antoraSearch.initSearch(lunr, {"index":{"version":"2.3.8","fields":["title","name","text","component"],"fieldVectors":[["title/1",[0,26.908,1,25.31]],["name/1",[2,1.801]],["text/1",[0,4.743,1,4.461,3,2.603,4,3.248]],["component/1",[5,0.411,6,0.498]],["title/2-1",[3,12.014,7,21.21,8,28.203]],["name/2-1",[]],["text/2-1",[]],["component/2-1",[]],["title/2-2",[9,25.463,10,25.463,11,20.589]],["name/2-2",[]],["text/2-2",[]],["component/2-2",[]],["title/2-3",[12,58.046]],["name/2-3",[]],["text/2-3",[]],["component/2-3",[]],["title/2-4",[13,58.046]],["name/2-4",[]],["text/2-4",[]],["component/2-4",[]],["title/2-5",[14,27.825,15,17.138]],["name/2-5",[]],["text/2-5",[]],["component/2-5",[]],["title/2-6",[15,22.237]],["name/2-6",[]],["text/2-6",[]],["component/2-6",[]],["title/2-7",[16,51.974]],["name/2-7",[]],["text/2-7",[]],["component/2-7",[]],["title/2-8",[17,15.275,18,20.589,19,32.584]],["name/2-8",[]],["text/2-8",[]],["component/2-8",[]],["title/2-9",[20,44.736,21,34.67]],["name/2-9",[]],["text/2-9",[]],["component/2-9",[]],["title/2",[22,31.301,23,23.95]],["name/2",[22,0.707,23,0.541]],["text/2",[0,0.768,1,2.448,3,2.621,4,0.279,5,1.343,7,2.008,8,1.768,9,2.41,10,2.41,11,1.751,14,3.244,15,2.62,16,0.608,17,2.741,18,3.562,19,4.671,21,0.526,22,1.265,23,0.968,24,1.326,25,1.143,26,0.679,27,1.276,28,2.427,29,0.794,30,1.291,31,0.475,32,0.438,33,0.561,34,0.823,35,0.526,36,2.521,37,2.818,38,0.526,39,0.679,40,1.276,41,0.679,42,0.455,43,0.679,44,0.679,45,1.276,46,0.823,47,3.033,48,1.401,49,2.618,50,1.746,51,0.455,52,0.526,53,1.165,54,1.888,55,0.683,56,0.683,57,0.475,58,0.893,59,2.448,60,0.395,61,0.679,62,0.768,63,0.943,64,1.816,65,0.937,66,1.924,67,0.608,68,1.685,69,0.561,70,0.937,71,0.526,72,1.276,73,1.143,74,0.408,75,1.33,76,0.744,77,0.408,78,0.679,79,0.702,80,0.679,81,0.498,82,0.608,83,1.291,84,0.856,85,0.561,86,1.494,87,0.526,88,0.679,89,0.526,90,1.255,91,0.422,92,0.475,93,1.276,94,0.768,95,0.498,96,0.679,97,0.679,98,0.679,99,0.679,100,0.422,101,0.408,102,1.053,103,0.994,104,0.989,105,0.526,106,0.475,107,1.45,108,0.395,109,0.422,110,1.816,111,2.917,112,4.804,113,1.886,114,0.679,115,0.679,116,1.807,117,2.72,118,1.807,119,3.175,120,0.608,121,2.282,122,0.422,123,0.858,124,1.143,125,1.143,126,0.608,127,1.807,128,1.401,129,3.37,130,0.438,131,0.561,132,0.608,133,1.494,134,0.608,135,2.043,136,2.971,137,1.807,138,1.807,139,0.679,140,0.679,141,1.276,142,0.679,143,0.608,144,0.498,145,0.455,146,0.679,147,0.679,148,1.807,149,0.498,150,1.055,151,0.679,152,0.608,153,0.679,154,0.679,155,0.608,156,1.49,157,0.679,158,0.408,159,0.408,160,2.523,161,0.679,162,0.823,163,0.768,164,4.973,165,0.475,166,1.055,167,1.023,168,2.221,169,1.087,170,1.597,171,1.276,172,0.679,173,0.561,174,0.526,175,0.608,176,0.823,177,0.679,178,0.608,179,0.498,180,0.679,181,1.675,182,0.408,183,0.608,184,0.526,185,1.265,186,0.679,187,0.679,188,0.608,189,0.679,190,2.282,191,0.679,192,0.679,193,0.679,194,1.326,195,1.378,196,1.055,197,0.937,198,0.561,199,0.422,200,1.143,201,1.372,202,0.679,203,0.455,204,0.608,205,0.92,206,0.561,207,0.679,208,2.365,209,0.608,210,2.398,211,1.346,212,0.561,213,1.143,214,1.143,215,0.768,216,0.794,217,0.608,218,1.143,219,0.744,220,0.937,221,0.608,222,0.679,223,0.679,224,1.276,225,0.856,226,1.212,227,0.475,228,1.023,229,0.794,230,1.807,231,1.276,232,5.737,233,0.679,234,1.055,235,0.608,236,0.561,237,2.165,238,1.32,239,0.408,240,2.839,241,0.526,242,1.255,243,0.679,244,1.807,245,1.19,246,1.494,247,0.422,248,0.989,249,0.679,250,0.679,251,1.276,252,0.937,253,0.475,254,2.165,255,1.807,256,0.373,257,0.679,258,0.498,259,0.679,260,0.438,261,0.498,262,0.679,263,1.276,264,0.679,265,0.679,266,0.679,267,0.679,268,0.561,269,0.679,270,0.608,271,1.276,272,0.498,273,0.561,274,0.561,275,0.561,276,0.608,277,0.561,278,0.679,279,0.526,280,0.608,281,0.679,282,0.679,283,1.401,284,0.526,285,0.608,286,0.608,287,0.823,288,0.561,289,0.679,290,0.526,291,0.561,292,0.561,293,1.276,294,0.679,295,0.679,296,0.679,297,0.608,298,0.608,299,0.679,300,0.608,301,0.384,302,0.679,303,0.679,304,0.498,305,0.679,306,0.679,307,0.561,308,0.561,309,0.679,310,0.679,311,0.679,312,0.679,313,0.679,314,0.679,315,0.526,316,0.526,317,0.608,318,0.679,319,0.455,320,0.679,321,1.055,322,0.679,323,0.608,324,0.679,325,0.679,326,0.384,327,0.608,328,0.608,329,0.679,330,0.679,331,0.679,332,0.526,333,0.526,334,0.608,335,0.561,336,0.608,337,0.679,338,0.679,339,0.679,340,0.679,341,0.526,342,0.438,343,0.526]],["component/2",[5,0.411,6,0.498]],["title/3-1",[]],["name/3-1",[]],["text/3-1",[]],["component/3-1",[]],["title/3-2",[164,44.986]],["name/3-2",[]],["text/3-2",[]],["component/3-2",[]],["title/3-3",[219,33.832]],["name/3-3",[]],["text/3-3",[]],["component/3-3",[]],["title/3-4",[]],["name/3-4",[]],["text/3-4",[]],["component/3-4",[]],["title/3-5",[344,36.103]],["name/3-5",[]],["text/3-5",[]],["component/3-5",[]],["title/3-6",[345,47.974]],["name/3-6",[]],["text/3-6",[]],["component/3-6",[]],["title/3-7",[346,37.425]],["name/3-7",[]],["text/3-7",[]],["component/3-7",[]],["title/3-8",[345,30.076,346,23.463,347,22.634]],["name/3-8",[]],["text/3-8",[]],["component/3-8",[]],["title/3-9",[102,33.832]],["name/3-9",[]],["text/3-9",[]],["component/3-9",[]],["title/3-10",[348,47.974]],["name/3-10",[]],["text/3-10",[]],["component/3-10",[]],["title/3-11",[87,44.986]],["name/3-11",[]],["text/3-11",[]],["component/3-11",[]],["title/3-12",[253,40.615]],["name/3-12",[]],["text/3-12",[]],["component/3-12",[]],["title/3-13",[219,33.832]],["name/3-13",[]],["text/3-13",[]],["component/3-13",[]],["title/3-14",[349,47.974]],["name/3-14",[]],["text/3-14",[]],["component/3-14",[]],["title/3-15",[349,47.974]],["name/3-15",[]],["text/3-15",[]],["component/3-15",[]],["title/3-16",[168,37.425]],["name/3-16",[]],["text/3-16",[]],["component/3-16",[]],["title/3",[199,27.825,342,28.844]],["name/3",[199,0.628,342,0.651]],["text/3",[0,0.828,1,0.284,3,1.085,4,0.207,5,0.298,7,0.559,8,0.389,9,0.351,10,0.351,11,0.284,14,1.881,15,2.811,17,2.906,18,0.779,22,0.671,23,0.269,25,0.449,28,0.323,30,0.284,32,0.618,34,0.323,36,0.802,37,0.5,38,0.389,42,1.18,46,0.323,47,4.405,48,0.389,49,2.181,50,0.618,51,0.336,54,2.197,55,1.132,56,0.513,57,0.351,59,0.779,60,0.802,62,0.828,63,1.103,65,0.368,66,1.518,68,0.596,70,0.368,71,1.067,74,1.059,75,0.559,79,0.276,83,0.284,85,1.138,87,1.067,89,0.389,91,0.312,92,0.963,94,1.468,95,0.368,101,1.059,102,1.763,103,2.069,106,0.351,107,4.254,108,3.775,109,0.312,110,0.336,117,0.643,123,2.317,136,2.404,145,0.643,149,0.368,156,0.968,159,1.059,160,1.18,162,0.323,163,0.302,164,2.547,165,0.351,166,1.455,168,2.564,169,0.302,170,0.351,174,0.389,176,0.323,181,0.368,182,1.65,184,0.389,185,0.351,194,0.368,195,2.316,197,0.368,199,0.312,200,0.449,203,0.923,205,0.701,208,0.802,210,0.389,211,1.633,214,0.449,215,1.819,216,0.312,217,0.449,219,1.763,220,1.551,225,0.336,228,2.473,229,0.596,238,1.674,239,1.819,241,0.389,242,0.757,245,1.273,246,0.415,248,0.389,252,0.368,253,2.3,256,0.276,261,0.704,279,1.067,287,0.887,292,0.415,301,0.284,304,0.368,307,0.415,315,0.389,316,0.389,319,1.18,321,0.415,323,0.449,327,0.449,328,0.449,342,1.573,344,2.34,345,1.138,346,2.119,348,1.747,349,1.138,350,1.026,351,0.449,352,3.147,353,0.502,354,0.858,355,0.389,356,0.415,357,0.449,358,0.415,359,0.389,360,0.415,361,0.828,362,0.743,363,0.449,364,0.449,365,0.718,366,0.312,367,0.449,368,1.65,369,0.887,370,1.919,371,0.959,372,0.502,373,0.502,374,0.389,375,0.959,376,0.351,377,0.963,378,0.643,379,0.368,380,0.643,381,0.368,382,0.312,383,3.388,384,0.389,385,0.743,386,0.704,387,0.743,388,0.704,389,1.132,390,0.792,391,0.743,392,1.232,393,0.502,394,0.502,395,0.449,396,0.415,397,0.415,398,0.502,399,0.449,400,0.449,401,0.959,402,0.959,403,1.892,404,0.389,405,0.704,406,0.415,407,1.819,408,0.449,409,0.449,410,0.449,411,0.858,412,1.01,413,1.599,414,0.449,415,0.449,416,0.449,417,1.232,418,1.232,419,1.232,420,1.232,421,1.232,422,1.232,423,1.232,424,1.232,425,1.232,426,0.449,427,0.449,428,0.449,429,0.449,430,0.449,431,0.449,432,0.792,433,0.502,434,0.415,435,0.415,436,3.72,437,1.479,438,1.891,439,1.551,440,0.792,441,1.919,442,0.502,443,0.351,444,0.415,445,0.389,446,0.415,447,0.415,448,0.336,449,0.502,450,0.415,451,0.415,452,0.968,453,0.502,454,1.138,455,0.502,456,0.502,457,0.368,458,0.449,459,0.502,460,1.138,461,0.502,462,0.502,463,0.502,464,2.114,465,0.502,466,0.502,467,0.502,468,0.502,469,0.502,470,0.502,471,0.502,472,0.502,473,0.502,474,0.502,475,0.502,476,0.502,477,0.502,478,0.502,479,0.502,480,0.959,481,0.502,482,0.502,483,0.502,484,0.389,485,0.596,486,0.502,487,0.502,488,0.959,489,0.502,490,0.792,491,0.596,492,0.502,493,0.959,494,0.858,495,0.959,496,0.959,497,0.959,498,1.76,499,0.959,500,0.959,501,0.959,502,0.959,503,0.959,504,0.959,505,0.502,506,0.502,507,0.502,508,0.643,509,0.502,510,0.449,511,0.389,512,0.502,513,0.502,514,0.502,515,0.476,516,0.959,517,0.449,518,1.138,519,3.05,520,0.959,521,1.376,522,1.376,523,0.449,524,0.415,525,0.502,526,0.449,527,0.449,528,0.449,529,2.126,530,2.344,531,0.858,532,0.415,533,0.502,534,1.138,535,0.704,536,0.959,537,0.389,538,0.502,539,0.502,540,1.138,541,0.502,542,0.502,543,0.502,544,1.138,545,0.502,546,0.502,547,0.415,548,0.502,549,0.502,550,0.502,551,0.502,552,0.502,553,0.959,554,0.415,555,0.449,556,0.415,557,0.858,558,1.376,559,0.502,560,0.415,561,0.502,562,0.502,563,0.502,564,0.389,565,0.643,566,0.502,567,0.449,568,0.502,569,0.743,570,0.502,571,0.368,572,0.502,573,0.502,574,0.415,575,0.389,576,0.389,577,0.449,578,0.502,579,0.368,580,0.502,581,1.376,582,1.01,583,0.502,584,0.502,585,0.502,586,0.502,587,0.502,588,0.502,589,0.502,590,0.502,591,0.368,592,0.502,593,0.336,594,0.502,595,0.389,596,0.389,597,0.389,598,0.389,599,0.389,600,1.576,601,0.792,602,0.858,603,0.858,604,0.858,605,0.502,606,0.368,607,0.502,608,0.449,609,0.618,610,0.704,611,0.351,612,0.449,613,0.389,614,0.368]],["component/3",[5,0.411,6,0.498]],["title/4-1",[615,44.986]],["name/4-1",[]],["text/4-1",[]],["component/4-1",[]],["title/4-2",[616,51.974]],["name/4-2",[]],["text/4-2",[]],["component/4-2",[]],["title/4-3",[59,32.841]],["name/4-3",[]],["text/4-3",[]],["component/4-3",[]],["title/4-4",[1,20.589,15,13.941,28,23.463]],["name/4-4",[]],["text/4-4",[]],["component/4-4",[]],["title/4-5",[17,15.275,228,20.589,238,13.941]],["name/4-5",[]],["text/4-5",[]],["component/4-5",[]],["title/4-6",[220,26.708,617,32.584,618,32.584]],["name/4-6",[]],["text/4-6",[]],["component/4-6",[]],["title/4-7",[168,37.425]],["name/4-7",[]],["text/4-7",[]],["component/4-7",[]],["title/4-8",[15,13.941,168,23.463,606,26.708]],["name/4-8",[]],["text/4-8",[]],["component/4-8",[]],["title/4-9",[62,21.888,229,22.634,619,24.396]],["name/4-9",[]],["text/4-9",[]],["component/4-9",[]],["title/4-10",[62,21.888,229,22.634,619,24.396]],["name/4-10",[]],["text/4-10",[]],["component/4-10",[]],["title/4-11",[229,33.814,619,24.396]],["name/4-11",[]],["text/4-11",[]],["component/4-11",[]],["title/4-12",[23,23.95,620,40.056]],["name/4-12",[]],["text/4-12",[]],["component/4-12",[]],["title/4",[15,17.138,54,19.527]],["name/4",[15,0.387,54,0.441]],["text/4",[0,0.39,1,0.367,3,0.986,4,0.267,5,0.201,7,1.011,11,0.367,14,0.76,15,1.507,17,2.051,18,1.242,22,0.855,23,0.347,24,0.897,28,1.118,34,1.683,36,1.011,37,0.638,42,0.434,46,0.418,47,4.167,49,2.924,50,1.683,54,2.376,57,0.453,59,1.477,60,0.378,62,1.32,63,0.638,64,1.75,65,0.476,66,1.858,68,0.76,70,1.611,71,1.701,74,0.735,75,0.712,79,0.356,81,0.476,83,0.981,90,0.356,91,1.365,92,0.453,94,1.043,95,1.273,101,1.32,102,0.712,103,1.207,106,0.453,107,4.014,108,0.712,109,0.76,110,0.819,123,2.11,130,0.418,131,1.01,132,0.58,136,2.163,144,1.273,145,0.434,156,1.207,159,2.003,160,0.434,163,1.043,164,1.344,167,1.242,168,2.147,169,0.39,176,0.788,181,1.611,182,0.735,185,1.214,194,0.897,195,2.853,197,0.897,205,0.33,208,0.378,210,0.947,211,1.484,213,0.58,215,0.39,218,1.094,219,1.521,220,2.887,225,0.434,226,2.233,228,2.644,229,2.765,238,1.276,239,1.32,242,1.643,245,2.191,247,0.403,248,0.502,252,0.897,287,0.788,300,0.58,301,0.367,307,1.434,326,0.691,335,0.535,341,0.502,342,0.418,343,0.947,344,0.76,346,2.147,347,0.76,348,1.01,350,1.521,355,0.502,356,0.535,357,0.58,358,0.535,359,0.502,360,0.535,361,0.735,362,2.581,365,0.638,367,0.58,368,0.735,369,1.118,374,0.502,377,1.214,378,1.163,379,1.273,380,1.163,381,0.897,382,1.079,383,0.403,389,1.951,392,5.019,396,0.535,397,1.01,403,5.631,404,0.502,405,0.476,406,0.535,407,1.57,408,0.58,409,1.553,410,1.094,411,1.094,412,0.897,413,1.279,414,0.58,415,0.58,416,0.58,417,1.553,418,1.553,419,1.553,420,1.553,421,1.553,422,1.553,423,1.553,424,1.553,425,1.553,426,0.58,427,0.58,428,0.58,429,0.58,430,0.58,431,0.58,436,0.855,437,0.453,438,0.947,439,0.476,452,1.207,457,0.897,458,0.58,485,0.76,491,1.079,517,0.58,518,0.535,519,1.471,523,0.58,524,0.535,526,0.58,527,0.58,528,0.58,529,2.023,530,1.344,534,1.434,547,1.01,554,0.535,557,1.094,565,0.434,569,0.502,582,1.273,591,0.897,593,0.819,597,0.947,598,0.502,599,0.502,606,0.897,608,0.58,609,0.788,610,1.273,611,0.453,612,3.263,614,0.476,615,2.023,616,0.58,617,1.965,618,0.58,619,1.471,620,1.094,621,0.476,622,0.58,623,0.58,624,0.453,625,0.648,626,0.648,627,1.01,628,0.648,629,0.58,630,0.648,631,0.502,632,0.819,633,1.415,634,0.39,635,1.222,636,0.648,637,0.648,638,0.648,639,0.648,640,0.648,641,1.814,642,0.648,643,0.648,644,1.01,645,1.365,646,0.648,647,0.947,648,0.648,649,0.648,650,0.648,651,0.648,652,0.502,653,0.648,654,0.648,655,0.502,656,0.648,657,0.378,658,2.195,659,0.502,660,0.648,661,0.648,662,1.222,663,0.648,664,0.648,665,1.222,666,0.648,667,0.648,668,0.648,669,0.502,670,0.648,671,0.648,672,0.648,673,0.502,674,0.788,675,1.01,676,0.648,677,0.648,678,0.58,679,0.535,680,0.648,681,0.648,682,0.535,683,0.648,684,0.418,685,0.648,686,0.648,687,0.648,688,0.648,689,0.648,690,1.214,691,1.214,692,0.648,693,0.648,694,0.502,695,0.648,696,0.648,697,0.648,698,0.648,699,0.648,700,1.222,701,0.648,702,1.222,703,0.648,704,2.195,705,1.222,706,0.648,707,1.735,708,0.648,709,0.648,710,0.648,711,0.648,712,0.648,713,0.648,714,0.648,715,0.648,716,0.648,717,0.648,718,0.648,719,0.648,720,1.222,721,1.222,722,0.33,723,0.502,724,0.648,725,0.648,726,0.648,727,0.648,728,0.648,729,0.648,730,1.222,731,0.648,732,0.648,733,0.58,734,0.648,735,0.648,736,0.648,737,0.535,738,1.222,739,0.648,740,1.222,741,0.819,742,1.434,743,1.222,744,1.222,745,0.947,746,0.648,747,0.648,748,1.735,749,0.58,750,0.58,751,0.535,752,0.535,753,1.222,754,1.222,755,0.648,756,1.222,757,0.648,758,0.648,759,0.648,760,0.648,761,0.58,762,0.648,763,0.648,764,0.648,765,0.648,766,0.648,767,0.648,768,0.648,769,0.648,770,0.648,771,0.648,772,0.648,773,0.648,774,0.648,775,0.648,776,0.648,777,0.648,778,0.648,779,0.648,780,0.648,781,0.648,782,0.648,783,0.535,784,0.648,785,0.535,786,0.535,787,0.648,788,0.648,789,0.648,790,0.648,791,1.222,792,1.222,793,0.648,794,0.648,795,0.648,796,0.648,797,1.222,798,0.648,799,0.648,800,0.648,801,0.648,802,0.648,803,0.648,804,0.648,805,0.648]],["component/4",[5,0.411,6,0.498]],["title/5-1",[215,21.888,806,18.986,807,30.076]],["name/5-1",[]],["text/5-1",[]],["component/5-1",[]],["title/5-2",[808,34.913]],["name/5-2",[]],["text/5-2",[]],["component/5-2",[]],["title/5-3",[809,34.913]],["name/5-3",[]],["text/5-3",[]],["component/5-3",[]],["title/5-4",[3,14.769,32,28.844]],["name/5-4",[]],["text/5-4",[]],["component/5-4",[]],["title/5",[807,36.973,810,29.99]],["name/5",[811,1.801]],["text/5",[3,3.067,4,1.265,5,1.482,6,1.156,17,2.776,29,1.91,31,2.149,32,1.98,47,4.066,53,3.079,58,2.149,59,3.741,74,1.847,77,4.924,94,3.525,100,1.91,111,2.38,123,2.267,130,1.98,144,2.254,155,4.276,156,2.627,159,1.847,160,2.059,163,1.847,211,1.526,215,1.847,258,2.254,284,2.38,288,2.538,301,1.737,332,2.38,333,2.38,366,1.91,593,2.059,596,2.38,611,2.149,684,1.98,806,2.492,807,6.543,808,2.873,809,2.873,810,3.202,812,2.749,813,2.254,814,2.538,815,2.538,816,7.088,817,1.91,818,2.749,819,2.749,820,2.749,821,2.538,822,4.276,823,2.254,824,2.749,825,3.079,826,3.505,827,2.38,828,3.071,829,2.38,830,2.254,831,2.38,832,1.91,833,3.071,834,3.071,835,3.071,836,4.276,837,2.749,838,2.749,839,2.538,840,2.749,841,2.749,842,2.38,843,2.538,844,2.38]],["component/5",[5,0.411,6,0.498]],["title/6",[150,36.973,810,29.99]],["name/6",[845,1.801]],["text/6",[3,2.603,4,3.248,150,6.517,810,5.286]],["component/6",[5,0.411,6,0.498]],["title/7",[806,23.339,809,26.908]],["name/7",[806,0.527,809,0.608]],["text/7",[1,2.329,3,2.796,4,1.695,5,1.278,17,1.728,30,2.329,35,3.19,37,2.148,47,4.298,49,3.105,53,2.654,75,4.075,76,2.399,77,4.205,84,2.76,122,2.56,123,1.954,227,2.88,245,3.105,301,4.334,365,3.105,366,2.56,389,2.204,515,2.957,606,3.021,722,3.029,806,3.647,809,2.476,826,3.021,829,3.19,830,3.021,831,3.19,832,3.702,846,3.686,847,3.402,848,3.686,849,3.686,850,3.686,851,3.021,852,2.88,853,3.686,854,3.686,855,3.686,856,3.686,857,3.686,858,3.686,859,5.329,860,3.686,861,3.402,862,3.686,863,3.402,864,2.329,865,3.19,866,3.19]],["component/7",[5,0.411,6,0.498]],["title/8",[806,23.339,808,26.908]],["name/8",[806,0.527,808,0.608]],["text/8",[1,2.461,3,2.931,4,1.792,5,1.922,6,1.638,17,1.826,30,2.461,37,2.27,49,3.231,53,2.805,75,4.839,76,2.536,77,3.725,84,2.916,100,2.706,122,2.706,123,2.065,227,4.333,245,3.231,301,4.08,365,2.27,366,2.706,389,2.329,515,3.077,593,2.916,606,3.193,722,3.67,806,3.762,808,3.725,826,3.193,827,3.371,832,2.706,846,3.895,847,3.595,848,3.895,849,3.895,850,3.895,851,3.193,852,3.044,863,3.595,864,2.461,865,3.371,866,3.371,867,3.895,868,5.545,869,3.595,870,3.595,871,3.595,872,3.895,873,3.595,874,3.895]],["component/8",[5,0.411,6,0.498]],["title/9-1",[806,18.986,875,32.584,876,32.584]],["name/9-1",[]],["text/9-1",[]],["component/9-1",[]],["title/9-2",[808,34.913]],["name/9-2",[]],["text/9-2",[]],["component/9-2",[]],["title/9-3",[809,34.913]],["name/9-3",[]],["text/9-3",[]],["component/9-3",[]],["title/9-4",[3,14.769,32,28.844]],["name/9-4",[]],["text/9-4",[]],["component/9-4",[]],["title/9",[810,29.99,877,40.056]],["name/9",[878,1.801]],["text/9",[3,3.027,4,1.082,5,1.31,6,0.989,17,2.787,23,1.406,29,1.633,30,1.486,31,1.837,32,1.693,47,3.895,53,2.721,58,1.837,59,3.428,70,1.927,74,1.579,77,4.661,81,1.927,83,1.486,94,3.182,100,1.633,111,2.035,123,2.512,130,1.693,144,1.927,156,2.321,159,2.538,160,2.829,163,1.579,166,2.17,167,1.486,201,1.579,211,1.305,242,1.444,258,1.927,261,1.927,284,2.035,288,2.17,301,1.486,332,2.035,333,2.035,564,2.035,593,1.76,596,2.035,611,1.837,634,1.579,684,1.693,806,2.202,808,2.538,809,2.538,810,2.829,812,2.351,813,1.927,814,2.17,815,2.17,816,5.944,817,1.633,818,2.351,819,2.351,820,2.351,821,2.17,822,3.779,823,1.927,824,2.351,825,2.721,826,3.097,827,2.035,829,2.035,830,1.927,831,2.035,832,1.633,836,3.779,837,2.351,838,2.351,839,2.17,840,2.351,841,2.351,842,2.035,843,2.17,844,2.035,875,4.737,876,2.351,877,6.348,879,6.06,880,2.351,881,2.626,882,2.626,883,2.626,884,2.626,885,4.22,886,2.829,887,2.035,888,2.626,889,2.626,890,2.626,891,1.927,892,2.626,893,2.351,894,2.626,895,2.626,896,2.626,897,4.22,898,4.22]],["component/9",[5,0.411,6,0.498]],["title/10-1",[886,29.99,899,31.301]],["name/10-1",[]],["text/10-1",[]],["component/10-1",[]],["title/10-2",[864,25.31,900,40.056]],["name/10-2",[]],["text/10-2",[]],["component/10-2",[]],["title/10-3",[15,17.138,901,32.832]],["name/10-3",[]],["text/10-3",[]],["component/10-3",[]],["title/10",[3,14.769,674,28.844]],["name/10",[674,1.161]],["text/10",[0,0.843,1,0.793,3,2.129,4,0.578,5,1.819,7,1.446,11,2.28,15,2.788,17,2.137,18,3.316,24,1.029,29,0.872,30,1.403,32,1.599,34,0.904,37,1.74,42,0.94,46,1.599,47,3.94,49,2.656,50,0.904,54,0.612,55,0.751,56,0.751,59,0.793,60,0.817,63,1.294,64,1.663,69,1.159,75,0.817,81,1.029,87,1.087,90,1.364,91,0.872,92,0.981,94,2.424,95,1.82,101,0.843,102,0.817,103,1.364,104,1.087,107,2.725,108,2.685,122,0.872,123,0.666,136,3.027,145,0.94,156,2.217,158,0.843,159,1.492,160,1.663,165,0.981,167,1.403,169,1.492,179,1.029,182,2.006,195,1.698,196,1.159,198,2.05,199,0.872,205,0.714,208,1.446,211,2.735,219,1.446,220,1.029,225,0.94,238,1.95,245,2.103,247,0.872,254,0.981,256,0.771,260,0.904,272,1.029,287,2.151,301,1.403,316,1.087,317,1.255,319,1.663,326,0.793,343,1.087,344,0.872,346,0.904,352,1.599,355,1.087,360,1.159,361,2.424,362,1.087,365,1.74,366,1.543,368,0.843,369,0.904,376,1.736,377,0.981,378,1.663,379,1.029,380,1.663,381,1.029,382,0.872,383,2.075,384,1.087,389,2.158,399,1.255,400,1.255,407,0.843,412,1.029,448,1.663,450,1.159,452,1.364,484,1.087,508,0.94,515,0.697,544,1.159,565,1.663,571,1.029,574,1.159,609,1.599,621,1.029,624,0.981,645,3.166,652,1.087,659,1.087,674,0.904,690,0.981,691,0.981,694,2.585,722,2.801,723,1.087,742,1.159,806,0.732,832,0.872,844,2.585,847,1.159,864,3.316,886,2.702,887,1.087,891,1.029,899,2.334,900,1.255,901,4.531,902,1.087,903,1.255,904,2.021,905,1.402,906,3.336,907,1.255,908,1.402,909,1.255,910,1.402,911,1.402,912,1.159,913,1.159,914,1.159,915,1.159,916,1.402,917,1.402,918,2.05,919,1.402,920,1.402,921,1.402,922,1.922,923,1.402,924,1.159,925,1.159,926,1.159,927,1.087,928,1.255,929,1.402,930,1.402,931,1.402,932,1.087,933,1.402,934,1.402,935,1.599,936,1.087,937,1.255,938,1.402,939,1.159,940,1.402,941,1.255,942,1.255,943,1.255,944,1.402,945,1.402,946,1.402,947,1.402,948,1.402,949,1.402,950,2.481,951,1.402,952,2.481,953,1.402,954,1.402,955,1.402,956,1.402,957,1.402,958,1.402,959,1.402,960,1.402,961,1.402,962,2.481,963,1.402,964,1.402,965,1.402,966,1.402,967,1.402,968,1.255,969,1.402]],["component/10",[5,0.411,6,0.498]],["title/11-1",[]],["name/11-1",[]],["text/11-1",[]],["component/11-1",[]],["title/11-2",[]],["name/11-2",[]],["text/11-2",[]],["component/11-2",[]],["title/11",[347,27.825,904,17.759]],["name/11",[347,0.628,904,0.401]],["text/11",[3,0.898,4,0.641,7,0.908,15,1.388,17,0.654,18,0.881,34,1.754,36,2.53,46,1.004,47,4.669,54,1.187,63,0.813,68,0.969,90,0.857,101,2.179,103,2.388,107,4.128,108,3.783,109,0.969,123,2.34,163,2.611,176,1.754,185,1.09,199,1.692,203,1.824,208,1.586,215,1.636,238,1.388,253,2.534,256,0.857,274,2.248,287,1.754,326,0.881,347,0.969,350,1.586,352,1.004,368,0.937,376,1.904,383,4.036,413,1.586,436,5.04,437,1.09,438,2.807,439,1.143,440,1.287,441,3.449,443,1.904,444,2.248,445,2.108,446,2.248,452,0.857,484,2.807,491,1.692,515,1.352,519,4.829,529,5.237,530,5.727,537,2.108,565,1.044,602,1.395,603,1.395,633,1.754,641,3.588,645,0.969,647,2.108,684,1.004,737,1.287,741,1.044,749,1.395,750,1.395,751,2.248,752,2.248,815,1.287,904,3.212,922,3.365,932,1.207,970,2.721,971,2.721,972,2.721,973,1.557,974,2.721,975,2.721,976,2.721,977,2.721,978,1.557,979,1.557,980,1.557,981,1.557,982,1.557,983,1.557,984,1.557,985,1.557,986,1.557,987,1.557,988,1.395,989,1.395,990,1.557,991,1.557,992,1.557,993,2.248,994,2.436,995,2.436,996,2.436,997,2.436,998,2.436,999,1.557,1000,2.721,1001,1.557,1002,1.395,1003,1.557,1004,1.395]],["component/11",[5,0.411,6,0.498]],["title/12-1",[54,25.336]],["name/12-1",[]],["text/12-1",[]],["component/12-1",[]],["title/12-2",[1005,40.615]],["name/12-2",[]],["text/12-2",[]],["component/12-2",[]],["title/12-3",[1006,51.974]],["name/12-3",[]],["text/12-3",[]],["component/12-3",[]],["title/12-4",[1007,51.974]],["name/12-4",[]],["text/12-4",[]],["component/12-4",[]],["title/12-5",[1008,58.046]],["name/12-5",[]],["text/12-5",[]],["component/12-5",[]],["title/12-6",[1009,51.974]],["name/12-6",[]],["text/12-6",[]],["component/12-6",[]],["title/12-7",[181,42.601]],["name/12-7",[]],["text/12-7",[]],["component/12-7",[]],["title/12-8",[1010,51.974]],["name/12-8",[]],["text/12-8",[]],["component/12-8",[]],["title/12-9",[]],["name/12-9",[]],["text/12-9",[]],["component/12-9",[]],["title/12-10",[1011,51.974]],["name/12-10",[]],["text/12-10",[]],["component/12-10",[]],["title/12",[485,27.825,904,17.759]],["name/12",[485,0.628,904,0.401]],["text/12",[3,0.176,4,0.22,11,1.052,17,0.427,34,0.656,36,1.084,47,4.672,49,2.37,54,2.137,55,0.286,57,0.374,58,0.374,60,1.679,63,0.531,66,0.332,74,0.321,76,0.311,79,1.412,83,1.052,90,1.226,91,0.633,101,0.321,102,1.084,103,2.393,105,0.414,106,0.374,107,4.344,108,3.609,109,0.332,110,0.358,123,2.786,143,0.912,152,0.478,156,0.56,158,0.321,162,0.345,167,0.302,176,0.345,181,2.525,195,0.272,196,0.841,201,0.321,205,0.518,208,0.311,211,2.916,215,2.616,216,1.157,219,0.593,225,0.683,226,0.358,238,0.205,239,1.544,242,0.56,245,2.554,247,0.332,256,0.294,274,0.841,284,0.414,286,0.478,321,1.205,326,0.825,344,0.633,350,0.311,361,0.321,382,0.332,383,4.721,385,1.441,386,1.365,387,0.789,388,0.747,389,2.53,390,0.841,391,0.789,405,0.392,413,2.535,436,4.862,437,1.301,438,3.662,440,0.442,441,2.747,443,2.747,444,1.205,445,1.13,446,1.537,452,1.023,485,1.386,491,2.441,508,0.358,515,2.161,519,4.217,524,2.122,529,4.548,530,3.212,531,0.478,532,1.842,534,2.381,535,2.114,537,2.861,576,0.414,609,2.929,624,0.374,627,0.442,632,0.683,633,0.345,634,3.042,645,0.332,655,0.789,722,0.272,737,0.442,741,0.358,751,1.205,752,1.205,783,0.841,785,1.205,851,1.07,904,1.558,915,0.442,922,0.789,935,0.345,993,1.842,994,1.306,995,1.306,996,1.665,997,1.306,998,1.306,1005,2.9,1006,0.912,1007,0.478,1009,0.478,1010,1.306,1011,0.912,1012,0.392,1013,1.205,1014,0.534,1015,1.13,1016,0.442,1017,1.018,1018,1.86,1019,1.018,1020,1.13,1021,1.205,1022,0.534,1023,2.228,1024,0.534,1025,4.725,1026,1.458,1027,1.458,1028,1.458,1029,1.458,1030,1.665,1031,1.018,1032,0.478,1033,0.478,1034,0.414,1035,1.018,1036,0.442,1037,0.442,1038,0.478,1039,0.534,1040,0.534,1041,0.534,1042,0.534,1043,0.534,1044,1.018,1045,0.534,1046,0.534,1047,0.478,1048,0.478,1049,0.478,1050,0.442,1051,0.534,1052,0.912,1053,0.534,1054,1.86,1055,1.665,1056,0.534,1057,0.534,1058,0.414,1059,0.534,1060,0.534,1061,1.458,1062,1.458,1063,1.458,1064,1.018,1065,1.018,1066,1.018,1067,1.018,1068,0.534,1069,1.86,1070,1.018,1071,0.912,1072,0.912,1073,1.018,1074,1.537,1075,1.018,1076,0.841,1077,2.568,1078,1.99,1079,1.365,1080,1.86,1081,0.912,1082,1.018,1083,1.018,1084,1.018,1085,1.018,1086,1.018,1087,0.534,1088,0.534,1089,1.018,1090,1.018,1091,0.534,1092,0.534,1093,0.912,1094,0.534,1095,0.534]],["component/12",[5,0.411,6,0.498]],["title/13-1",[56,23.95,904,17.759]],["name/13-1",[]],["text/13-1",[]],["component/13-1",[]],["title/13-2",[485,27.825,904,17.759]],["name/13-2",[]],["text/13-2",[]],["component/13-2",[]],["title/13-3",[55,23.95,904,17.759]],["name/13-3",[]],["text/13-3",[]],["component/13-3",[]],["title/13",[904,17.759,1096,32.832]],["name/13",[904,0.401,1096,0.742]],["text/13",[3,1.071,4,1.336,36,1.891,58,2.27,90,1.784,91,2.018,117,2.175,167,1.835,199,4.823,242,1.784,247,2.018,256,2.741,326,2.819,350,1.891,361,1.951,364,2.905,452,1.784,575,2.514,645,3.1,669,2.514,904,3.66,1021,4.119,1096,5.927,1097,3.244,1098,2.092,1099,4.462,1100,3.244,1101,2.681,1102,3.244,1103,2.681,1104,3.244,1105,3.244,1106,3.244,1107,3.244,1108,3.244,1109,3.244,1110,3.244,1111,3.244,1112,3.244,1113,3.244,1114,3.244,1115,3.244,1116,4.983,1117,4.983,1118,4.983,1119,4.983,1120,4.997,1121,4.983,1122,4.983,1123,3.862,1124,3.244,1125,2.681,1126,3.244,1127,2.681,1128,3.244,1129,3.244,1130,3.244,1131,3.244,1132,3.244,1133,3.244,1134,3.244,1135,3.244,1136,3.244,1137,3.244,1138,4.983,1139,4.983,1140,3.244,1141,3.244,1142,3.244,1143,3.244,1144,3.244,1145,3.244,1146,3.244,1147,3.244,1148,3.244,1149,3.244,1150,3.244,1151,3.244,1152,3.244,1153,3.244,1154,3.244,1155,3.244,1156,3.244,1157,3.244,1158,2.905,1159,3.244,1160,3.244,1161,3.244]],["component/13",[5,0.411,6,0.498]],["title/14-1",[904,23.043]],["name/14-1",[]],["text/14-1",[]],["component/14-1",[]],["title/14-2",[211,28.841]],["name/14-2",[]],["text/14-2",[]],["component/14-2",[]],["title/14-3",[205,22.767,211,22.227]],["name/14-3",[]],["text/14-3",[]],["component/14-3",[]],["title/14",[3,14.769,904,17.759]],["name/14",[904,0.715]],["text/14",[3,2.229,4,0.64,5,0.482,7,3.153,8,1.204,14,0.967,15,0.595,17,2.593,18,1.536,36,0.906,37,0.811,42,1.82,47,3.643,49,1.417,54,1.578,55,2.321,56,0.832,58,1.087,60,0.906,63,0.811,64,3.904,74,2.175,79,1.493,83,0.879,90,1.989,91,0.967,101,1.633,103,0.855,104,1.204,107,2.897,108,2.107,109,0.967,123,1.289,136,0.855,145,1.82,149,1.14,156,1.493,158,0.935,169,1.633,170,1.087,176,1.002,182,0.935,195,1.84,205,3.143,206,2.244,208,3.153,211,3.576,215,1.633,216,0.967,225,1.042,228,1.536,238,1.385,242,0.855,245,0.811,252,1.14,256,0.855,258,1.14,287,2.795,291,1.284,319,1.042,326,2.452,335,1.284,347,0.967,352,1.002,365,0.811,368,1.633,369,1.002,376,1.9,382,0.967,383,1.689,385,1.204,386,1.14,387,1.204,388,1.14,407,0.935,413,0.906,441,2.53,454,1.284,485,0.967,491,0.967,494,1.391,515,0.772,540,1.284,556,1.284,582,1.14,613,1.204,619,1.042,621,1.14,624,1.9,632,1.042,634,0.935,645,2.249,647,2.104,657,1.583,659,2.104,674,1.002,675,1.284,723,1.204,741,1.82,786,1.284,842,1.204,864,1.536,901,1.14,904,3.361,915,6.587,918,3.583,932,1.204,935,2.331,989,1.391,1012,3.971,1013,1.284,1020,2.104,1034,1.204,1079,1.14,1081,1.391,1096,1.14,1098,1.751,1162,1.284,1163,1.554,1164,1.391,1165,1.391,1166,1.391,1167,1.284,1168,2.431,1169,1.554,1170,1.554,1171,1.554,1172,2.715,1173,1.554,1174,2.715,1175,2.715,1176,1.554,1177,1.554,1178,1.554,1179,1.554,1180,1.554,1181,1.554,1182,1.14,1183,1.554,1184,2.244,1185,2.715,1186,1.554,1187,1.284,1188,1.554,1189,1.554,1190,1.554,1191,1.391,1192,1.554,1193,1.554,1194,1.391,1195,1.554,1196,1.284,1197,4.335,1198,1.554,1199,1.391,1200,1.554,1201,1.14,1202,2.431,1203,2.244,1204,2.431,1205,2.244,1206,1.391,1207,2.431,1208,1.391,1209,1.391,1210,1.391,1211,1.391,1212,1.391,1213,1.554,1214,1.554,1215,1.391,1216,1.284,1217,1.554,1218,1.554,1219,1.554,1220,1.554,1221,1.554,1222,1.554,1223,1.554,1224,1.554,1225,1.554]],["component/14",[5,0.411,6,0.498]],["title/15",[657,26.074,904,17.759]],["name/15",[657,0.589,904,0.401]],["text/15",[3,2.255,4,1.627,17,1.659,54,1.725,76,3.367,101,2.376,123,1.876,149,2.9,158,2.376,169,2.376,201,2.376,205,4.249,211,3.972,260,2.547,301,2.235,350,2.303,361,2.376,404,3.062,515,2.87,582,2.9,644,3.265,647,3.062,657,5.154,659,3.062,684,2.547,722,2.011,813,2.9,904,2.983,1012,2.9,1034,3.062,1202,3.538,1203,3.265,1204,3.538,1205,3.265,1206,3.538,1207,3.538,1208,3.538,1209,3.538,1210,3.538,1211,3.538,1212,3.538,1215,3.538,1226,3.951,1227,4.775,1228,3.951,1229,5.777,1230,5.777,1231,3.951,1232,3.951,1233,3.951,1234,3.951,1235,3.951,1236,3.951,1237,3.951,1238,3.951,1239,3.951,1240,3.951,1241,3.951,1242,3.951,1243,3.951,1244,3.951,1245,3.538,1246,3.951,1247,3.265,1248,3.951]],["component/15",[5,0.411,6,0.498]],["title/16-1",[54,25.336]],["name/16-1",[]],["text/16-1",[]],["component/16-1",[]],["title/16-2",[1103,47.974]],["name/16-2",[]],["text/16-2",[]],["component/16-2",[]],["title/16-3",[1101,47.974]],["name/16-3",[]],["text/16-3",[]],["component/16-3",[]],["title/16",[56,23.95,904,17.759]],["name/16",[56,0.541,904,0.401]],["text/16",[3,0.987,4,1.232,5,0.928,17,1.255,36,2.727,47,4.254,50,3.017,54,2.516,55,1.601,56,2.505,63,2.441,65,2.195,66,1.86,92,2.093,94,1.799,101,2.814,102,4.729,103,2.573,105,3.626,106,3.274,107,4.465,123,2.736,136,2.573,144,2.195,156,1.645,158,1.799,159,1.799,195,2.381,201,1.799,205,1.522,211,3.895,215,2.814,238,1.792,326,2.647,361,1.799,378,2.005,380,2.005,405,3.434,413,2.727,515,2.325,519,5.591,535,2.195,576,2.318,632,2.005,655,6.612,657,1.743,690,2.093,691,2.093,694,2.318,904,2.588,935,1.928,1012,3.434,1015,4.466,1016,2.472,1036,2.472,1037,2.472,1098,1.928,1101,2.472,1103,2.472,1249,4.679,1250,2.472,1251,2.472,1252,2.991,1253,2.991,1254,2.991,1255,4.679,1256,2.991]],["component/16",[5,0.411,6,0.498]],["title/17-1",[54,25.336]],["name/17-1",[]],["text/17-1",[]],["component/17-1",[]],["title/17-2",[1127,47.974]],["name/17-2",[]],["text/17-2",[]],["component/17-2",[]],["title/17-3",[1125,47.974]],["name/17-3",[]],["text/17-3",[]],["component/17-3",[]],["title/17-4",[1257,51.974]],["name/17-4",[]],["text/17-4",[]],["component/17-4",[]],["title/17-5",[1258,51.974]],["name/17-5",[]],["text/17-5",[]],["component/17-5",[]],["title/17-6",[924,47.974]],["name/17-6",[]],["text/17-6",[]],["component/17-6",[]],["title/17-7",[1259,51.974]],["name/17-7",[]],["text/17-7",[]],["component/17-7",[]],["title/17-8",[1260,51.974]],["name/17-8",[]],["text/17-8",[]],["component/17-8",[]],["title/17-9",[1261,51.974]],["name/17-9",[]],["text/17-9",[]],["component/17-9",[]],["title/17-10",[1262,51.974]],["name/17-10",[]],["text/17-10",[]],["component/17-10",[]],["title/17-11",[1263,51.974]],["name/17-11",[]],["text/17-11",[]],["component/17-11",[]],["title/17-12",[1264,51.974]],["name/17-12",[]],["text/17-12",[]],["component/17-12",[]],["title/17-13",[1265,51.974]],["name/17-13",[]],["text/17-13",[]],["component/17-13",[]],["title/17-14",[60,33.832]],["name/17-14",[]],["text/17-14",[]],["component/17-14",[]],["title/17-15",[1266,51.974]],["name/17-15",[]],["text/17-15",[]],["component/17-15",[]],["title/17-16",[1267,51.974]],["name/17-16",[]],["text/17-16",[]],["component/17-16",[]],["title/17-17",[1268,51.974]],["name/17-17",[]],["text/17-17",[]],["component/17-17",[]],["title/17",[55,23.95,904,17.759]],["name/17",[55,0.541,904,0.401]],["text/17",[3,0.239,4,0.298,36,1.661,47,4.611,49,2.052,54,2.584,55,3.529,56,0.726,60,2.466,63,0.377,68,3.359,76,0.422,79,2.327,90,0.398,102,0.79,103,3.167,105,0.561,106,0.506,107,4.577,108,5.037,109,0.843,123,3.592,158,0.435,162,0.466,167,0.767,195,0.69,197,0.531,201,0.435,205,0.368,208,0.79,211,2.861,212,0.598,215,3.463,226,0.909,238,0.519,242,0.746,245,2.052,256,0.746,275,0.598,326,0.767,350,0.422,361,0.435,383,4.931,385,3.048,386,2.887,387,3.048,388,2.887,389,2.106,390,3.251,391,3.048,405,0.531,407,0.435,413,3.356,441,3.908,491,3.581,515,2.861,576,0.561,613,0.561,632,1.282,633,3.354,634,3.128,655,1.051,785,2.355,904,1.289,918,1.12,924,0.598,935,0.466,988,1.214,1005,2.272,1012,0.531,1015,1.482,1016,0.598,1032,0.648,1033,0.648,1036,0.598,1037,0.598,1038,0.648,1052,1.214,1071,3.789,1072,5.3,1078,2.795,1096,0.531,1098,1.233,1125,0.598,1127,0.598,1257,0.648,1258,0.648,1259,0.648,1260,0.648,1261,0.648,1262,0.648,1263,0.648,1264,0.648,1265,0.648,1266,1.214,1267,0.648,1268,0.648,1269,1.356,1270,2.517,1271,1.356,1272,1.356,1273,5.4,1274,2.407,1275,3.607,1276,2.407,1277,2.407,1278,0.723,1279,1.356,1280,1.356,1281,0.723,1282,0.723,1283,0.723,1284,0.723,1285,0.723,1286,0.723,1287,0.723,1288,0.723,1289,1.356,1290,0.723,1291,0.723,1292,0.723,1293,1.356,1294,1.356,1295,1.356,1296,1.356,1297,0.723,1298,0.723,1299,0.723,1300,2.407,1301,0.723,1302,1.356,1303,1.356,1304,1.356,1305,1.356,1306,1.356,1307,1.356,1308,1.356,1309,1.356,1310,0.723,1311,1.356]],["component/17",[5,0.411,6,0.498]],["title/18-1",[3,14.769,806,23.339]],["name/18-1",[]],["text/18-1",[]],["component/18-1",[]],["title/18-2",[808,34.913]],["name/18-2",[]],["text/18-2",[]],["component/18-2",[]],["title/18-3",[809,34.913]],["name/18-3",[]],["text/18-3",[]],["component/18-3",[]],["title/18-4",[59,17.352,100,19.076,211,15.239,722,15.608]],["name/18-4",[]],["text/18-4",[]],["component/18-4",[]],["title/18-5",[3,14.769,28,28.844]],["name/18-5",[]],["text/18-5",[]],["component/18-5",[]],["title/18-6",[15,17.138,195,22.767]],["name/18-6",[]],["text/18-6",[]],["component/18-6",[]],["title/18-7",[83,20.589,515,18.081,722,18.52]],["name/18-7",[]],["text/18-7",[]],["component/18-7",[]],["title/18-8",[11,25.31,891,32.832]],["name/18-8",[]],["text/18-8",[]],["component/18-8",[]],["title/18-9",[11,20.589,136,20.015,722,18.52]],["name/18-9",[]],["text/18-9",[]],["component/18-9",[]],["title/18-10",[21,34.67,1312,40.056]],["name/18-10",[]],["text/18-10",[]],["component/18-10",[]],["title/18",[3,12.014,79,20.015,1313,28.203]],["name/18",[79,0.556,1313,0.783]],["text/18",[1,2.056,3,2.455,4,0.41,5,0.566,6,0.687,9,2.182,10,2.182,11,3.468,15,1.852,17,1.525,23,0.534,24,1.339,28,1.176,29,0.62,30,0.564,31,0.697,32,1.176,35,0.772,37,1.627,47,3.731,48,0.772,49,2.833,50,2.011,51,0.668,53,1.176,54,2.371,55,0.976,56,0.534,57,0.697,59,1.427,60,0.581,62,0.599,64,1.223,65,1.339,66,1.568,67,0.892,69,2.577,75,3.001,76,1.47,77,2.457,79,1.999,83,2.913,84,1.691,89,0.772,90,0.548,92,0.697,94,0.599,95,0.731,100,1.94,103,0.548,107,2.908,108,1.063,109,1.134,117,1.223,119,0.731,122,1.134,123,1.48,128,0.772,130,0.643,136,4.146,145,0.668,156,1.999,159,1.517,162,0.643,169,1.097,173,0.824,176,0.643,183,0.892,195,2.079,198,0.824,203,0.668,205,0.507,206,0.824,211,1.253,226,0.668,227,0.697,239,0.599,240,0.697,245,2.131,246,0.824,247,1.568,248,0.772,256,0.548,260,1.176,261,0.731,272,2.289,273,1.507,279,0.772,283,0.772,301,1.764,308,0.824,315,0.772,316,0.772,332,0.772,333,0.772,352,0.643,356,1.507,358,0.824,359,0.772,361,1.517,363,1.633,365,1.316,366,0.62,376,0.697,377,0.697,378,1.223,379,0.731,380,1.223,381,0.731,382,0.62,383,0.62,384,0.772,386,0.731,388,0.731,389,1.669,391,0.772,407,0.599,412,0.731,413,1.063,432,0.824,437,0.697,439,0.731,445,0.772,450,0.824,452,0.548,508,0.668,515,1.253,564,0.772,565,0.668,574,0.824,575,2.417,579,0.731,593,0.668,610,0.731,613,0.772,614,0.731,627,0.824,633,0.643,634,0.599,673,0.772,674,0.643,690,0.697,691,0.697,722,3.47,733,0.892,745,1.954,806,2.338,808,2.457,809,1.517,817,0.62,823,2.289,825,2.011,826,1.339,827,0.772,829,0.772,830,0.731,831,0.772,832,3.202,843,0.824,844,0.772,851,0.731,852,0.697,853,0.892,854,0.892,855,0.892,856,0.892,857,0.892,858,0.892,859,1.633,860,0.892,861,2.577,862,0.892,863,1.507,864,1.764,865,1.414,866,1.414,867,0.892,868,1.633,869,0.824,870,0.824,871,2.577,872,0.892,873,0.824,874,0.892,886,1.691,891,3.289,893,0.892,899,1.276,909,0.892,913,0.824,914,0.824,925,1.507,926,2.084,927,0.772,936,0.772,1047,0.892,1055,0.892,1078,1.954,1079,1.851,1098,0.643,1120,0.731,1166,2.258,1168,0.892,1182,0.731,1187,0.824,1245,0.892,1247,1.507,1270,0.772,1312,1.633,1313,0.772,1314,1.507,1315,0.892,1316,0.824,1317,0.772,1318,0.997,1319,0.997,1320,0.997,1321,0.997,1322,0.997,1323,0.892,1324,0.997,1325,1.824,1326,0.997,1327,0.892,1328,0.997,1329,0.997,1330,0.997,1331,1.633,1332,0.997,1333,0.997,1334,0.997,1335,0.997,1336,0.997,1337,0.997,1338,0.997,1339,0.892,1340,0.997,1341,0.997,1342,0.997,1343,0.997,1344,0.997,1345,0.997,1346,0.997,1347,0.997,1348,0.997,1349,0.997,1350,0.997,1351,0.892,1352,1.824,1353,0.892,1354,0.997,1355,0.997,1356,0.997,1357,0.892,1358,0.997,1359,1.824,1360,1.824,1361,3.118,1362,3.118,1363,0.892,1364,0.997,1365,0.892,1366,0.892,1367,0.997,1368,0.892,1369,0.892,1370,0.892,1371,0.997,1372,0.997,1373,0.997,1374,0.997,1375,0.997,1376,0.997,1377,0.997,1378,0.892,1379,0.824,1380,0.892,1381,0.892]],["component/18",[5,0.411,6,0.498]],["title/19-1",[15,7.213,23,10.081,29,11.711,75,10.975,268,15.562,365,9.824,902,14.593,1382,18.829]],["name/19-1",[]],["text/19-1",[]],["component/19-1",[]],["title/19-2",[0,21.888,3,12.014,1383,36.391]],["name/19-2",[]],["text/19-2",[]],["component/19-2",[]],["title/19-3",[1167,47.974]],["name/19-3",[]],["text/19-3",[]],["component/19-3",[]],["title/19-4",[128,44.986]],["name/19-4",[]],["text/19-4",[]],["component/19-4",[]],["title/19",[3,14.769,308,36.973]],["name/19",[1384,1.612]],["text/19",[0,3.267,1,0.885,3,2.637,4,0.644,5,2.239,6,1.64,7,0.912,9,1.911,10,1.095,11,0.885,14,0.973,15,2.594,17,2.28,18,3.307,22,1.095,23,0.838,28,1.009,30,0.885,33,1.293,35,1.213,37,2.579,42,1.831,46,1.761,47,3.709,48,1.213,49,0.816,50,1.761,51,1.049,54,1.901,55,1.462,59,0.885,63,0.816,66,3.855,68,1.699,73,1.401,76,0.912,77,1.643,79,1.999,83,0.885,84,1.049,91,0.973,94,0.941,100,0.973,103,0.861,107,3.129,108,2.119,113,2.257,120,1.401,122,2.261,123,1.725,130,1.009,134,1.401,136,1.999,156,0.861,158,0.941,159,2.62,163,2.186,167,0.885,170,1.095,179,1.148,182,2.62,194,1.148,195,1.39,201,0.941,205,0.796,216,1.699,225,1.049,228,0.885,238,1.392,240,1.911,247,1.699,254,1.095,256,0.861,260,1.009,270,3.9,291,1.293,297,1.401,319,1.049,336,1.401,342,1.009,344,1.699,347,0.973,351,2.446,352,2.344,354,1.401,365,1.896,366,2.261,368,0.941,369,1.009,370,1.095,377,1.095,378,2.92,379,1.148,380,2.92,381,2.005,382,1.699,383,0.973,384,1.213,395,2.446,412,1.148,436,3.047,439,1.148,448,1.049,452,1.502,490,1.293,491,1.699,515,1.806,519,2.437,535,1.148,537,1.213,571,1.148,579,1.148,619,1.049,621,1.148,622,3.9,623,1.401,624,1.095,645,2.261,674,1.009,690,1.095,691,1.095,694,2.117,722,0.796,810,1.831,817,0.973,823,1.148,825,1.761,830,2.005,832,0.973,864,0.885,887,1.213,901,2.005,902,2.117,903,1.401,913,1.293,914,1.293,928,1.401,936,1.213,941,1.401,942,1.401,943,1.401,1005,1.095,1050,1.293,1058,2.117,1099,1.401,1162,1.293,1182,2.668,1194,1.401,1201,1.148,1250,1.293,1251,1.293,1313,1.213,1379,1.293,1384,1.401,1385,1.565,1386,1.565,1387,3.255,1388,2.257,1389,2.731,1390,1.565,1391,1.565,1392,1.565,1393,1.293,1394,1.565,1395,1.401,1396,1.565,1397,1.565,1398,1.401,1399,1.401,1400,1.565,1401,1.565,1402,1.565,1403,1.565,1404,1.293,1405,2.731,1406,1.565,1407,1.565,1408,1.565,1409,1.565,1410,1.565,1411,1.565,1412,2.731,1413,1.565,1414,1.565,1415,1.401]],["component/19",[5,0.411,6,0.498]],["title/20",[1416,47.974]],["name/20",[1416,1.488]],["text/20",[3,2.248,4,1.138,5,1.699,9,1.933,10,1.933,11,1.563,17,1.16,23,1.479,37,1.441,47,4.386,49,3.255,50,2.834,52,2.141,54,1.918,55,1.479,56,1.479,62,1.662,63,2.293,66,1.718,75,1.61,86,2.283,90,1.52,94,1.662,103,1.52,107,4.071,111,3.406,117,1.852,124,2.474,125,2.474,126,2.474,129,2.474,136,2.417,156,1.52,159,2.644,160,3.669,165,1.933,169,1.662,179,3.226,195,2.785,203,1.852,204,3.935,211,1.373,219,2.562,238,1.058,240,1.933,245,2.293,359,3.406,368,1.662,378,2.947,380,2.947,389,2.353,443,3.075,515,1.373,519,5.098,532,3.633,535,2.028,591,2.028,595,2.141,609,2.834,621,2.028,684,1.781,690,1.933,691,1.933,907,2.474,993,3.633,1021,2.283,1049,2.474,1076,2.283,1182,2.028,1205,2.283,1250,2.283,1251,2.283,1327,2.474,1339,3.935,1416,5.993,1417,2.763,1418,2.474,1419,2.763,1420,4.395,1421,2.763,1422,2.763,1423,4.395,1424,3.935,1425,2.763,1426,2.763,1427,2.763,1428,2.763,1429,2.763,1430,2.763,1431,2.763,1432,2.763,1433,2.763,1434,2.763,1435,2.474]],["component/20",[5,0.411,6,0.498]],["title/21-1",[238,17.138,1436,34.67]],["name/21-1",[]],["text/21-1",[]],["component/21-1",[]],["title/21-2",[368,34.913]],["name/21-2",[]],["text/21-2",[]],["component/21-2",[]],["title/21-3",[228,32.841]],["name/21-3",[]],["text/21-3",[]],["component/21-3",[]],["title/21-4",[253,40.615]],["name/21-4",[]],["text/21-4",[]],["component/21-4",[]],["title/21-5",[369,37.425]],["name/21-5",[]],["text/21-5",[]],["component/21-5",[]],["title/21-6",[346,37.425]],["name/21-6",[]],["text/21-6",[]],["component/21-6",[]],["title/21-7",[370,40.615]],["name/21-7",[]],["text/21-7",[]],["component/21-7",[]],["title/21-8",[374,44.986]],["name/21-8",[]],["text/21-8",[]],["component/21-8",[]],["title/21-9",[1437,51.974]],["name/21-9",[]],["text/21-9",[]],["component/21-9",[]],["title/21-10",[15,13.941,238,13.941,447,30.076]],["name/21-10",[]],["text/21-10",[]],["component/21-10",[]],["title/21-11",[1438,42.601]],["name/21-11",[]],["text/21-11",[]],["component/21-11",[]],["title/21-12",[1439,47.974]],["name/21-12",[]],["text/21-12",[]],["component/21-12",[]],["title/21-13",[1440,51.974]],["name/21-13",[]],["text/21-13",[]],["component/21-13",[]],["title/21-14",[1441,51.974]],["name/21-14",[]],["text/21-14",[]],["component/21-14",[]],["title/21-15",[228,20.589,238,13.941,657,21.21]],["name/21-15",[]],["text/21-15",[]],["component/21-15",[]],["title/21-16",[597,44.986]],["name/21-16",[]],["text/21-16",[]],["component/21-16",[]],["title/21-17",[598,44.986]],["name/21-17",[]],["text/21-17",[]],["component/21-17",[]],["title/21-18",[599,44.986]],["name/21-18",[]],["text/21-18",[]],["component/21-18",[]],["title/21-19",[1442,51.974]],["name/21-19",[]],["text/21-19",[]],["component/21-19",[]],["title/21-20",[1443,51.974]],["name/21-20",[]],["text/21-20",[]],["component/21-20",[]],["title/21-21",[228,14.995,238,10.153,365,13.827,1444,26.504,1445,21.904]],["name/21-21",[]],["text/21-21",[]],["component/21-21",[]],["title/21-22",[1446,51.974]],["name/21-22",[]],["text/21-22",[]],["component/21-22",[]],["title/21-23",[1447,51.974]],["name/21-23",[]],["text/21-23",[]],["component/21-23",[]],["title/21-24",[1448,51.974]],["name/21-24",[]],["text/21-24",[]],["component/21-24",[]],["title/21-25",[1449,51.974]],["name/21-25",[]],["text/21-25",[]],["component/21-25",[]],["title/21-26",[238,17.138,657,26.074]],["name/21-26",[]],["text/21-26",[]],["component/21-26",[]],["title/21-27",[1227,47.974]],["name/21-27",[]],["text/21-27",[]],["component/21-27",[]],["title/21-28",[1450,51.974]],["name/21-28",[]],["text/21-28",[]],["component/21-28",[]],["title/21-29",[1451,51.974]],["name/21-29",[]],["text/21-29",[]],["component/21-29",[]],["title/21-30",[219,26.074,238,17.138]],["name/21-30",[]],["text/21-30",[]],["component/21-30",[]],["title/21-31",[1452,51.974]],["name/21-31",[]],["text/21-31",[]],["component/21-31",[]],["title/21-32",[1453,51.974]],["name/21-32",[]],["text/21-32",[]],["component/21-32",[]],["title/21",[238,17.138,1454,34.67]],["name/21",[1455,1.801]],["text/21",[0,0.332,3,0.182,4,0.228,7,1.722,15,3.434,17,0.631,23,0.296,31,0.386,34,2.271,36,1.335,37,0.999,47,3.972,49,1.695,51,1.767,54,0.835,56,0.563,60,3.474,62,1.586,63,0.548,68,0.654,70,1.681,71,0.428,74,0.632,76,0.612,90,0.304,101,2.546,102,0.322,110,0.704,119,1.405,122,0.344,123,0.499,149,0.771,163,1.378,167,0.594,169,0.332,170,0.735,182,1.378,184,0.428,185,2.808,194,1.103,195,0.281,201,0.332,203,0.704,205,0.535,208,4.215,209,0.941,216,5.714,226,0.704,228,1.296,229,0.654,238,2.407,241,0.428,242,0.578,245,2.768,247,0.344,253,1.339,254,0.386,272,0.771,283,1.775,285,0.495,287,0.356,290,0.428,292,0.457,301,0.313,304,2.169,326,0.313,341,0.428,344,2.349,346,0.356,350,0.322,361,0.332,365,0.548,368,1.378,369,2.271,370,0.735,374,0.428,382,0.935,389,1.74,407,2.271,434,0.457,435,1.582,441,0.386,443,1.051,447,0.457,448,0.704,452,1.26,460,0.457,485,0.935,491,0.654,508,0.37,511,0.814,555,0.495,560,0.457,569,2.043,571,1.405,575,3.281,582,2.585,595,0.428,597,0.428,598,0.428,599,0.428,600,0.495,601,1.893,604,1.714,609,2.988,610,0.405,611,0.386,624,0.735,631,0.428,632,1.767,633,2.863,634,1.777,644,0.457,657,1.335,669,1.483,678,2.646,679,2.911,684,0.356,741,2.977,783,0.457,817,0.344,825,1.477,852,0.386,904,1.173,912,0.457,922,0.428,939,0.457,1002,0.495,1004,0.495,1005,0.735,1015,0.814,1074,0.457,1079,0.405,1098,0.356,1120,5.695,1123,5.281,1184,0.868,1203,2.685,1227,1.893,1317,0.814,1381,0.495,1393,0.457,1395,0.495,1437,0.495,1438,2.169,1439,1.582,1440,2.051,1441,0.941,1442,0.495,1443,0.495,1445,0.868,1446,0.941,1447,0.495,1448,0.495,1449,0.495,1450,0.941,1451,0.941,1452,0.495,1453,0.495,1454,2.29,1456,0.457,1457,0.495,1458,0.495,1459,1.051,1460,1.503,1461,1.051,1462,0.552,1463,0.552,1464,1.051,1465,0.552,1466,2.051,1467,0.552,1468,0.552,1469,1.345,1470,1.714,1471,4.385,1472,0.552,1473,0.552,1474,0.495,1475,2.636,1476,0.552,1477,0.552,1478,0.552,1479,1.051,1480,0.552,1481,0.552,1482,2.291,1483,0.552,1484,0.552,1485,0.552,1486,0.552,1487,0.552,1488,2.291,1489,0.552,1490,0.552,1491,1.051,1492,0.495,1493,0.552,1494,0.552,1495,1.051,1496,0.495,1497,0.495,1498,0.552,1499,0.941,1500,1.345,1501,0.552,1502,0.552,1503,0.552,1504,1.051,1505,1.051,1506,1.051,1507,1.051,1508,1.051,1509,0.552,1510,1.051,1511,0.552,1512,1.503,1513,1.503,1514,1.051,1515,0.552,1516,0.552,1517,0.552,1518,1.051,1519,0.552,1520,0.552,1521,0.552,1522,0.552,1523,1.051,1524,0.552,1525,0.552,1526,1.714,1527,0.552,1528,0.552,1529,1.503,1530,1.345,1531,0.552,1532,0.552,1533,0.552,1534,0.552,1535,3.776,1536,0.552,1537,3.776,1538,0.552,1539,2.291,1540,1.914,1541,0.552,1542,0.552,1543,0.457,1544,1.051,1545,2.291,1546,0.552,1547,1.714,1548,1.503,1549,1.914,1550,2.636,1551,1.914,1552,0.495,1553,1.051,1554,0.552,1555,0.552,1556,0.495,1557,1.503,1558,0.552,1559,0.552,1560,0.552,1561,0.552,1562,0.941,1563,0.552,1564,1.051,1565,0.552]],["component/21",[5,0.411,6,0.498]],["title/22-1",[1566,51.974]],["name/22-1",[]],["text/22-1",[]],["component/22-1",[]],["title/22-2",[119,42.601]],["name/22-2",[]],["text/22-2",[]],["component/22-2",[]],["title/22",[238,22.237]],["name/22",[1567,1.801]],["text/22",[3,1.367,4,1.706,15,3.666,17,1.738,30,2.343,47,3.568,53,2.67,63,2.16,86,4.94,119,5.978,128,5.437,167,2.343,195,2.107,208,4.089,216,2.576,237,2.897,238,3.12,326,3.382,491,2.576,547,3.422,565,2.776,645,3.718,673,4.633,817,2.576,1020,3.209,1120,5.637,1123,5.953,1315,3.708,1365,3.708,1438,5.637,1439,3.422,1454,3.209,1471,6.348,1566,6.281,1568,3.422,1569,4.141,1570,4.141,1571,4.141]],["component/22",[5,0.411,6,0.498]],["title/23-1",[15,22.237]],["name/23-1",[]],["text/23-1",[]],["component/23-1",[]],["title/23-2",[3,14.769,15,17.138]],["name/23-2",[]],["text/23-2",[]],["component/23-2",[]],["title/23",[15,17.138,817,27.825]],["name/23",[1572,1.801]],["text/23",[3,1.319,4,0.571,5,1.025,14,2.055,15,3.521,17,2.445,18,0.784,21,1.902,23,0.742,29,0.862,30,0.784,31,0.969,34,1.582,37,0.723,38,1.074,42,1.645,46,1.582,47,2.122,49,2.084,54,1.071,55,3.879,64,0.929,66,2.485,68,0.862,74,1.476,75,2.329,76,0.807,77,0.833,79,2.779,84,0.929,85,1.145,91,0.862,100,0.862,103,0.762,107,2.139,108,0.807,109,1.526,117,1.645,123,1.165,130,0.893,136,1.35,158,1.476,162,0.893,163,1.987,165,0.969,170,0.969,173,1.145,174,1.074,176,0.893,182,0.833,188,1.24,195,1.249,211,0.688,212,2.028,216,3.4,219,0.807,236,1.145,237,2.796,238,3.036,239,3.288,241,2.56,242,1.35,245,2.636,256,1.817,260,0.893,276,1.24,290,1.902,304,1.017,319,0.929,334,1.24,342,0.893,344,2.485,350,1.43,352,0.893,362,1.074,365,2.384,368,2.748,369,4.432,370,0.969,376,0.969,389,2.139,396,1.145,397,2.028,407,1.476,413,1.43,434,2.028,435,2.028,436,0.969,437,0.969,443,1.717,448,3.388,452,0.762,454,1.145,457,1.801,460,1.145,484,1.074,508,1.645,511,2.56,540,2.028,544,1.145,554,1.145,556,2.028,560,1.145,565,1.645,571,1.017,601,2.028,609,2.946,614,1.017,629,1.24,631,1.074,633,0.893,652,1.074,675,1.145,722,1.681,723,1.074,741,2.215,745,1.074,813,1.801,817,0.862,825,2.13,851,2.425,880,1.24,901,1.017,912,1.145,927,1.074,935,1.582,936,1.074,1098,2.576,1162,1.145,1191,1.24,1196,1.145,1216,2.73,1317,1.074,1379,1.145,1380,1.24,1393,2.028,1404,3.776,1454,1.074,1456,1.145,1496,1.24,1573,1.385,1574,1.385,1575,2.454,1576,1.385,1577,1.385,1578,3.995,1579,1.24,1580,1.385,1581,2.197,1582,2.454,1583,1.385,1584,4.569,1585,2.454,1586,2.454,1587,2.454,1588,3.304,1589,2.454,1590,1.385,1591,1.385,1592,1.385,1593,2.454,1594,1.24,1595,1.385,1596,2.454,1597,1.385,1598,1.24,1599,1.385,1600,1.24,1601,1.385,1602,2.197,1603,1.385,1604,1.385,1605,1.385,1606,1.385,1607,1.385,1608,1.385,1609,1.24,1610,1.385,1611,1.385,1612,1.385]],["component/23",[5,0.411,6,0.498]],["title/24-1",[238,17.138,1436,34.67]],["name/24-1",[]],["text/24-1",[]],["component/24-1",[]],["title/24-2",[1613,51.974]],["name/24-2",[]],["text/24-2",[]],["component/24-2",[]],["title/24-3",[1614,51.974]],["name/24-3",[]],["text/24-3",[]],["component/24-3",[]],["title/24-4",[239,34.913]],["name/24-4",[]],["text/24-4",[]],["component/24-4",[]],["title/24-5",[1615,51.974]],["name/24-5",[]],["text/24-5",[]],["component/24-5",[]],["title/24-6",[1616,51.974]],["name/24-6",[]],["text/24-6",[]],["component/24-6",[]],["title/24-7",[102,33.832]],["name/24-7",[]],["text/24-7",[]],["component/24-7",[]],["title/24-8",[1617,51.974]],["name/24-8",[]],["text/24-8",[]],["component/24-8",[]],["title/24-9",[1618,51.974]],["name/24-9",[]],["text/24-9",[]],["component/24-9",[]],["title/24-10",[1619,51.974]],["name/24-10",[]],["text/24-10",[]],["component/24-10",[]],["title/24-11",[1620,51.974]],["name/24-11",[]],["text/24-11",[]],["component/24-11",[]],["title/24-12",[682,47.974]],["name/24-12",[]],["text/24-12",[]],["component/24-12",[]],["title/24-13",[1621,51.974]],["name/24-13",[]],["text/24-13",[]],["component/24-13",[]],["title/24-14",[238,13.941,1058,28.203,1436,28.203]],["name/24-14",[]],["text/24-14",[]],["component/24-14",[]],["title/24-15",[239,21.888,389,19.483,634,21.888]],["name/24-15",[]],["text/24-15",[]],["component/24-15",[]],["title/24-16",[1622,47.974]],["name/24-16",[]],["text/24-16",[]],["component/24-16",[]],["title/24-17",[451,47.974]],["name/24-17",[]],["text/24-17",[]],["component/24-17",[]],["title/24-18",[1623,51.974]],["name/24-18",[]],["text/24-18",[]],["component/24-18",[]],["title/24-19",[15,13.941,238,13.941,657,21.21]],["name/24-19",[]],["text/24-19",[]],["component/24-19",[]],["title/24-20",[1316,47.974]],["name/24-20",[]],["text/24-20",[]],["component/24-20",[]],["title/24-21",[1624,51.974]],["name/24-21",[]],["text/24-21",[]],["component/24-21",[]],["title/24-22",[1625,51.974]],["name/24-22",[]],["text/24-22",[]],["component/24-22",[]],["title/24",[237,31.301,238,17.138]],["name/24",[1626,1.801]],["text/24",[3,0.267,4,0.333,7,0.471,14,2.192,15,3.425,17,2.023,28,0.521,36,1.229,37,2.369,47,3.539,51,1.008,54,1.356,56,0.805,60,2.469,62,0.486,63,0.422,74,0.486,76,0.471,77,0.486,79,0.827,83,1.492,84,0.542,90,0.827,102,1.811,110,2.083,117,0.542,123,0.384,135,1.887,158,0.486,162,0.521,163,1.869,167,0.851,169,0.904,175,1.887,182,0.486,184,1.634,185,2.728,197,1.103,199,0.503,201,0.486,205,0.411,208,5.1,216,5.141,221,2.782,226,4.073,227,0.566,228,1.492,229,0.935,237,2.466,238,1.944,239,1.869,242,2.144,245,1.839,254,0.566,260,0.521,287,0.521,301,0.457,304,1.103,326,0.851,344,1.311,347,1.641,350,0.876,365,0.422,382,1.641,389,1.887,407,1.587,413,1.229,448,1.008,451,2.913,452,0.827,457,0.593,485,1.641,518,0.668,567,0.724,569,0.626,595,0.626,609,2.513,610,1.547,611,0.566,631,0.626,632,1.768,633,0.969,634,0.486,641,0.668,645,0.935,657,1.229,679,0.668,682,2.18,741,1.008,742,1.243,814,0.668,817,0.503,825,0.969,839,0.668,852,0.566,904,1.399,939,0.668,1005,1.475,1013,0.668,1020,1.165,1030,2.782,1058,0.626,1074,0.668,1076,1.243,1078,0.626,1093,2.362,1120,5.918,1123,5.581,1158,1.346,1165,2.362,1167,0.668,1184,2.18,1216,0.668,1247,0.668,1270,4.113,1316,2.913,1317,0.626,1363,0.724,1438,1.547,1445,0.668,1457,1.887,1458,0.724,1466,2.362,1471,5.391,1474,0.724,1492,1.887,1497,0.724,1499,0.724,1526,1.887,1530,1.346,1547,2.362,1552,1.887,1568,2.567,1600,2.362,1609,0.724,1613,1.887,1614,0.724,1615,2.362,1616,2.782,1617,0.724,1618,0.724,1619,1.887,1620,1.887,1621,1.346,1622,2.18,1623,3.155,1624,2.782,1625,1.346,1627,0.808,1628,2.108,1629,4.236,1630,1.504,1631,0.808,1632,0.808,1633,1.504,1634,0.808,1635,0.808,1636,0.808,1637,0.808,1638,0.808,1639,0.808,1640,0.808,1641,0.808,1642,1.504,1643,0.808,1644,0.808,1645,0.808,1646,0.808,1647,1.504,1648,1.504,1649,0.808,1650,3.107,1651,1.504,1652,1.504,1653,0.808,1654,0.808,1655,0.808,1656,1.504,1657,0.808,1658,0.808,1659,0.808,1660,0.808,1661,0.808,1662,0.808,1663,0.808,1664,0.808,1665,3.524,1666,1.504,1667,1.504,1668,1.504,1669,1.504,1670,0.808,1671,0.808,1672,0.808,1673,0.808,1674,0.808,1675,0.808,1676,0.808,1677,0.808,1678,0.808,1679,0.808,1680,0.808,1681,0.808,1682,0.808,1683,0.808,1684,0.808,1685,0.808,1686,0.808,1687,0.808,1688,0.808,1689,2.108,1690,0.808,1691,0.808]],["component/24",[5,0.411,6,0.498]],["title/25-1",[722,22.767,864,25.31]],["name/25-1",[]],["text/25-1",[]],["component/25-1",[]],["title/25-2",[722,22.767,864,25.31]],["name/25-2",[]],["text/25-2",[]],["component/25-2",[]],["title/25-3",[59,20.589,806,18.986,1692,32.584]],["name/25-3",[]],["text/25-3",[]],["component/25-3",[]],["title/25-4",[5,8.226,136,14.577,886,17.768,899,18.544,1201,19.451]],["name/25-4",[]],["text/25-4",[]],["component/25-4",[]],["title/25-5",[722,18.52,864,20.589,1693,32.584]],["name/25-5",[]],["text/25-5",[]],["component/25-5",[]],["title/25-6",[886,24.396,899,25.463,1543,30.076]],["name/25-6",[]],["text/25-6",[]],["component/25-6",[]],["title/25-7",[52,34.67,864,25.31]],["name/25-7",[]],["text/25-7",[]],["component/25-7",[]],["title/25-8",[18,20.589,168,23.463,615,28.203]],["name/25-8",[]],["text/25-8",[]],["component/25-8",[]],["title/25-9",[234,47.974]],["name/25-9",[]],["text/25-9",[]],["component/25-9",[]],["title/25",[1694,47.974]],["name/25",[1694,1.488]],["text/25",[0,1.435,1,0.759,3,1.994,4,0.553,5,1.538,11,0.759,14,0.835,15,0.514,17,2.254,18,2.531,24,0.985,29,1.484,30,1.35,37,0.7,47,1.496,49,2.037,52,1.849,53,0.865,54,0.586,56,1.277,57,0.939,59,2.531,63,0.7,64,0.9,68,0.835,75,3.13,77,0.807,79,0.738,81,0.985,82,1.202,83,2.209,90,2.461,100,2.004,104,1.04,107,0.719,110,1.6,113,1.109,130,0.865,131,1.109,133,1.972,136,2.148,145,0.9,156,2.148,162,0.865,167,1.35,168,1.538,174,1.04,178,1.202,179,2.364,195,0.683,201,1.435,203,0.9,210,1.04,219,1.391,227,0.939,229,0.835,234,2.662,235,2.136,237,0.939,238,1.714,240,0.939,242,0.738,245,2.037,252,1.751,254,1.67,256,1.312,258,0.985,260,0.865,261,0.985,268,1.109,272,0.985,273,1.109,275,1.109,277,2.662,283,1.04,298,1.202,315,1.849,341,1.04,346,2.885,347,0.835,350,0.782,355,1.04,366,1.484,370,1.67,377,3.131,389,2.091,406,1.109,407,2.349,413,0.782,432,1.109,448,0.9,452,2.461,457,0.985,508,0.9,510,1.202,515,2.463,564,1.04,577,1.202,591,0.985,593,0.9,596,1.849,615,1.04,619,0.9,634,0.807,669,1.04,673,1.04,674,1.538,722,3.34,745,1.04,761,1.202,806,2.037,808,3.23,809,0.807,813,0.985,823,0.985,825,0.865,832,3.083,842,1.849,852,1.67,861,1.972,864,2.804,865,1.04,866,1.04,869,1.109,870,1.972,871,3.698,873,1.109,886,4.909,891,0.985,899,4.42,925,1.109,926,4.096,927,1.04,932,1.849,935,0.865,968,1.202,1034,1.849,1048,1.202,1079,0.985,1164,1.202,1182,0.985,1187,1.109,1199,1.202,1201,1.751,1270,1.04,1314,1.972,1323,1.202,1331,1.202,1353,2.884,1357,1.202,1366,1.202,1368,1.202,1369,1.202,1370,1.202,1378,1.202,1388,1.109,1415,1.202,1436,1.04,1469,1.202,1470,2.136,1500,1.202,1543,2.662,1556,1.202,1562,2.136,1568,1.109,1579,1.202,1581,2.136,1598,1.202,1602,1.202,1692,1.202,1693,2.136,1694,1.109,1695,1.342,1696,1.342,1697,1.342,1698,1.342,1699,2.386,1700,1.342,1701,1.342,1702,3.221,1703,2.386,1704,1.342,1705,2.386,1706,2.386,1707,1.342,1708,1.342,1709,2.386,1710,1.342,1711,1.342,1712,1.342,1713,1.342,1714,1.342,1715,1.342,1716,1.342,1717,1.342,1718,1.342,1719,2.386,1720,1.342,1721,1.342,1722,1.342,1723,1.342,1724,1.342,1725,1.342,1726,1.342,1727,2.386,1728,1.342,1729,1.342,1730,1.342,1731,1.342,1732,1.202,1733,1.342,1734,2.386,1735,1.342,1736,1.342,1737,1.342,1738,1.342,1739,1.342,1740,1.342,1741,1.342,1742,1.342,1743,1.342,1744,1.342,1745,1.342,1746,1.342,1747,1.342,1748,1.342,1749,1.342,1750,1.342,1751,1.342,1752,1.342,1753,1.342,1754,1.342,1755,1.342,1756,1.342]],["component/25",[5,0.411,6,0.498]],["title/26-1",[15,7.984,17,8.748,205,10.606,279,16.152,579,15.295,1435,18.661,1757,20.841]],["name/26-1",[]],["text/26-1",[]],["component/26-1",[]],["title/26-2",[280,27.462,404,23.769,515,15.239,1758,30.67]],["name/26-2",[]],["text/26-2",[]],["component/26-2",[]],["title/26-3",[15,11.749,33,25.348,365,16.001,1759,27.462]],["name/26-3",[]],["text/26-3",[]],["component/26-3",[]],["title/26-4",[122,22.634,1760,36.391,1761,32.584]],["name/26-4",[]],["text/26-4",[]],["component/26-4",[]],["title/26",[3,19.163]],["name/26",[3,0.594]],["text/26",[3,2.457,4,1.375,5,1.581,7,1.946,15,3.005,17,1.401,18,4.437,23,1.787,29,2.076,30,2.882,37,3.222,38,2.587,46,2.152,51,2.238,54,1.457,62,2.008,83,1.889,89,2.587,122,2.076,133,2.759,165,3.564,182,2.008,199,2.076,205,1.699,228,2.882,236,2.759,238,1.279,239,2.008,240,2.336,242,1.836,247,2.076,256,1.836,277,2.759,290,2.587,319,2.238,342,3.284,343,2.587,352,2.152,365,3.222,366,3.168,452,3.397,490,2.759,511,2.587,515,1.659,579,2.45,591,2.45,614,2.45,652,2.587,684,2.152,786,2.759,821,4.21,832,2.076,887,2.587,902,2.587,935,3.982,937,2.989,1050,2.759,1098,2.152,1196,2.759,1201,2.45,1314,2.759,1351,2.989,1387,4.561,1388,2.759,1398,2.989,1399,2.989,1404,4.21,1418,2.989,1424,2.989,1438,2.45,1456,2.759,1594,2.989,1622,2.759,1732,2.989,1759,2.989,1761,2.989,1762,3.338,1763,3.338,1764,3.338,1765,3.338,1766,3.338,1767,3.338,1768,3.338,1769,3.338,1770,3.338,1771,3.338,1772,3.338,1773,3.338,1774,3.338,1775,3.338,1776,3.338,1777,3.338]],["component/26",[5,0.411,6,0.498]]],"invertedIndex":[["",{"_index":47,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"9":{},"10":{},"11":{},"12":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["0",{"_index":632,"title":{},"name":{},"text":{"4":{},"12":{},"14":{},"16":{},"17":{},"21":{},"24":{}},"component":{}}],["1",{"_index":49,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"8":{},"10":{},"12":{},"14":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"25":{}},"component":{}}],["1.0",{"_index":1554,"title":{},"name":{},"text":{"21":{}},"component":{}}],["1.1.4",{"_index":1711,"title":{},"name":{},"text":{"25":{}},"component":{}}],["10",{"_index":1093,"title":{},"name":{},"text":{"12":{},"24":{}},"component":{}}],["10.0",{"_index":1522,"title":{},"name":{},"text":{"21":{}},"component":{}}],["100",{"_index":1158,"title":{},"name":{},"text":{"13":{},"24":{}},"component":{}}],["1000",{"_index":1256,"title":{},"name":{},"text":{"16":{}},"component":{}}],["100:th",{"_index":493,"title":{},"name":{},"text":{"3":{}},"component":{}}],["101",{"_index":497,"title":{},"name":{},"text":{"3":{}},"component":{}}],["102",{"_index":500,"title":{},"name":{},"text":{"3":{}},"component":{}}],["103",{"_index":503,"title":{},"name":{},"text":{"3":{}},"component":{}}],["11",{"_index":1064,"title":{},"name":{},"text":{"12":{}},"component":{}}],["110",{"_index":1673,"title":{},"name":{},"text":{"24":{}},"component":{}}],["114",{"_index":1073,"title":{},"name":{},"text":{"12":{}},"component":{}}],["117",{"_index":1063,"title":{},"name":{},"text":{"12":{}},"component":{}}],["120",{"_index":438,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{}},"component":{}}],["126",{"_index":1067,"title":{},"name":{},"text":{"12":{}},"component":{}}],["127",{"_index":988,"title":{},"name":{},"text":{"11":{},"17":{}},"component":{}}],["13",{"_index":530,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{}},"component":{}}],["13\").collect(toset",{"_index":1090,"title":{},"name":{},"text":{"12":{}},"component":{}}],["13','r','nc",{"_index":1251,"title":{},"name":{},"text":{"16":{},"19":{},"20":{}},"component":{}}],["130",{"_index":446,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["138",{"_index":1307,"title":{},"name":{},"text":{"17":{}},"component":{}}],["13=223",{"_index":548,"title":{},"name":{},"text":{"3":{}},"component":{}}],["13=8",{"_index":797,"title":{},"name":{},"text":{"4":{}},"component":{}}],["13=9",{"_index":790,"title":{},"name":{},"text":{"4":{}},"component":{}}],["147",{"_index":984,"title":{},"name":{},"text":{"11":{}},"component":{}}],["15",{"_index":461,"title":{},"name":{},"text":{"3":{}},"component":{}}],["153",{"_index":980,"title":{},"name":{},"text":{"11":{}},"component":{}}],["155",{"_index":1293,"title":{},"name":{},"text":{"17":{}},"component":{}}],["16",{"_index":1445,"title":{"21-21":{}},"name":{},"text":{"21":{},"24":{}},"component":{}}],["169",{"_index":996,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["17",{"_index":535,"title":{},"name":{},"text":{"3":{},"12":{},"16":{},"19":{},"20":{}},"component":{}}],["178",{"_index":538,"title":{},"name":{},"text":{"3":{}},"component":{}}],["17=210",{"_index":550,"title":{},"name":{},"text":{"3":{}},"component":{}}],["17=3",{"_index":803,"title":{},"name":{},"text":{"4":{}},"component":{}}],["17=6",{"_index":792,"title":{},"name":{},"text":{"4":{}},"component":{}}],["194",{"_index":539,"title":{},"name":{},"text":{"3":{}},"component":{}}],["195",{"_index":533,"title":{},"name":{},"text":{"3":{}},"component":{}}],["1_000_000_000_000l",{"_index":1517,"title":{},"name":{},"text":{"21":{}},"component":{}}],["2",{"_index":245,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"8":{},"10":{},"12":{},"14":{},"17":{},"18":{},"20":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["2.0",{"_index":1535,"title":{},"name":{},"text":{"21":{}},"component":{}}],["2.5",{"_index":1678,"title":{},"name":{},"text":{"24":{}},"component":{}}],["20",{"_index":636,"title":{},"name":{},"text":{"4":{}},"component":{}}],["200",{"_index":558,"title":{},"name":{},"text":{"3":{}},"component":{}}],["210",{"_index":536,"title":{},"name":{},"text":{"3":{}},"component":{}}],["2147483648",{"_index":1689,"title":{},"name":{},"text":{"24":{}},"component":{}}],["223",{"_index":531,"title":{},"name":{},"text":{"3":{},"12":{}},"component":{}}],["23",{"_index":1302,"title":{},"name":{},"text":{"17":{}},"component":{}}],["3",{"_index":389,"title":{"24-15":{}},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"10":{},"12":{},"17":{},"18":{},"20":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["3.0",{"_index":1539,"title":{},"name":{},"text":{"21":{}},"component":{}}],["3.0.0",{"_index":1705,"title":{},"name":{},"text":{"25":{}},"component":{}}],["3.10.1",{"_index":1370,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["3.2.0",{"_index":872,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["3.4.0",{"_index":1728,"title":{},"name":{},"text":{"25":{}},"component":{}}],["313",{"_index":1295,"title":{},"name":{},"text":{"17":{}},"component":{}}],["33",{"_index":979,"title":{},"name":{},"text":{"11":{}},"component":{}}],["35",{"_index":981,"title":{},"name":{},"text":{"11":{}},"component":{}}],["36",{"_index":985,"title":{},"name":{},"text":{"11":{}},"component":{}}],["4",{"_index":609,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"12":{},"20":{},"21":{},"23":{},"24":{}},"component":{}}],["4.0",{"_index":1537,"title":{},"name":{},"text":{"21":{}},"component":{}}],["457",{"_index":517,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["46",{"_index":464,"title":{},"name":{},"text":{"3":{}},"component":{}}],["469",{"_index":465,"title":{},"name":{},"text":{"3":{}},"component":{}}],["47",{"_index":480,"title":{},"name":{},"text":{"3":{}},"component":{}}],["48",{"_index":1062,"title":{},"name":{},"text":{"12":{}},"component":{}}],["5",{"_index":443,"title":{},"name":{},"text":{"3":{},"11":{},"12":{},"20":{},"21":{},"23":{}},"component":{}}],["5.0",{"_index":1540,"title":{},"name":{},"text":{"21":{}},"component":{}}],["50",{"_index":321,"title":{},"name":{},"text":{"2":{},"3":{},"12":{}},"component":{}}],["504",{"_index":471,"title":{},"name":{},"text":{"3":{}},"component":{}}],["505",{"_index":474,"title":{},"name":{},"text":{"3":{}},"component":{}}],["543",{"_index":651,"title":{},"name":{},"text":{"4":{}},"component":{}}],["5s",{"_index":526,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["6",{"_index":993,"title":{},"name":{},"text":{"11":{},"12":{},"20":{}},"component":{}}],["6.5",{"_index":1524,"title":{},"name":{},"text":{"21":{}},"component":{}}],["6.6",{"_index":1523,"title":{},"name":{},"text":{"21":{}},"component":{}}],["6.7",{"_index":1525,"title":{},"name":{},"text":{"21":{}},"component":{}}],["60",{"_index":1069,"title":{},"name":{},"text":{"12":{}},"component":{}}],["62",{"_index":998,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["65",{"_index":1514,"title":{},"name":{},"text":{"21":{}},"component":{}}],["65000000000000",{"_index":1519,"title":{},"name":{},"text":{"21":{}},"component":{}}],["66",{"_index":1513,"title":{},"name":{},"text":{"21":{}},"component":{}}],["66000000000000",{"_index":1518,"title":{},"name":{},"text":{"21":{}},"component":{}}],["67",{"_index":1515,"title":{},"name":{},"text":{"21":{}},"component":{}}],["67000000000000",{"_index":1520,"title":{},"name":{},"text":{"21":{}},"component":{}}],["7",{"_index":997,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["730",{"_index":468,"title":{},"name":{},"text":{"3":{}},"component":{}}],["784",{"_index":477,"title":{},"name":{},"text":{"3":{}},"component":{}}],["8",{"_index":851,"title":{},"name":{},"text":{"7":{},"8":{},"12":{},"18":{},"23":{}},"component":{}}],["86",{"_index":1061,"title":{},"name":{},"text":{"12":{}},"component":{}}],["869",{"_index":481,"title":{},"name":{},"text":{"3":{}},"component":{}}],["9",{"_index":785,"title":{},"name":{},"text":{"4":{},"12":{},"17":{}},"component":{}}],["a.getfilms().stream",{"_index":778,"title":{},"name":{},"text":{"4":{}},"component":{}}],["a=1",{"_index":1643,"title":{},"name":{},"text":{"24":{}},"component":{}}],["abil",{"_index":929,"title":{},"name":{},"text":{"10":{}},"component":{}}],["abov",{"_index":109,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"11":{},"12":{},"14":{},"17":{},"18":{},"23":{}},"component":{}}],["abstract",{"_index":1580,"title":{},"name":{},"text":{"23":{}},"component":{}}],["ac",{"_index":387,"title":{},"name":{},"text":{"3":{},"12":{},"14":{},"17":{}},"component":{}}],["academi",{"_index":385,"title":{},"name":{},"text":{"3":{},"12":{},"14":{},"17":{}},"component":{}}],["accept",{"_index":304,"title":{},"name":{},"text":{"2":{},"3":{},"21":{},"23":{},"24":{}},"component":{}}],["access",{"_index":32,"title":{"5-4":{},"9-4":{}},"name":{},"text":{"2":{},"3":{},"5":{},"9":{},"10":{},"18":{}},"component":{}}],["accomplish",{"_index":1328,"title":{},"name":{},"text":{"18":{}},"component":{}}],["accord",{"_index":783,"title":{},"name":{},"text":{"4":{},"12":{},"21":{}},"component":{}}],["accustom",{"_index":353,"title":{},"name":{},"text":{"3":{}},"component":{}}],["achiev",{"_index":989,"title":{},"name":{},"text":{"11":{},"14":{}},"component":{}}],["act",{"_index":846,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["action",{"_index":1568,"title":{},"name":{},"text":{"22":{},"24":{},"25":{}},"component":{}}],["actor",{"_index":403,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["actor::getfilm",{"_index":757,"title":{},"name":{},"text":{"4":{}},"component":{}}],["actor_id",{"_index":702,"title":{},"name":{},"text":{"4":{}},"component":{}}],["actorid",{"_index":713,"title":{},"name":{},"text":{"4":{}},"component":{}}],["actual",{"_index":595,"title":{},"name":{},"text":{"3":{},"20":{},"21":{},"24":{}},"component":{}}],["ad",{"_index":825,"title":{},"name":{},"text":{"5":{},"9":{},"18":{},"19":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["adam",{"_index":1588,"title":{},"name":{},"text":{"23":{}},"component":{}}],["adapt",{"_index":390,"title":{},"name":{},"text":{"3":{},"12":{},"17":{}},"component":{}}],["add",{"_index":227,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"18":{},"24":{},"25":{}},"component":{}}],["addit",{"_index":76,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"12":{},"15":{},"17":{},"18":{},"19":{},"21":{},"23":{},"24":{}},"component":{}}],["addition",{"_index":1467,"title":{},"name":{},"text":{"21":{}},"component":{}}],["address",{"_index":1699,"title":{},"name":{},"text":{"25":{}},"component":{}}],["adher",{"_index":1366,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["adult",{"_index":1049,"title":{},"name":{},"text":{"12":{},"20":{}},"component":{}}],["advanc",{"_index":780,"title":{},"name":{},"text":{"4":{}},"component":{}}],["affair",{"_index":1054,"title":{},"name":{},"text":{"12":{}},"component":{}}],["afilmb",{"_index":1377,"title":{},"name":{},"text":{"18":{}},"component":{}}],["afoo.class",{"_index":1364,"title":{},"name":{},"text":{"18":{}},"component":{}}],["african",{"_index":444,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["again",{"_index":1596,"title":{},"name":{},"text":{"23":{}},"component":{}}],["agent",{"_index":994,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["aggreg",{"_index":1741,"title":{},"name":{},"text":{"25":{}},"component":{}}],["ahead",{"_index":1330,"title":{},"name":{},"text":{"18":{}},"component":{}}],["airplan",{"_index":751,"title":{},"name":{},"text":{"4":{},"11":{},"12":{}},"component":{}}],["airport",{"_index":1056,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ajpastreamerpackage=com.speedment.jpastreamer.test",{"_index":1371,"title":{},"name":{},"text":{"18":{}},"component":{}}],["ajpastreamerprefix=a",{"_index":1372,"title":{},"name":{},"text":{"18":{}},"component":{}}],["ajpastreamersuffix=b",{"_index":1373,"title":{},"name":{},"text":{"18":{}},"component":{}}],["ala",{"_index":1289,"title":{},"name":{},"text":{"17":{}},"component":{}}],["alabama",{"_index":1071,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{}}],["alamo",{"_index":1065,"title":{},"name":{},"text":{"12":{}},"component":{}}],["alien",{"_index":462,"title":{},"name":{},"text":{"3":{}},"component":{}}],["allig",{"_index":1175,"title":{},"name":{},"text":{"14":{}},"component":{}}],["allmatch",{"_index":1632,"title":{},"name":{},"text":{"24":{}},"component":{}}],["allow",{"_index":290,"title":{},"name":{},"text":{"2":{},"21":{},"23":{},"26":{}},"component":{}}],["along",{"_index":1731,"title":{},"name":{},"text":{"25":{}},"component":{}}],["alreadi",{"_index":58,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"12":{},"13":{},"14":{}},"component":{}}],["alter",{"_index":746,"title":{},"name":{},"text":{"4":{}},"component":{}}],["although",{"_index":652,"title":{},"name":{},"text":{"4":{},"10":{},"23":{},"26":{}},"component":{}}],["alway",{"_index":1013,"title":{},"name":{},"text":{"12":{},"14":{},"24":{}},"component":{}}],["am=2",{"_index":1646,"title":{},"name":{},"text":{"24":{}},"component":{}}],["america",{"_index":1041,"title":{},"name":{},"text":{"12":{}},"component":{}}],["anaconda",{"_index":1303,"title":{},"name":{},"text":{"17":{}},"component":{}}],["and/or",{"_index":143,"title":{},"name":{},"text":{"2":{},"12":{}},"component":{}}],["anim",{"_index":1177,"title":{},"name":{},"text":{"14":{}},"component":{}}],["annot",{"_index":886,"title":{"10-1":{},"25-4":{},"25-6":{}},"name":{},"text":{"9":{},"10":{},"18":{},"25":{}},"component":{}}],["annotationprocessor",{"_index":855,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["anonym",{"_index":1183,"title":{},"name":{},"text":{"14":{}},"component":{}}],["anoth",{"_index":274,"title":{},"name":{},"text":{"2":{},"11":{},"12":{}},"component":{}}],["answer",{"_index":1754,"title":{},"name":{},"text":{"25":{}},"component":{}}],["ant",{"_index":1174,"title":{},"name":{},"text":{"14":{}},"component":{}}],["anthem",{"_index":431,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["anymatch",{"_index":1617,"title":{"24-8":{}},"name":{},"text":{"24":{}},"component":{}}],["anymatch(\"a\"::equ",{"_index":1654,"title":{},"name":{},"text":{"24":{}},"component":{}}],["anymatch(\"z\"::equ",{"_index":1655,"title":{},"name":{},"text":{"24":{}},"component":{}}],["anywher",{"_index":398,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ap",{"_index":1172,"title":{},"name":{},"text":{"14":{}},"component":{}}],["api",{"_index":366,"title":{},"name":{},"text":{"3":{},"5":{},"7":{},"8":{},"10":{},"18":{},"19":{},"25":{},"26":{}},"component":{}}],["apollo",{"_index":749,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{}}],["app_configur",{"_index":2,"title":{},"name":{"1":{}},"text":{},"component":{}}],["appar",{"_index":973,"title":{},"name":{},"text":{"11":{}},"component":{}}],["appear",{"_index":209,"title":{},"name":{},"text":{"2":{},"21":{}},"component":{}}],["append",{"_index":1363,"title":{},"name":{},"text":{"18":{},"24":{}},"component":{}}],["appli",{"_index":407,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"14":{},"17":{},"18":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["applic",{"_index":0,"title":{"1":{},"19-2":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"10":{},"19":{},"21":{},"25":{}},"component":{}}],["applicationscop",{"_index":155,"title":{},"name":{},"text":{"2":{},"5":{}},"component":{}}],["approach",{"_index":40,"title":{},"name":{},"text":{"2":{}},"component":{}}],["arachnophobia",{"_index":982,"title":{},"name":{},"text":{"11":{}},"component":{}}],["arbitrari",{"_index":1606,"title":{},"name":{},"text":{"23":{}},"component":{}}],["arg",{"_index":98,"title":{},"name":{},"text":{"2":{}},"component":{}}],["argonaut",{"_index":986,"title":{},"name":{},"text":{"11":{}},"component":{}}],["argument",{"_index":1166,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["aris",{"_index":1700,"title":{},"name":{},"text":{"25":{}},"component":{}}],["around",{"_index":1595,"title":{},"name":{},"text":{"23":{}},"component":{}}],["array",{"_index":1030,"title":{},"name":{},"text":{"12":{},"24":{}},"component":{}}],["arraylist",{"_index":715,"title":{},"name":{},"text":{"4":{}},"component":{}}],["arrays.aslist(\"b",{"_index":1483,"title":{},"name":{},"text":{"21":{}},"component":{}}],["arrays.aslist(\"c",{"_index":1484,"title":{},"name":{},"text":{"21":{}},"component":{}}],["artist",{"_index":766,"title":{},"name":{},"text":{"4":{}},"component":{}}],["asc",{"_index":967,"title":{},"name":{},"text":{"10":{}},"component":{}}],["asdoublestream",{"_index":1451,"title":{"21-29":{}},"name":{},"text":{"21":{}},"component":{}}],["ask",{"_index":1602,"title":{},"name":{},"text":{"23":{},"25":{}},"component":{}}],["aslongstream",{"_index":1450,"title":{"21-28":{}},"name":{},"text":{"21":{}},"component":{}}],["aspect",{"_index":295,"title":{},"name":{},"text":{"2":{}},"component":{}}],["aspir",{"_index":1765,"title":{},"name":{},"text":{"26":{}},"component":{}}],["assign",{"_index":658,"title":{},"name":{},"text":{"4":{}},"component":{}}],["assist",{"_index":1418,"title":{},"name":{},"text":{"20":{},"26":{}},"component":{}}],["associ",{"_index":196,"title":{},"name":{},"text":{"2":{},"10":{},"12":{}},"component":{}}],["assum",{"_index":57,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"12":{},"18":{},"25":{}},"component":{}}],["attribut",{"_index":1197,"title":{},"name":{},"text":{"14":{}},"component":{}}],["audienc",{"_index":1043,"title":{},"name":{},"text":{"12":{}},"component":{}}],["auto",{"_index":1228,"title":{},"name":{},"text":{"15":{}},"component":{}}],["autoconfigur",{"_index":875,"title":{"9-1":{}},"name":{},"text":{"9":{}},"component":{}}],["autoconfigure:vers",{"_index":883,"title":{},"name":{},"text":{"9":{}},"component":{}}],["automat",{"_index":260,"title":{},"name":{},"text":{"2":{},"10":{},"15":{},"18":{},"19":{},"23":{},"24":{},"25":{}},"component":{}}],["autowir",{"_index":898,"title":{},"name":{},"text":{"9":{}},"component":{}}],["avail",{"_index":201,"title":{},"name":{},"text":{"2":{},"9":{},"12":{},"15":{},"16":{},"17":{},"19":{},"21":{},"24":{},"25":{}},"component":{}}],["averag",{"_index":1624,"title":{"24-21":{}},"name":{},"text":{"24":{}},"component":{}}],["average=0.000000",{"_index":1688,"title":{},"name":{},"text":{"24":{}},"component":{}}],["average=2.500000",{"_index":1683,"title":{},"name":{},"text":{"24":{}},"component":{}}],["avoid",{"_index":404,"title":{"26-2":{}},"name":{},"text":{"3":{},"4":{},"15":{}},"component":{}}],["awar",{"_index":1333,"title":{},"name":{},"text":{"18":{}},"component":{}}],["b",{"_index":1120,"title":{},"name":{},"text":{"13":{},"18":{},"21":{},"22":{},"24":{}},"component":{}}],["b\".compareto(",{"_index":1564,"title":{},"name":{},"text":{"21":{}},"component":{}}],["b=3",{"_index":663,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bacb",{"_index":1492,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["back",{"_index":1159,"title":{},"name":{},"text":{"13":{}},"component":{}}],["background",{"_index":453,"title":{},"name":{},"text":{"3":{}},"component":{}}],["backport",{"_index":1714,"title":{},"name":{},"text":{"25":{}},"component":{}}],["base",{"_index":166,"title":{},"name":{},"text":{"2":{},"3":{},"9":{}},"component":{}}],["basic",{"_index":26,"title":{},"name":{},"text":{"2":{}},"component":{}}],["be",{"_index":596,"title":{},"name":{},"text":{"3":{},"5":{},"9":{},"25":{}},"component":{}}],["bean",{"_index":844,"title":{},"name":{},"text":{"5":{},"9":{},"10":{},"18":{}},"component":{}}],["beans.th",{"_index":687,"title":{},"name":{},"text":{"4":{}},"component":{}}],["becom",{"_index":1099,"title":{},"name":{},"text":{"13":{},"19":{}},"component":{}}],["befor",{"_index":85,"title":{},"name":{},"text":{"2":{},"3":{},"23":{}},"component":{}}],["begin",{"_index":1167,"title":{"19-3":{}},"name":{},"text":{"14":{},"24":{}},"component":{}}],["behavior",{"_index":300,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["belong",{"_index":921,"title":{},"name":{},"text":{"10":{}},"component":{}}],["below",{"_index":63,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"24":{},"25":{}},"component":{}}],["benefit",{"_index":1771,"title":{},"name":{},"text":{"26":{}},"component":{}}],["better",{"_index":1004,"title":{},"name":{},"text":{"11":{},"21":{}},"component":{}}],["between",{"_index":181,"title":{"12-7":{}},"name":{},"text":{"2":{},"3":{},"4":{},"12":{}},"component":{}}],["between(",{"_index":1116,"title":{},"name":{},"text":{"13":{}},"component":{}}],["biconsum",{"_index":1547,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["bifunct",{"_index":1666,"title":{},"name":{},"text":{"24":{}},"component":{}}],["biggest",{"_index":1631,"title":{},"name":{},"text":{"24":{}},"component":{}}],["binaryoper",{"_index":1665,"title":{},"name":{},"text":{"24":{}},"component":{}}],["bird",{"_index":1173,"title":{},"name":{},"text":{"14":{}},"component":{}}],["bit",{"_index":1662,"title":{},"name":{},"text":{"24":{}},"component":{}}],["blanket",{"_index":499,"title":{},"name":{},"text":{"3":{}},"component":{}}],["block",{"_index":259,"title":{},"name":{},"text":{"2":{}},"component":{}}],["blog",{"_index":313,"title":{},"name":{},"text":{"2":{}},"component":{}}],["bo",{"_index":1586,"title":{},"name":{},"text":{"23":{}},"component":{}}],["bolger",{"_index":789,"title":{},"name":{},"text":{"4":{}},"component":{}}],["bool",{"_index":1214,"title":{},"name":{},"text":{"14":{}},"component":{}}],["boolean",{"_index":659,"title":{},"name":{},"text":{"4":{},"10":{},"14":{},"15":{}},"component":{}}],["booleanfield",{"_index":1215,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["booleanpred",{"_index":1243,"title":{},"name":{},"text":{"15":{}},"component":{}}],["boot",{"_index":879,"title":{},"name":{},"text":{"9":{}},"component":{}}],["both",{"_index":92,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"16":{},"18":{}},"component":{}}],["box",{"_index":1227,"title":{"21-27":{}},"name":{},"text":{"15":{},"21":{}},"component":{}}],["bring",{"_index":318,"title":{},"name":{},"text":{"2":{}},"component":{}}],["brodi",{"_index":796,"title":{},"name":{},"text":{"4":{}},"component":{}}],["brotherhood",{"_index":498,"title":{},"name":{},"text":{"3":{}},"component":{}}],["bubbl",{"_index":501,"title":{},"name":{},"text":{"3":{}},"component":{}}],["bucket",{"_index":504,"title":{},"name":{},"text":{"3":{}},"component":{}}],["bug",{"_index":1735,"title":{},"name":{},"text":{"25":{}},"component":{}}],["build",{"_index":100,"title":{"18-4":{}},"name":{},"text":{"2":{},"5":{},"8":{},"9":{},"18":{},"19":{},"23":{},"25":{}},"component":{}}],["build.gradl",{"_index":829,"title":{},"name":{},"text":{"5":{},"7":{},"9":{},"18":{}},"component":{}}],["builder",{"_index":1435,"title":{"26-1":{}},"name":{},"text":{"20":{}},"component":{}}],["built",{"_index":814,"title":{},"name":{},"text":{"5":{},"9":{},"24":{}},"component":{}}],["byte",{"_index":1207,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["byteequalpred",{"_index":1231,"title":{},"name":{},"text":{"15":{}},"component":{}}],["bytefield",{"_index":1208,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["bytegreaterthanpred",{"_index":1232,"title":{},"name":{},"text":{"15":{}},"component":{}}],["c",{"_index":1123,"title":{},"name":{},"text":{"13":{},"21":{},"22":{},"24":{}},"component":{}}],["c).negat",{"_index":1121,"title":{},"name":{},"text":{"13":{}},"component":{}}],["cach",{"_index":271,"title":{},"name":{},"text":{"2":{}},"component":{}}],["calcul",{"_index":516,"title":{},"name":{},"text":{"3":{}},"component":{}}],["calendar",{"_index":1221,"title":{},"name":{},"text":{"14":{}},"component":{}}],["call",{"_index":117,"title":{},"name":{},"text":{"2":{},"3":{},"13":{},"18":{},"20":{},"23":{},"24":{}},"component":{}}],["cameron",{"_index":800,"title":{},"name":{},"text":{"4":{}},"component":{}}],["capabl",{"_index":1542,"title":{},"name":{},"text":{"21":{}},"component":{}}],["captur",{"_index":1555,"title":{},"name":{},"text":{"21":{}},"component":{}}],["carefulli",{"_index":334,"title":{},"name":{},"text":{"2":{},"23":{}},"component":{}}],["cascadetype.al",{"_index":696,"title":{},"name":{},"text":{"4":{}},"component":{}}],["case",{"_index":68,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"11":{},"17":{},"19":{},"21":{},"23":{},"25":{}},"component":{}}],["cat",{"_index":1305,"title":{},"name":{},"text":{"17":{}},"component":{}}],["catch(except",{"_index":1433,"title":{},"name":{},"text":{"20":{}},"component":{}}],["categori",{"_index":557,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["caution",{"_index":1047,"title":{},"name":{},"text":{"12":{},"18":{}},"component":{}}],["cbba",{"_index":1635,"title":{},"name":{},"text":{"24":{}},"component":{}}],["cdi",{"_index":807,"title":{"5":{},"5-1":{}},"name":{},"text":{"5":{}},"component":{}}],["cdi_integr",{"_index":811,"title":{},"name":{"5":{}},"text":{},"component":{}}],["cdi’",{"_index":835,"title":{},"name":{},"text":{"5":{}},"component":{}}],["center",{"_index":463,"title":{},"name":{},"text":{"3":{}},"component":{}}],["central",{"_index":1163,"title":{},"name":{},"text":{"14":{}},"component":{}}],["certain",{"_index":433,"title":{},"name":{},"text":{"3":{}},"component":{}}],["chain",{"_index":305,"title":{},"name":{},"text":{"2":{}},"component":{}}],["chang",{"_index":273,"title":{},"name":{},"text":{"2":{},"18":{},"25":{}},"component":{}}],["chapter",{"_index":42,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"14":{},"19":{},"23":{}},"component":{}}],["char",{"_index":1211,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["charact",{"_index":1216,"title":{},"name":{},"text":{"14":{},"23":{},"24":{}},"component":{}}],["charequalpred",{"_index":1241,"title":{},"name":{},"text":{"15":{}},"component":{}}],["charfield",{"_index":1212,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["chargreatersthanpred",{"_index":1242,"title":{},"name":{},"text":{"15":{}},"component":{}}],["chariot",{"_index":1308,"title":{},"name":{},"text":{"17":{}},"component":{}}],["chase",{"_index":765,"title":{},"name":{},"text":{"4":{}},"component":{}}],["chat",{"_index":1410,"title":{},"name":{},"text":{"19":{}},"component":{}}],["check",{"_index":927,"title":{},"name":{},"text":{"10":{},"18":{},"23":{},"25":{}},"component":{}}],["chisum",{"_index":774,"title":{},"name":{},"text":{"4":{}},"component":{}}],["choos",{"_index":1401,"title":{},"name":{},"text":{"19":{}},"component":{}}],["chose",{"_index":1724,"title":{},"name":{},"text":{"25":{}},"component":{}}],["chosen",{"_index":297,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["circuit",{"_index":970,"title":{},"name":{},"text":{"11":{}},"component":{}}],["claim",{"_index":1736,"title":{},"name":{},"text":{"25":{}},"component":{}}],["class",{"_index":156,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"10":{},"12":{},"14":{},"16":{},"18":{},"19":{},"20":{},"25":{}},"component":{}}],["classic",{"_index":357,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["classif",{"_index":543,"title":{},"name":{},"text":{"3":{}},"component":{}}],["classifi",{"_index":547,"title":{},"name":{},"text":{"3":{},"4":{},"22":{}},"component":{}}],["claus",{"_index":671,"title":{},"name":{},"text":{"4":{}},"component":{}}],["clean",{"_index":1717,"title":{},"name":{},"text":{"25":{}},"component":{}}],["clear",{"_index":127,"title":{},"name":{},"text":{"2":{}},"component":{}}],["cleopatra",{"_index":1294,"title":{},"name":{},"text":{"17":{}},"component":{}}],["click",{"_index":1730,"title":{},"name":{},"text":{"25":{}},"component":{}}],["close",{"_index":119,"title":{"22-2":{}},"name":{},"text":{"2":{},"18":{},"21":{},"22":{}},"component":{}}],["closer",{"_index":911,"title":{},"name":{},"text":{"10":{}},"component":{}}],["code",{"_index":515,"title":{"18-7":{},"26-2":{}},"name":{},"text":{"3":{},"7":{},"8":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"25":{},"26":{}},"component":{}}],["codebas",{"_index":1761,"title":{"26-4":{}},"name":{},"text":{"26":{}},"component":{}}],["coldblood",{"_index":767,"title":{},"name":{},"text":{"4":{}},"component":{}}],["collect",{"_index":239,"title":{"24-4":{},"24-15":{}},"name":{},"text":{"2":{},"3":{},"4":{},"12":{},"18":{},"23":{},"24":{},"26":{}},"component":{}}],["collect(collectors.tolist",{"_index":457,"title":{},"name":{},"text":{"3":{},"4":{},"23":{},"24":{},"25":{}},"component":{}}],["collect(collectors.tomap",{"_index":1641,"title":{},"name":{},"text":{"24":{}},"component":{}}],["collect(collectors.toset",{"_index":567,"title":{},"name":{},"text":{"3":{},"24":{}},"component":{}}],["collect(collectors::tolist",{"_index":330,"title":{},"name":{},"text":{"2":{}},"component":{}}],["collect(groupingbi",{"_index":371,"title":{},"name":{},"text":{"3":{}},"component":{}}],["collect(tolist",{"_index":244,"title":{},"name":{},"text":{"2":{}},"component":{}}],["collect(tomap",{"_index":728,"title":{},"name":{},"text":{"4":{}},"component":{}}],["collector",{"_index":518,"title":{},"name":{},"text":{"3":{},"4":{},"24":{}},"component":{}}],["collectors.count",{"_index":545,"title":{},"name":{},"text":{"3":{}},"component":{}}],["collectors.flatmap",{"_index":784,"title":{},"name":{},"text":{"4":{}},"component":{}}],["collectors.flatmapping(a",{"_index":777,"title":{},"name":{},"text":{"4":{}},"component":{}}],["collectors.groupingbi",{"_index":521,"title":{},"name":{},"text":{"3":{}},"component":{}}],["collectors.partitioningby(film$.length.greaterthan(120",{"_index":648,"title":{},"name":{},"text":{"4":{}},"component":{}}],["collectors.tomap(function.ident",{"_index":738,"title":{},"name":{},"text":{"4":{}},"component":{}}],["column",{"_index":220,"title":{"4-6":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{}},"component":{}}],["column(nam",{"_index":378,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"16":{},"18":{},"19":{},"20":{}},"component":{}}],["columndefinit",{"_index":380,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"16":{},"18":{},"19":{},"20":{}},"component":{}}],["com.foo.film.class",{"_index":1354,"title":{},"name":{},"text":{"18":{}},"component":{}}],["com.package.a",{"_index":894,"title":{},"name":{},"text":{"9":{}},"component":{}}],["com.package.b",{"_index":895,"title":{},"name":{},"text":{"9":{}},"component":{}}],["com.speedment.jpastream",{"_index":867,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["com.speedment.jpastreamer.integration.cdi",{"_index":828,"title":{},"name":{},"text":{"5":{}},"component":{}}],["com.speedment.jpastreamer.integration.cdi:cdi",{"_index":833,"title":{},"name":{},"text":{"5":{}},"component":{}}],["com.speedment.jpastreamer.integration.spr",{"_index":881,"title":{},"name":{},"text":{"9":{}},"component":{}}],["com.speedment.jpastreamer.integration.spring:spr",{"_index":882,"title":{},"name":{},"text":{"9":{}},"component":{}}],["com.speedment.jpastreamer.streamconfiguration.streamconfigur",{"_index":718,"title":{},"name":{},"text":{"4":{}},"component":{}}],["com.speedment.jpastreamer.test",{"_index":1374,"title":{},"name":{},"text":{"18":{}},"component":{}}],["com.speedment.jpastreamer:fieldgener",{"_index":856,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["com.speedment.jpastreamer:jpastream",{"_index":853,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["combin",{"_index":347,"title":{"11":{},"3-8":{}},"name":{"11":{}},"text":{"4":{},"11":{},"14":{},"19":{},"24":{},"25":{}},"component":{}}],["come",{"_index":288,"title":{},"name":{},"text":{"2":{},"5":{},"9":{}},"component":{}}],["comfort",{"_index":1574,"title":{},"name":{},"text":{"23":{}},"component":{}}],["comma",{"_index":892,"title":{},"name":{},"text":{"9":{}},"component":{}}],["command",{"_index":1351,"title":{},"name":{},"text":{"18":{},"26":{}},"component":{}}],["common",{"_index":1436,"title":{"21-1":{},"24-1":{},"24-14":{}},"name":{},"text":{"25":{}},"component":{}}],["commonli",{"_index":1663,"title":{},"name":{},"text":{"24":{}},"component":{}}],["compar",{"_index":485,"title":{"12":{},"13-2":{}},"name":{"12":{}},"text":{"3":{},"4":{},"12":{},"14":{},"21":{},"24":{}},"component":{}}],["comparablefield",{"_index":915,"title":{},"name":{},"text":{"10":{},"12":{},"14":{}},"component":{}}],["comparablefield.cr",{"_index":916,"title":{},"name":{},"text":{"10":{}},"component":{}}],["compareto",{"_index":1462,"title":{},"name":{},"text":{"21":{}},"component":{}}],["compat",{"_index":1201,"title":{"25-4":{}},"name":{},"text":{"14":{},"19":{},"25":{},"26":{}},"component":{}}],["compil",{"_index":832,"title":{},"name":{},"text":{"5":{},"7":{},"8":{},"9":{},"10":{},"18":{},"19":{},"25":{},"26":{}},"component":{}}],["complet",{"_index":1368,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["complex",{"_index":280,"title":{"26-2":{}},"name":{},"text":{"2":{}},"component":{}}],["complic",{"_index":1737,"title":{},"name":{},"text":{"25":{}},"component":{}}],["compon",{"_index":887,"title":{},"name":{},"text":{"9":{},"10":{},"19":{},"26":{}},"component":{}}],["compos",{"_index":484,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"23":{}},"component":{}}],["composit",{"_index":999,"title":{},"name":{},"text":{"11":{}},"component":{}}],["compromis",{"_index":969,"title":{},"name":{},"text":{"10":{}},"component":{}}],["comput",{"_index":626,"title":{},"name":{},"text":{"4":{}},"component":{}}],["con",{"_index":1300,"title":{},"name":{},"text":{"17":{}},"component":{}}],["concat(s0",{"_index":372,"title":{},"name":{},"text":{"3":{}},"component":{}}],["concaten",{"_index":1000,"title":{},"name":{},"text":{"11":{}},"component":{}}],["concept",{"_index":1162,"title":{},"name":{},"text":{"14":{},"19":{},"23":{}},"component":{}}],["concern",{"_index":1753,"title":{},"name":{},"text":{"25":{}},"component":{}}],["condit",{"_index":1015,"title":{},"name":{},"text":{"12":{},"16":{},"17":{},"21":{}},"component":{}}],["conehead",{"_index":1306,"title":{},"name":{},"text":{"17":{}},"component":{}}],["confess",{"_index":1304,"title":{},"name":{},"text":{"17":{}},"component":{}}],["configur",{"_index":1,"title":{"1":{},"4-4":{}},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"7":{},"8":{},"10":{},"18":{},"19":{},"25":{}},"component":{}}],["conjuct",{"_index":1180,"title":{},"name":{},"text":{"14":{}},"component":{}}],["conjunct",{"_index":1740,"title":{},"name":{},"text":{"25":{}},"component":{}}],["connect",{"_index":73,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["consequ",{"_index":340,"title":{},"name":{},"text":{"2":{}},"component":{}}],["consid",{"_index":174,"title":{},"name":{},"text":{"2":{},"3":{},"23":{},"25":{}},"component":{}}],["consist",{"_index":571,"title":{},"name":{},"text":{"3":{},"10":{},"19":{},"21":{},"23":{}},"component":{}}],["conspiraci",{"_index":1309,"title":{},"name":{},"text":{"17":{}},"component":{}}],["constant",{"_index":1082,"title":{},"name":{},"text":{"12":{}},"component":{}}],["constantli",{"_index":1725,"title":{},"name":{},"text":{"25":{}},"component":{}}],["constraint",{"_index":1749,"title":{},"name":{},"text":{"25":{}},"component":{}}],["construct",{"_index":343,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"26":{}},"component":{}}],["constructor",{"_index":839,"title":{},"name":{},"text":{"5":{},"9":{},"24":{}},"component":{}}],["consum",{"_index":1466,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["contain",{"_index":60,"title":{"17-14":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"12":{},"14":{},"17":{},"18":{},"21":{},"24":{}},"component":{}}],["contains(p",{"_index":1149,"title":{},"name":{},"text":{"13":{}},"component":{}}],["contains(p).neg",{"_index":1146,"title":{},"name":{},"text":{"13":{}},"component":{}}],["containsignorecas",{"_index":1267,"title":{"17-16":{}},"name":{},"text":{"17":{}},"component":{}}],["containsignorecase(p",{"_index":1153,"title":{},"name":{},"text":{"13":{}},"component":{}}],["containsignorecase(p).neg",{"_index":1150,"title":{},"name":{},"text":{"13":{}},"component":{}}],["content",{"_index":460,"title":{},"name":{},"text":{"3":{},"21":{},"23":{}},"component":{}}],["content.for",{"_index":1627,"title":{},"name":{},"text":{"24":{}},"component":{}}],["context",{"_index":141,"title":{},"name":{},"text":{"2":{}},"component":{}}],["conting",{"_index":1546,"title":{},"name":{},"text":{"21":{}},"component":{}}],["control",{"_index":292,"title":{},"name":{},"text":{"2":{},"3":{},"21":{}},"component":{}}],["conveni",{"_index":187,"title":{},"name":{},"text":{"2":{}},"component":{}}],["convent",{"_index":363,"title":{},"name":{},"text":{"3":{},"18":{}},"component":{}}],["convert",{"_index":1475,"title":{},"name":{},"text":{"21":{}},"component":{}}],["convey",{"_index":1326,"title":{},"name":{},"text":{"18":{}},"component":{}}],["core",{"_index":868,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["core:vers",{"_index":854,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["correct",{"_index":686,"title":{},"name":{},"text":{"4":{}},"component":{}}],["correspond",{"_index":361,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"12":{},"13":{},"15":{},"16":{},"17":{},"18":{},"21":{}},"component":{}}],["count",{"_index":102,"title":{"3-9":{},"24-7":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"12":{},"16":{},"17":{},"21":{},"24":{}},"component":{}}],["cover",{"_index":824,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["creat",{"_index":14,"title":{"2-5":{}},"name":{},"text":{"2":{},"3":{},"4":{},"14":{},"19":{},"23":{},"24":{},"25":{}},"component":{}}],["createstreamsuppli",{"_index":16,"title":{"2-7":{}},"name":{},"text":{"2":{}},"component":{}}],["creation",{"_index":231,"title":{},"name":{},"text":{"2":{}},"component":{}}],["criteria",{"_index":235,"title":{},"name":{},"text":{"2":{},"25":{}},"component":{}}],["current",{"_index":591,"title":{},"name":{},"text":{"3":{},"4":{},"20":{},"25":{},"26":{}},"component":{}}],["custom",{"_index":316,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"18":{}},"component":{}}],["customiz",{"_index":39,"title":{},"name":{},"text":{"2":{}},"component":{}}],["customtyp",{"_index":1217,"title":{},"name":{},"text":{"14":{}},"component":{}}],["cut",{"_index":594,"title":{},"name":{},"text":{"3":{}},"component":{}}],["cycl",{"_index":115,"title":{},"name":{},"text":{"2":{}},"component":{}}],["d",{"_index":106,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"12":{},"16":{},"17":{}},"component":{}}],["data",{"_index":23,"title":{"2":{},"4-12":{},"19-1":{}},"name":{"2":{}},"text":{"2":{},"3":{},"4":{},"9":{},"18":{},"19":{},"20":{},"21":{},"23":{},"26":{}},"component":{}}],["databas",{"_index":66,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"12":{},"16":{},"18":{},"19":{},"20":{},"23":{}},"component":{}}],["database.th",{"_index":689,"title":{},"name":{},"text":{"4":{}},"component":{}}],["datasourc",{"_index":27,"title":{},"name":{},"text":{"2":{}},"component":{}}],["date",{"_index":1014,"title":{},"name":{},"text":{"12":{}},"component":{}}],["davi",{"_index":759,"title":{},"name":{},"text":{"4":{}},"component":{}}],["dcreat",{"_index":578,"title":{},"name":{},"text":{"3":{}},"component":{}}],["deal",{"_index":282,"title":{},"name":{},"text":{"2":{}},"component":{}}],["debug",{"_index":1494,"title":{},"name":{},"text":{"21":{}},"component":{}}],["decid",{"_index":173,"title":{},"name":{},"text":{"2":{},"18":{},"23":{}},"component":{}}],["decimal(4,2",{"_index":1422,"title":{},"name":{},"text":{"20":{}},"component":{}}],["declar",{"_index":165,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"20":{},"23":{},"26":{}},"component":{}}],["default",{"_index":272,"title":{},"name":{},"text":{"2":{},"10":{},"18":{},"21":{},"25":{}},"component":{}}],["defin",{"_index":307,"title":{},"name":{},"text":{"2":{},"3":{},"4":{}},"component":{}}],["delet",{"_index":1693,"title":{"25-5":{}},"name":{},"text":{"25":{}},"component":{}}],["demo",{"_index":622,"title":{},"name":{},"text":{"4":{},"19":{}},"component":{}}],["demonstr",{"_index":341,"title":{},"name":{},"text":{"2":{},"4":{},"21":{},"25":{}},"component":{}}],["depend",{"_index":77,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"8":{},"9":{},"18":{},"19":{},"23":{},"24":{},"25":{}},"component":{}}],["depth",{"_index":1324,"title":{},"name":{},"text":{"18":{}},"component":{}}],["deriv",{"_index":1391,"title":{},"name":{},"text":{"19":{}},"component":{}}],["desc",{"_index":966,"title":{},"name":{},"text":{"10":{}},"component":{}}],["descend",{"_index":458,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["describ",{"_index":64,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"14":{},"18":{},"23":{},"25":{}},"component":{}}],["descript",{"_index":206,"title":{},"name":{},"text":{"2":{},"14":{},"18":{}},"component":{}}],["descript2_0_",{"_index":947,"title":{},"name":{},"text":{"10":{}},"component":{}}],["description='nul",{"_index":417,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["design",{"_index":1775,"title":{},"name":{},"text":{"26":{}},"component":{}}],["desir",{"_index":933,"title":{},"name":{},"text":{"10":{}},"component":{}}],["despit",{"_index":1637,"title":{},"name":{},"text":{"24":{}},"component":{}}],["detail",{"_index":25,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["detect",{"_index":277,"title":{},"name":{},"text":{"2":{},"25":{},"26":{}},"component":{}}],["determin",{"_index":1076,"title":{},"name":{},"text":{"12":{},"20":{},"24":{}},"component":{}}],["develop",{"_index":291,"title":{},"name":{},"text":{"2":{},"14":{},"19":{}},"component":{}}],["devil",{"_index":1072,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{}}],["differ",{"_index":74,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"12":{},"14":{},"21":{},"23":{},"24":{}},"component":{}}],["differenti",{"_index":44,"title":{},"name":{},"text":{"2":{}},"component":{}}],["dinosaur",{"_index":386,"title":{},"name":{},"text":{"3":{},"12":{},"14":{},"17":{},"18":{}},"component":{}}],["direct",{"_index":837,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["directli",{"_index":276,"title":{},"name":{},"text":{"2":{},"23":{}},"component":{}}],["directori",{"_index":865,"title":{},"name":{},"text":{"7":{},"8":{},"18":{},"25":{}},"component":{}}],["discard",{"_index":1464,"title":{},"name":{},"text":{"21":{}},"component":{}}],["discontinu",{"_index":1560,"title":{},"name":{},"text":{"21":{}},"component":{}}],["discourag",{"_index":1493,"title":{},"name":{},"text":{"21":{}},"component":{}}],["discuss",{"_index":43,"title":{},"name":{},"text":{"2":{}},"component":{}}],["distinct",{"_index":253,"title":{"3-12":{},"21-4":{}},"name":{},"text":{"2":{},"3":{},"11":{},"21":{}},"component":{}}],["disturb",{"_index":1760,"title":{"26-4":{}},"name":{},"text":{},"component":{}}],["do",{"_index":937,"title":{},"name":{},"text":{"10":{},"26":{}},"component":{}}],["doc",{"_index":4,"title":{},"name":{},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["document",{"_index":308,"title":{"19":{}},"name":{},"text":{"2":{},"18":{}},"component":{}}],["dollar",{"_index":1423,"title":{},"name":{},"text":{"20":{}},"component":{}}],["done",{"_index":261,"title":{},"name":{},"text":{"2":{},"3":{},"9":{},"18":{},"25":{}},"component":{}}],["don’t",{"_index":1194,"title":{},"name":{},"text":{"14":{},"19":{}},"component":{}}],["doubl",{"_index":1203,"title":{},"name":{},"text":{"14":{},"15":{},"21":{}},"component":{}}],["doubleequalpred",{"_index":1239,"title":{},"name":{},"text":{"15":{}},"component":{}}],["doublefield",{"_index":1204,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["doublegreaterthanpred",{"_index":1240,"title":{},"name":{},"text":{"15":{}},"component":{}}],["doublestream",{"_index":678,"title":{},"name":{},"text":{"4":{},"21":{}},"component":{}}],["doublestream.of(1.0",{"_index":1534,"title":{},"name":{},"text":{"21":{}},"component":{}}],["doublestream.of(3.0",{"_index":1536,"title":{},"name":{},"text":{"21":{}},"component":{}}],["doublestream`",{"_index":1510,"title":{},"name":{},"text":{"21":{}},"component":{}}],["down",{"_index":544,"title":{},"name":{},"text":{"3":{},"10":{},"23":{}},"component":{}}],["downsid",{"_index":660,"title":{},"name":{},"text":{"4":{}},"component":{}}],["downstream",{"_index":782,"title":{},"name":{},"text":{"4":{}},"component":{}}],["drop",{"_index":435,"title":{},"name":{},"text":{"3":{},"21":{},"23":{}},"component":{}}],["dropwhil",{"_index":1453,"title":{"21-32":{}},"name":{},"text":{"21":{}},"component":{}}],["dropwhile(",{"_index":1565,"title":{},"name":{},"text":{"21":{}},"component":{}}],["due",{"_index":1199,"title":{},"name":{},"text":{"14":{},"25":{}},"component":{}}],["dummyservic",{"_index":836,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["dummyservice(fin",{"_index":840,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["duplic",{"_index":604,"title":{},"name":{},"text":{"3":{},"21":{}},"component":{}}],["dure",{"_index":1329,"title":{},"name":{},"text":{"18":{}},"component":{}}],["e",{"_index":1021,"title":{},"name":{},"text":{"12":{},"13":{},"20":{}},"component":{}}],["e).neg",{"_index":1117,"title":{},"name":{},"text":{"13":{}},"component":{}}],["e.g",{"_index":167,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"10":{},"12":{},"13":{},"17":{},"19":{},"21":{},"22":{},"24":{},"25":{}},"component":{}}],["e.getvalue().s",{"_index":561,"title":{},"name":{},"text":{"3":{}},"component":{}}],["each",{"_index":185,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"11":{},"21":{},"24":{}},"component":{}}],["eagerli",{"_index":214,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["earlier",{"_index":1712,"title":{},"name":{},"text":{"25":{}},"component":{}}],["easili",{"_index":821,"title":{},"name":{},"text":{"5":{},"9":{},"26":{}},"component":{}}],["ecosystem",{"_index":1759,"title":{"26-3":{}},"name":{},"text":{"26":{}},"component":{}}],["ed",{"_index":764,"title":{},"name":{},"text":{"4":{}},"component":{}}],["effect",{"_index":1470,"title":{},"name":{},"text":{"21":{},"25":{}},"component":{}}],["effici",{"_index":38,"title":{},"name":{},"text":{"2":{},"3":{},"23":{},"26":{}},"component":{}}],["effort",{"_index":850,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["effortlessli",{"_index":1390,"title":{},"name":{},"text":{"19":{}},"component":{}}],["egg",{"_index":445,"title":{},"name":{},"text":{"3":{},"11":{},"12":{},"18":{}},"component":{}}],["element",{"_index":216,"title":{},"name":{},"text":{"2":{},"3":{},"12":{},"14":{},"19":{},"21":{},"22":{},"23":{},"24":{}},"component":{}}],["element’",{"_index":1461,"title":{},"name":{},"text":{"21":{}},"component":{}}],["em",{"_index":1425,"title":{},"name":{},"text":{"20":{}},"component":{}}],["em.gettransaction().begin",{"_index":1427,"title":{},"name":{},"text":{"20":{}},"component":{}}],["em.gettransaction().commit",{"_index":1432,"title":{},"name":{},"text":{"20":{}},"component":{}}],["em.gettransaction().rollback",{"_index":1434,"title":{},"name":{},"text":{"20":{}},"component":{}}],["em.merge(f",{"_index":1431,"title":{},"name":{},"text":{"20":{}},"component":{}}],["emf",{"_index":124,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["emf.createentitymanag",{"_index":1426,"title":{},"name":{},"text":{"20":{}},"component":{}}],["empti",{"_index":1270,"title":{},"name":{},"text":{"17":{},"18":{},"24":{},"25":{}},"component":{}}],["enabl",{"_index":1543,"title":{"25-6":{}},"name":{},"text":{"21":{},"25":{}},"component":{}}],["encount",{"_index":1500,"title":{},"name":{},"text":{"21":{},"25":{}},"component":{}}],["encourag",{"_index":1191,"title":{},"name":{},"text":{"14":{},"23":{}},"component":{}}],["end",{"_index":1078,"title":{},"name":{},"text":{"12":{},"17":{},"18":{},"24":{}},"component":{}}],["endswith",{"_index":1262,"title":{"17-10":{}},"name":{},"text":{"17":{}},"component":{}}],["endswith(p",{"_index":1143,"title":{},"name":{},"text":{"13":{}},"component":{}}],["endswith(p).neg",{"_index":1140,"title":{},"name":{},"text":{"13":{}},"component":{}}],["endswithignorecas",{"_index":1264,"title":{"17-12":{}},"name":{},"text":{"17":{}},"component":{}}],["endswithignorecase(p).neg",{"_index":1144,"title":{},"name":{},"text":{"13":{}},"component":{}}],["english",{"_index":748,"title":{},"name":{},"text":{"4":{}},"component":{}}],["enough",{"_index":1320,"title":{},"name":{},"text":{"18":{}},"component":{}}],["enrich",{"_index":903,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{}}],["ensur",{"_index":278,"title":{},"name":{},"text":{"2":{}},"component":{}}],["enter",{"_index":743,"title":{},"name":{},"text":{"4":{}},"component":{}}],["entir",{"_index":540,"title":{},"name":{},"text":{"3":{},"14":{},"23":{}},"component":{}}],["entireti",{"_index":1490,"title":{},"name":{},"text":{"21":{}},"component":{}}],["entiti",{"_index":136,"title":{"18-9":{},"25-4":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"14":{},"16":{},"18":{},"19":{},"20":{},"23":{},"25":{}},"component":{}}],["entityclass",{"_index":190,"title":{},"name":{},"text":{"2":{}},"component":{}}],["entitymanag",{"_index":129,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["entitymanagagerfactori",{"_index":12,"title":{"2-3":{}},"name":{},"text":{},"component":{}}],["entitymanagerfactori",{"_index":111,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"20":{}},"component":{}}],["entri",{"_index":1339,"title":{},"name":{},"text":{"18":{},"20":{}},"component":{}}],["entry::getvalu",{"_index":563,"title":{},"name":{},"text":{"3":{}},"component":{}}],["entryset",{"_index":559,"title":{},"name":{},"text":{"3":{}},"component":{}}],["enum",{"_index":1081,"title":{},"name":{},"text":{"12":{},"14":{}},"component":{}}],["enum('g','pg','pg",{"_index":1250,"title":{},"name":{},"text":{"16":{},"19":{},"20":{}},"component":{}}],["enumfield",{"_index":1213,"title":{},"name":{},"text":{"14":{}},"component":{}}],["environ",{"_index":146,"title":{},"name":{},"text":{"2":{}},"component":{}}],["equal",{"_index":1005,"title":{"12-2":{}},"name":{},"text":{"12":{},"17":{},"19":{},"21":{},"24":{}},"component":{}}],["equal(p",{"_index":1107,"title":{},"name":{},"text":{"13":{}},"component":{}}],["equal.negate(p",{"_index":1104,"title":{},"name":{},"text":{"13":{}},"component":{}}],["equalignorecas",{"_index":1257,"title":{"17-4":{}},"name":{},"text":{"17":{}},"component":{}}],["equalignorecase(p",{"_index":1131,"title":{},"name":{},"text":{"13":{}},"component":{}}],["equalignorecase(p).neg",{"_index":1128,"title":{},"name":{},"text":{"13":{}},"component":{}}],["equival",{"_index":199,"title":{"3":{}},"name":{"3":{}},"text":{"2":{},"3":{},"10":{},"11":{},"13":{},"24":{},"26":{}},"component":{}}],["error",{"_index":1388,"title":{},"name":{},"text":{"19":{},"25":{},"26":{}},"component":{}}],["especi",{"_index":140,"title":{},"name":{},"text":{"2":{}},"component":{}}],["essenti",{"_index":907,"title":{},"name":{},"text":{"10":{},"20":{}},"component":{}}],["establish",{"_index":72,"title":{},"name":{},"text":{"2":{}},"component":{}}],["etc",{"_index":627,"title":{},"name":{},"text":{"4":{},"12":{},"18":{}},"component":{}}],["evalu",{"_index":922,"title":{},"name":{},"text":{"10":{},"11":{},"12":{},"21":{}},"component":{}}],["even",{"_index":669,"title":{},"name":{},"text":{"4":{},"13":{},"21":{},"25":{}},"component":{}}],["exampl",{"_index":54,"title":{"4":{},"12-1":{},"16-1":{},"17-1":{}},"name":{"4":{}},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["excel",{"_index":312,"title":{},"name":{},"text":{"2":{}},"component":{}}],["exclus",{"_index":1023,"title":{},"name":{},"text":{"12":{}},"component":{}}],["execut",{"_index":254,"title":{},"name":{},"text":{"2":{},"10":{},"19":{},"21":{},"24":{},"25":{}},"component":{}}],["exhaust",{"_index":1319,"title":{},"name":{},"text":{"18":{}},"component":{}}],["exist",{"_index":122,"title":{"26-4":{}},"name":{},"text":{"2":{},"7":{},"8":{},"10":{},"18":{},"19":{},"21":{},"26":{}},"component":{}}],["expand",{"_index":555,"title":{},"name":{},"text":{"3":{},"21":{}},"component":{}}],["expect",{"_index":178,"title":{},"name":{},"text":{"2":{},"25":{}},"component":{}}],["explain",{"_index":1323,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["explan",{"_index":183,"title":{},"name":{},"text":{"2":{},"18":{}},"component":{}}],["explicitli",{"_index":884,"title":{},"name":{},"text":{"9":{}},"component":{}}],["explor",{"_index":1695,"title":{},"name":{},"text":{"25":{}},"component":{}}],["expos",{"_index":302,"title":{},"name":{},"text":{"2":{}},"component":{}}],["express",{"_index":352,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"14":{},"18":{},"19":{},"23":{},"26":{}},"component":{}}],["extend",{"_index":1399,"title":{},"name":{},"text":{"19":{},"26":{}},"component":{}}],["extens",{"_index":848,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["extern",{"_index":180,"title":{},"name":{},"text":{"2":{}},"component":{}}],["extra",{"_index":733,"title":{},"name":{},"text":{"4":{},"18":{}},"component":{}}],["extract",{"_index":1610,"title":{},"name":{},"text":{"23":{}},"component":{}}],["extractor",{"_index":1642,"title":{},"name":{},"text":{"24":{}},"component":{}}],["f.gettitle().startswith(\"a",{"_index":1186,"title":{},"name":{},"text":{"14":{}},"component":{}}],["f.setrentalrate(f.getrentalr",{"_index":1430,"title":{},"name":{},"text":{"20":{}},"component":{}}],["fact",{"_index":1200,"title":{},"name":{},"text":{"14":{}},"component":{}}],["factor",{"_index":1612,"title":{},"name":{},"text":{"23":{}},"component":{}}],["factori",{"_index":116,"title":{},"name":{},"text":{"2":{}},"component":{}}],["fail",{"_index":1562,"title":{},"name":{},"text":{"21":{},"25":{}},"component":{}}],["failur",{"_index":1704,"title":{},"name":{},"text":{"25":{}},"component":{}}],["fals",{"_index":645,"title":{},"name":{},"text":{"4":{},"10":{},"11":{},"12":{},"13":{},"14":{},"19":{},"22":{},"24":{}},"component":{}}],["familiar",{"_index":1379,"title":{},"name":{},"text":{"18":{},"19":{},"23":{}},"component":{}}],["far",{"_index":716,"title":{},"name":{},"text":{"4":{}},"component":{}}],["faster",{"_index":1248,"title":{},"name":{},"text":{"15":{}},"component":{}}],["featur",{"_index":818,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["feel",{"_index":1380,"title":{},"name":{},"text":{"18":{},"23":{}},"component":{}}],["fetch",{"_index":22,"title":{"2":{}},"name":{"2":{}},"text":{"2":{},"3":{},"4":{},"19":{}},"component":{}}],["few",{"_index":1315,"title":{},"name":{},"text":{"18":{},"22":{}},"component":{}}],["fidel",{"_index":1296,"title":{},"name":{},"text":{"17":{}},"component":{}}],["field",{"_index":211,"title":{"14-2":{},"14-3":{},"18-4":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"10":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"20":{},"23":{}},"component":{}}],["field.length",{"_index":1271,"title":{},"name":{},"text":{"17":{}},"component":{}}],["fil",{"_index":1060,"title":{},"name":{},"text":{"12":{}},"component":{}}],["file",{"_index":53,"title":{},"name":{},"text":{"2":{},"5":{},"7":{},"8":{},"9":{},"18":{},"22":{},"25":{}},"component":{}}],["film",{"_index":107,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{},"25":{}},"component":{}}],["film$.film_id.between(1,100).neg",{"_index":1156,"title":{},"name":{},"text":{"13":{}},"component":{}}],["film$.film_id.equal(1",{"_index":1161,"title":{},"name":{},"text":{"13":{}},"component":{}}],["film$.film_id.equal(1).neg",{"_index":1154,"title":{},"name":{},"text":{"13":{}},"component":{}}],["film$.film_id.equal(1).negate().neg",{"_index":1160,"title":{},"name":{},"text":{"13":{}},"component":{}}],["film$.film_id.notbetween(1",{"_index":1157,"title":{},"name":{},"text":{"13":{}},"component":{}}],["film$.film_id.notequal(1",{"_index":1155,"title":{},"name":{},"text":{"13":{}},"component":{}}],["film$.filmid",{"_index":573,"title":{},"name":{},"text":{"3":{}},"component":{}}],["film$.length.greaterthan(120",{"_index":975,"title":{},"name":{},"text":{"11":{}},"component":{}}],["film$.length.revers",{"_index":459,"title":{},"name":{},"text":{"3":{}},"component":{}}],["film$.rat",{"_index":522,"title":{},"name":{},"text":{"3":{}},"component":{}}],["film$.rating.equal(\"pg",{"_index":977,"title":{},"name":{},"text":{"11":{}},"component":{}}],["film$.titl",{"_index":409,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["film$.title.revers",{"_index":643,"title":{},"name":{},"text":{"4":{}},"component":{}}],["film$.title::startswith",{"_index":1181,"title":{},"name":{},"text":{"14":{}},"component":{}}],["film.class",{"_index":198,"title":{},"name":{},"text":{"2":{},"10":{},"18":{}},"component":{}}],["film.getlength",{"_index":587,"title":{},"name":{},"text":{"3":{}},"component":{}}],["film.gettitl",{"_index":585,"title":{},"name":{},"text":{"3":{}},"component":{}}],["film0_",{"_index":964,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.descript",{"_index":946,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.film_id",{"_index":944,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.last_upd",{"_index":948,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.length",{"_index":950,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.length>100",{"_index":965,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.rat",{"_index":952,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.rental_dur",{"_index":954,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.rental_r",{"_index":956,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.replacement_cost",{"_index":958,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.special_featur",{"_index":960,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film0_.titl",{"_index":962,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film::getfilmid",{"_index":917,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film::getlanguag",{"_index":739,"title":{},"name":{},"text":{"4":{}},"component":{}}],["film::gettitl",{"_index":920,"title":{},"name":{},"text":{"10":{}},"component":{}}],["film_actor",{"_index":698,"title":{},"name":{},"text":{"4":{}},"component":{}}],["film_id",{"_index":379,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"18":{},"19":{}},"component":{}}],["film_id1_0_",{"_index":945,"title":{},"name":{},"text":{"10":{}},"component":{}}],["filmcategori",{"_index":520,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filmid",{"_index":383,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"17":{},"18":{},"19":{}},"component":{}}],["filmid=1",{"_index":1340,"title":{},"name":{},"text":{"18":{}},"component":{}}],["filmid=2",{"_index":1342,"title":{},"name":{},"text":{"18":{}},"component":{}}],["filmid=3",{"_index":1344,"title":{},"name":{},"text":{"18":{}},"component":{}}],["filmid=4",{"_index":1346,"title":{},"name":{},"text":{"18":{}},"component":{}}],["filmid=5",{"_index":1348,"title":{},"name":{},"text":{"18":{}},"component":{}}],["filmimpl",{"_index":1285,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filmlength",{"_index":680,"title":{},"name":{},"text":{"4":{}},"component":{}}],["filmographi",{"_index":754,"title":{},"name":{},"text":{"4":{}},"component":{}}],["filmpage(1",{"_index":642,"title":{},"name":{},"text":{"4":{}},"component":{}}],["filmpage(jpastream",{"_index":637,"title":{},"name":{},"text":{"4":{}},"component":{}}],["filmrepositori",{"_index":157,"title":{},"name":{},"text":{"2":{}},"component":{}}],["films%n",{"_index":650,"title":{},"name":{},"text":{"4":{}},"component":{}}],["films(",{"_index":1052,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{}}],["films.stream",{"_index":494,"title":{},"name":{},"text":{"3":{},"14":{}},"component":{}}],["films.stream().limit(20).foreach(system.out::println",{"_index":1747,"title":{},"name":{},"text":{"25":{}},"component":{}}],["filmsinlengthord",{"_index":455,"title":{},"name":{},"text":{"3":{}},"component":{}}],["film{filmid=141",{"_index":426,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["film{filmid=182",{"_index":429,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["film{filmid=212",{"_index":414,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["filter",{"_index":368,"title":{"21-2":{}},"name":{},"text":{"3":{},"4":{},"10":{},"11":{},"14":{},"19":{},"20":{},"21":{},"23":{}},"component":{}}],["filter(",{"_index":560,"title":{},"name":{},"text":{"3":{},"21":{},"23":{}},"component":{}}],["filter(f",{"_index":1185,"title":{},"name":{},"text":{"14":{}},"component":{}}],["filter(film$.length.between(100",{"_index":608,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["filter(film$.length.between(60",{"_index":1070,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.length.greaterorequal(120",{"_index":1068,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.length.greaterthan(120",{"_index":440,"title":{},"name":{},"text":{"3":{},"11":{},"12":{}},"component":{}}],["filter(film$.length.greaterthan(120).and(film$.rating.equal(\"pg",{"_index":991,"title":{},"name":{},"text":{"11":{}},"component":{}}],["filter(film$.length.greaterthan(120).or(film$.rating.equal(\"pg",{"_index":605,"title":{},"name":{},"text":{"3":{}},"component":{}}],["filter(film$.length.greatherthanorequal(61",{"_index":266,"title":{},"name":{},"text":{"2":{}},"component":{}}],["filter(film$.length.lessthan(120",{"_index":1059,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.length.lessthan(60",{"_index":264,"title":{},"name":{},"text":{"2":{}},"component":{}}],["filter(film$.length.notbetween(60",{"_index":1086,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.name.equal(\"casablanca",{"_index":243,"title":{},"name":{},"text":{"2":{}},"component":{}}],["filter(film$.rating.equal(\"g",{"_index":1394,"title":{},"name":{},"text":{"19":{}},"component":{}}],["filter(film$.rating.equal(\"g\").and(film$.length.greaterthan(100",{"_index":940,"title":{},"name":{},"text":{"10":{}},"component":{}}],["filter(film$.rating.equal(\"pg",{"_index":737,"title":{},"name":{},"text":{"4":{},"11":{},"12":{}},"component":{}}],["filter(film$.rating.equal(\"r",{"_index":1428,"title":{},"name":{},"text":{"20":{}},"component":{}}],["filter(film$.rating.in(\"g",{"_index":1088,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.rating.in(set",{"_index":1091,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.rating.isnotnul",{"_index":1254,"title":{},"name":{},"text":{"16":{}},"component":{}}],["filter(film$.rating.isnul",{"_index":1253,"title":{},"name":{},"text":{"16":{}},"component":{}}],["filter(film$.rating.notequal(\"pg",{"_index":1053,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.rating.notin(\"g",{"_index":1092,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.rating.notin(set",{"_index":1095,"title":{},"name":{},"text":{"12":{}},"component":{}}],["filter(film$.title.contains(\"con",{"_index":1301,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.containsignorecase(\"con",{"_index":1311,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.endswith(\"devil",{"_index":1292,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.endswithignorecase(\"devil",{"_index":1298,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.equalignorecase(\"alabama",{"_index":1284,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.greaterorequal(\"h",{"_index":1193,"title":{},"name":{},"text":{"14":{}},"component":{}}],["filter(film$.title.isempti",{"_index":1282,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.isnotempti",{"_index":1283,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.notcontains(\"con",{"_index":1310,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.notendswith(\"devil",{"_index":1297,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.notendswithignorecase(\"devil",{"_index":1299,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.notequalignorecase(\"alabama",{"_index":1286,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.notstartswith(\"alabama",{"_index":1288,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.notstartswithignorecase(\"ala",{"_index":1291,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.startswith(\"a",{"_index":104,"title":{},"name":{},"text":{"2":{},"10":{},"14":{},"25":{}},"component":{}}],["filter(film$.title.startswith(\"alabama",{"_index":1287,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(film$.title.startswithignorecase(\"ala",{"_index":1290,"title":{},"name":{},"text":{"17":{}},"component":{}}],["filter(islong.and(ispg13",{"_index":978,"title":{},"name":{},"text":{"11":{}},"component":{}}],["filter(islong.or(ispg13",{"_index":992,"title":{},"name":{},"text":{"11":{}},"component":{}}],["filter(n",{"_index":1590,"title":{},"name":{},"text":{"23":{}},"component":{}}],["filter(startswitha",{"_index":1176,"title":{},"name":{},"text":{"14":{}},"component":{}}],["final",{"_index":160,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"10":{},"20":{}},"component":{}}],["find",{"_index":432,"title":{},"name":{},"text":{"3":{},"18":{},"25":{}},"component":{}}],["findani",{"_index":1620,"title":{"24-11":{}},"name":{},"text":{"24":{}},"component":{}}],["findfirst",{"_index":1619,"title":{"24-10":{}},"name":{},"text":{"24":{}},"component":{}}],["first",{"_index":163,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"11":{},"19":{},"21":{},"23":{},"24":{}},"component":{}}],["firstresult",{"_index":1739,"title":{},"name":{},"text":{"25":{}},"component":{}}],["fit",{"_index":1383,"title":{"19-2":{}},"name":{},"text":{},"component":{}}],["five",{"_index":1397,"title":{},"name":{},"text":{"19":{}},"component":{}}],["flatmap",{"_index":374,"title":{"21-8":{}},"name":{},"text":{"3":{},"4":{},"21":{}},"component":{}}],["flatmap(function.ident",{"_index":600,"title":{},"name":{},"text":{"3":{},"21":{}},"component":{}}],["flatmap(l",{"_index":1485,"title":{},"name":{},"text":{"21":{}},"component":{}}],["flatmaptodoubl",{"_index":1443,"title":{"21-20":{}},"name":{},"text":{"21":{}},"component":{}}],["flatmaptodouble(",{"_index":1538,"title":{},"name":{},"text":{"21":{}},"component":{}}],["flatmaptoint",{"_index":1507,"title":{},"name":{},"text":{"21":{}},"component":{}}],["flatmaptoint(",{"_index":1528,"title":{},"name":{},"text":{"21":{}},"component":{}}],["flatmaptolong",{"_index":1442,"title":{"21-19":{}},"name":{},"text":{"21":{}},"component":{}}],["flatmaptolong(",{"_index":1533,"title":{},"name":{},"text":{"21":{}},"component":{}}],["flatten",{"_index":1482,"title":{},"name":{},"text":{"21":{}},"component":{}}],["float",{"_index":1205,"title":{},"name":{},"text":{"14":{},"15":{},"20":{}},"component":{}}],["floatequalpred",{"_index":1237,"title":{},"name":{},"text":{"15":{}},"component":{}}],["floatfield",{"_index":1206,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["floatgreaterthanpred",{"_index":1238,"title":{},"name":{},"text":{"15":{}},"component":{}}],["flow",{"_index":1599,"title":{},"name":{},"text":{"23":{}},"component":{}}],["folder",{"_index":926,"title":{},"name":{},"text":{"10":{},"18":{},"25":{}},"component":{}}],["follow",{"_index":123,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"23":{},"24":{}},"component":{}}],["foo",{"_index":910,"title":{},"name":{},"text":{"10":{}},"component":{}}],["foo$.class",{"_index":1358,"title":{},"name":{},"text":{"18":{}},"component":{}}],["foo.class",{"_index":909,"title":{},"name":{},"text":{"10":{},"18":{}},"component":{}}],["forc",{"_index":1189,"title":{},"name":{},"text":{"14":{}},"component":{}}],["foreach",{"_index":1613,"title":{"24-2":{}},"name":{},"text":{"24":{}},"component":{}}],["foreach(f",{"_index":1429,"title":{},"name":{},"text":{"20":{}},"component":{}}],["foreach(system.out::print",{"_index":1634,"title":{},"name":{},"text":{"24":{}},"component":{}}],["foreach(system.out::println",{"_index":412,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"18":{},"19":{}},"component":{}}],["foreachord",{"_index":1614,"title":{"24-3":{}},"name":{},"text":{"24":{}},"component":{}}],["foreachordered(system.out::print",{"_index":1638,"title":{},"name":{},"text":{"24":{}},"component":{}}],["foreachordered(system.out::println",{"_index":441,"title":{},"name":{},"text":{"3":{},"11":{},"12":{},"14":{},"17":{},"21":{}},"component":{}}],["forkjoinpool",{"_index":1498,"title":{},"name":{},"text":{"21":{}},"component":{}}],["form",{"_index":662,"title":{},"name":{},"text":{"4":{}},"component":{}}],["formal",{"_index":1598,"title":{},"name":{},"text":{"23":{},"25":{}},"component":{}}],["format",{"_index":744,"title":{},"name":{},"text":{"4":{}},"component":{}}],["forrest",{"_index":416,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["forward",{"_index":786,"title":{},"name":{},"text":{"4":{},"14":{},"26":{}},"component":{}}],["found",{"_index":52,"title":{"25-7":{}},"name":{},"text":{"2":{},"20":{},"25":{}},"component":{}}],["four",{"_index":1317,"title":{},"name":{},"text":{"18":{},"21":{},"23":{},"24":{}},"component":{}}],["framework",{"_index":880,"title":{},"name":{},"text":{"9":{},"23":{}},"component":{}}],["free",{"_index":936,"title":{},"name":{},"text":{"10":{},"18":{},"19":{},"23":{}},"component":{}}],["frequent",{"_index":177,"title":{},"name":{},"text":{"2":{}},"component":{}}],["frogmen",{"_index":773,"title":{},"name":{},"text":{"4":{}},"component":{}}],["fulfil",{"_index":1033,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{}}],["fulli",{"_index":1762,"title":{},"name":{},"text":{"26":{}},"component":{}}],["function",{"_index":741,"title":{},"name":{},"text":{"4":{},"11":{},"12":{},"14":{},"21":{},"23":{},"24":{}},"component":{}}],["function.ident",{"_index":729,"title":{},"name":{},"text":{"4":{}},"component":{}}],["fundament",{"_index":817,"title":{"23":{}},"name":{},"text":{"5":{},"9":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{}},"component":{}}],["further",{"_index":1456,"title":{},"name":{},"text":{"21":{},"23":{},"26":{}},"component":{}}],["futur",{"_index":210,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"25":{}},"component":{}}],["g",{"_index":537,"title":{},"name":{},"text":{"3":{},"11":{},"12":{},"19":{}},"component":{}}],["g=178",{"_index":551,"title":{},"name":{},"text":{"3":{}},"component":{}}],["g=3",{"_index":799,"title":{},"name":{},"text":{"4":{}},"component":{}}],["g=5",{"_index":805,"title":{},"name":{},"text":{"4":{}},"component":{}}],["g=8",{"_index":794,"title":{},"name":{},"text":{"4":{}},"component":{}}],["gain",{"_index":1767,"title":{},"name":{},"text":{"26":{}},"component":{}}],["galaxi",{"_index":763,"title":{},"name":{},"text":{"4":{}},"component":{}}],["gener",{"_index":722,"title":{"18-4":{},"18-7":{},"18-9":{},"25-1":{},"25-2":{},"25-5":{}},"name":{},"text":{"4":{},"7":{},"8":{},"10":{},"12":{},"15":{},"18":{},"19":{},"23":{},"25":{}},"component":{}}],["generatedvalue(strategi",{"_index":913,"title":{},"name":{},"text":{"10":{},"18":{},"19":{}},"component":{}}],["generationtype.ident",{"_index":914,"title":{},"name":{},"text":{"10":{},"18":{},"19":{}},"component":{}}],["georg",{"_index":1587,"title":{},"name":{},"text":{"23":{}},"component":{}}],["get",{"_index":1406,"title":{},"name":{},"text":{"19":{}},"component":{}}],["getentitymanag",{"_index":153,"title":{},"name":{},"text":{"2":{}},"component":{}}],["getter",{"_index":574,"title":{},"name":{},"text":{"3":{},"10":{},"18":{}},"component":{}}],["github",{"_index":1415,"title":{},"name":{},"text":{"19":{},"25":{}},"component":{}}],["github/speedment/jpa",{"_index":676,"title":{},"name":{},"text":{"4":{}},"component":{}}],["gitter",{"_index":1409,"title":{},"name":{},"text":{"19":{}},"component":{}}],["give",{"_index":364,"title":{},"name":{},"text":{"3":{},"13":{}},"component":{}}],["given",{"_index":633,"title":{},"name":{},"text":{"4":{},"11":{},"12":{},"17":{},"18":{},"21":{},"23":{},"24":{}},"component":{}}],["go",{"_index":89,"title":{},"name":{},"text":{"2":{},"3":{},"18":{},"26":{}},"component":{}}],["goldfing",{"_index":388,"title":{},"name":{},"text":{"3":{},"12":{},"14":{},"17":{},"18":{}},"component":{}}],["good",{"_index":1579,"title":{},"name":{},"text":{"23":{},"25":{}},"component":{}}],["googl",{"_index":1726,"title":{},"name":{},"text":{"25":{}},"component":{}}],["gradl",{"_index":809,"title":{"7":{},"5-3":{},"9-3":{},"18-3":{}},"name":{"7":{}},"text":{"5":{},"7":{},"9":{},"18":{},"25":{}},"component":{}}],["great",{"_index":1407,"title":{},"name":{},"text":{"19":{}},"component":{}}],["greater",{"_index":437,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{},"18":{},"23":{}},"component":{}}],["greaterorequ",{"_index":1009,"title":{"12-6":{}},"name":{},"text":{"12":{}},"component":{}}],["greaterorequal(p",{"_index":1109,"title":{},"name":{},"text":{"13":{}},"component":{}}],["greaterorequal(p).neg",{"_index":1114,"title":{},"name":{},"text":{"13":{}},"component":{}}],["greaterthan",{"_index":1008,"title":{"12-5":{}},"name":{},"text":{},"component":{}}],["greaterthan(p",{"_index":1111,"title":{},"name":{},"text":{"13":{}},"component":{}}],["greaterthan(p).neg",{"_index":1112,"title":{},"name":{},"text":{"13":{}},"component":{}}],["greedi",{"_index":760,"title":{},"name":{},"text":{"4":{}},"component":{}}],["gross",{"_index":502,"title":{},"name":{},"text":{"3":{}},"component":{}}],["group",{"_index":348,"title":{"3-10":{}},"name":{},"text":{"3":{},"4":{}},"component":{}}],["groupingby(film::getr",{"_index":779,"title":{},"name":{},"text":{"4":{}},"component":{}}],["groupingby(function.ident",{"_index":776,"title":{},"name":{},"text":{"4":{}},"component":{}}],["guarante",{"_index":1636,"title":{},"name":{},"text":{"24":{}},"component":{}}],["gui",{"_index":630,"title":{},"name":{},"text":{"4":{}},"component":{}}],["guid",{"_index":823,"title":{},"name":{},"text":{"5":{},"9":{},"18":{},"19":{},"25":{}},"component":{}}],["guidanc",{"_index":286,"title":{},"name":{},"text":{"2":{},"12":{}},"component":{}}],["hand",{"_index":134,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["handl",{"_index":684,"title":{},"name":{},"text":{"4":{},"5":{},"9":{},"11":{},"15":{},"20":{},"21":{},"26":{}},"component":{}}],["hanov",{"_index":762,"title":{},"name":{},"text":{"4":{}},"component":{}}],["happen",{"_index":1594,"title":{},"name":{},"text":{"23":{},"26":{}},"component":{}}],["hascomparableoper",{"_index":1038,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{}}],["hashset",{"_index":703,"title":{},"name":{},"text":{"4":{}},"component":{}}],["hasreferenceoper",{"_index":1037,"title":{},"name":{},"text":{"12":{},"16":{},"17":{}},"component":{}}],["hasstringoper",{"_index":1278,"title":{},"name":{},"text":{"17":{}},"component":{}}],["have",{"_index":87,"title":{"3-11":{}},"name":{},"text":{"2":{},"3":{},"10":{}},"component":{}}],["haven’t",{"_index":1164,"title":{},"name":{},"text":{"14":{},"25":{}},"component":{}}],["he\".compareto(f.gettitl",{"_index":1195,"title":{},"name":{},"text":{"14":{}},"component":{}}],["held",{"_index":1350,"title":{},"name":{},"text":{"18":{}},"component":{}}],["help",{"_index":1314,"title":{},"name":{},"text":{"18":{},"25":{},"26":{}},"component":{}}],["helper",{"_index":870,"title":{},"name":{},"text":{"8":{},"18":{},"25":{}},"component":{}}],["henc",{"_index":1321,"title":{},"name":{},"text":{"18":{}},"component":{}}],["here",{"_index":90,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"18":{},"20":{},"21":{},"24":{},"25":{}},"component":{}}],["hereund",{"_index":396,"title":{},"name":{},"text":{"3":{},"4":{},"23":{}},"component":{}}],["hibern",{"_index":150,"title":{"6":{}},"name":{},"text":{"2":{},"6":{}},"component":{}}],["hibernate_integr",{"_index":845,"title":{},"name":{"6":{}},"text":{},"component":{}}],["highli",{"_index":1190,"title":{},"name":{},"text":{"14":{}},"component":{}}],["hint",{"_index":19,"title":{"2-8":{}},"name":{},"text":{"2":{}},"component":{}}],["hintnam",{"_index":224,"title":{},"name":{},"text":{"2":{}},"component":{}}],["hold",{"_index":576,"title":{},"name":{},"text":{"3":{},"12":{},"16":{},"17":{}},"component":{}}],["holder",{"_index":580,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hole",{"_index":391,"title":{},"name":{},"text":{"3":{},"12":{},"17":{},"18":{}},"component":{}}],["homeward",{"_index":473,"title":{},"name":{},"text":{"3":{}},"component":{}}],["hood",{"_index":1246,"title":{},"name":{},"text":{"15":{}},"component":{}}],["https://github.com/speedment/jpa",{"_index":1412,"title":{},"name":{},"text":{"19":{}},"component":{}}],["https://gitter.im/speedment/jpa",{"_index":1411,"title":{},"name":{},"text":{"19":{}},"component":{}}],["https://www.jpastreamer.org",{"_index":1414,"title":{},"name":{},"text":{"19":{}},"component":{}}],["i.",{"_index":1098,"title":{},"name":{},"text":{"13":{},"14":{},"16":{},"17":{},"18":{},"21":{},"23":{},"26":{}},"component":{}}],["i=1",{"_index":1645,"title":{},"name":{},"text":{"24":{}},"component":{}}],["ic",{"_index":1275,"title":{},"name":{},"text":{"17":{}},"component":{}}],["id",{"_index":377,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"18":{},"19":{},"25":{}},"component":{}}],["id:",{"_index":572,"title":{},"name":{},"text":{"3":{}},"component":{}}],["ident",{"_index":740,"title":{},"name":{},"text":{"4":{}},"component":{}}],["ignor",{"_index":1273,"title":{},"name":{},"text":{"17":{}},"component":{}}],["imag",{"_index":768,"title":{},"name":{},"text":{"4":{}},"component":{}}],["immedi",{"_index":1386,"title":{},"name":{},"text":{"19":{}},"component":{}}],["impact",{"_index":336,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["imped",{"_index":934,"title":{},"name":{},"text":{"10":{}},"component":{}}],["implement",{"_index":158,"title":{},"name":{},"text":{"2":{},"10":{},"12":{},"14":{},"15":{},"16":{},"17":{},"19":{},"23":{},"24":{}},"component":{}}],["import",{"_index":252,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"14":{},"25":{}},"component":{}}],["improv",{"_index":298,"title":{},"name":{},"text":{"2":{},"25":{}},"component":{}}],["in(a",{"_index":1119,"title":{},"name":{},"text":{"13":{}},"component":{}}],["includ",{"_index":91,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"12":{},"13":{},"14":{},"19":{},"23":{}},"component":{}}],["inclus",{"_index":1025,"title":{},"name":{},"text":{"12":{}},"component":{}}],["inclusion.start_inclusive_end_inclus",{"_index":1083,"title":{},"name":{},"text":{"12":{}},"component":{}}],["increas",{"_index":1424,"title":{},"name":{},"text":{"20":{},"26":{}},"component":{}}],["indic",{"_index":1280,"title":{},"name":{},"text":{"17":{}},"component":{}}],["influenc",{"_index":293,"title":{},"name":{},"text":{"2":{}},"component":{}}],["inform",{"_index":613,"title":{},"name":{},"text":{"3":{},"14":{},"17":{},"18":{}},"component":{}}],["inherit",{"_index":152,"title":{},"name":{},"text":{"2":{},"12":{}},"component":{}}],["initi",{"_index":28,"title":{"4-4":{},"18-5":{}},"name":{},"text":{"2":{},"3":{},"4":{},"18":{},"19":{},"24":{}},"component":{}}],["inject",{"_index":816,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["insid",{"_index":147,"title":{},"name":{},"text":{"2":{}},"component":{}}],["inspect",{"_index":906,"title":{},"name":{},"text":{"10":{}},"component":{}}],["instal",{"_index":806,"title":{"7":{},"8":{},"5-1":{},"9-1":{},"18-1":{},"25-3":{}},"name":{"7":{},"8":{}},"text":{"5":{},"7":{},"8":{},"9":{},"10":{},"18":{},"25":{}},"component":{}}],["instanc",{"_index":8,"title":{"2-1":{}},"name":{},"text":{"2":{},"3":{},"14":{}},"component":{}}],["instanti",{"_index":93,"title":{},"name":{},"text":{"2":{}},"component":{}}],["instantli",{"_index":1382,"title":{"19-1":{}},"name":{},"text":{},"component":{}}],["instead",{"_index":279,"title":{"26-1":{}},"name":{},"text":{"2":{},"3":{},"18":{}},"component":{}}],["instruct",{"_index":1334,"title":{},"name":{},"text":{"18":{}},"component":{}}],["int",{"_index":582,"title":{},"name":{},"text":{"3":{},"4":{},"14":{},"15":{},"21":{}},"component":{}}],["integ",{"_index":382,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"12":{},"14":{},"18":{},"19":{},"21":{},"24":{}},"component":{}}],["integer.max_valu",{"_index":1691,"title":{},"name":{},"text":{"24":{}},"component":{}}],["integer.min_valu",{"_index":1690,"title":{},"name":{},"text":{"24":{}},"component":{}}],["integr",{"_index":810,"title":{"5":{},"6":{},"9":{}},"name":{},"text":{"5":{},"6":{},"9":{},"19":{}},"component":{}}],["intellij",{"_index":1723,"title":{},"name":{},"text":{"25":{}},"component":{}}],["intellisens",{"_index":1764,"title":{},"name":{},"text":{"26":{}},"component":{}}],["intend",{"_index":1318,"title":{},"name":{},"text":{"18":{}},"component":{}}],["intent",{"_index":1769,"title":{},"name":{},"text":{"26":{}},"component":{}}],["intequalpred",{"_index":1229,"title":{},"name":{},"text":{"15":{}},"component":{}}],["interact",{"_index":41,"title":{},"name":{},"text":{"2":{}},"component":{}}],["interest",{"_index":568,"title":{},"name":{},"text":{"3":{}},"component":{}}],["interfac",{"_index":935,"title":{},"name":{},"text":{"10":{},"12":{},"14":{},"16":{},"17":{},"23":{},"25":{},"26":{}},"component":{}}],["intermedi",{"_index":1454,"title":{"21":{}},"name":{},"text":{"21":{},"22":{},"23":{}},"component":{}}],["intermediate_oper",{"_index":1455,"title":{},"name":{"21":{}},"text":{},"component":{}}],["intern",{"_index":233,"title":{},"name":{},"text":{"2":{}},"component":{}}],["interpret",{"_index":905,"title":{},"name":{},"text":{"10":{}},"component":{}}],["intfield",{"_index":1202,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["intfunct",{"_index":1633,"title":{},"name":{},"text":{"24":{}},"component":{}}],["intgreaterthanpred",{"_index":1235,"title":{},"name":{},"text":{"15":{}},"component":{}}],["introduc",{"_index":1541,"title":{},"name":{},"text":{"21":{}},"component":{}}],["introduct",{"_index":1384,"title":{},"name":{"19":{}},"text":{"19":{}},"component":{}}],["introspect",{"_index":449,"title":{},"name":{},"text":{"3":{}},"component":{}}],["intstream",{"_index":569,"title":{},"name":{},"text":{"3":{},"4":{},"21":{},"24":{}},"component":{}}],["intstream.of(1",{"_index":1526,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["intstream.of(3",{"_index":1527,"title":{},"name":{},"text":{"21":{}},"component":{}}],["intstream`",{"_index":1508,"title":{},"name":{},"text":{"21":{}},"component":{}}],["intstrem",{"_index":1503,"title":{},"name":{},"text":{"21":{}},"component":{}}],["intsummarystatistics{count=0",{"_index":1685,"title":{},"name":{},"text":{"24":{}},"component":{}}],["intsummarystatistics{count=4",{"_index":1680,"title":{},"name":{},"text":{"24":{}},"component":{}}],["intuit",{"_index":1387,"title":{},"name":{},"text":{"19":{},"26":{}},"component":{}}],["inversejoincolumn",{"_index":701,"title":{},"name":{},"text":{"4":{}},"component":{}}],["invert",{"_index":1097,"title":{},"name":{},"text":{"13":{}},"component":{}}],["invok",{"_index":734,"title":{},"name":{},"text":{"4":{}},"component":{}}],["iron",{"_index":466,"title":{},"name":{},"text":{"3":{}},"component":{}}],["isempti",{"_index":1127,"title":{"17-2":{}},"name":{},"text":{"13":{},"17":{}},"component":{}}],["isempty().neg",{"_index":1124,"title":{},"name":{},"text":{"13":{}},"component":{}}],["islong",{"_index":974,"title":{},"name":{},"text":{"11":{}},"component":{}}],["isnotempti",{"_index":1125,"title":{"17-3":{}},"name":{},"text":{"13":{},"17":{}},"component":{}}],["isnotempty().neg",{"_index":1126,"title":{},"name":{},"text":{"13":{}},"component":{}}],["isnotnul",{"_index":1101,"title":{"16-3":{}},"name":{},"text":{"13":{},"16":{}},"component":{}}],["isnotnull().neg",{"_index":1102,"title":{},"name":{},"text":{"13":{}},"component":{}}],["isnul",{"_index":1103,"title":{"16-2":{}},"name":{},"text":{"13":{},"16":{}},"component":{}}],["isnull().neg",{"_index":1100,"title":{},"name":{},"text":{"13":{}},"component":{}}],["isparallel",{"_index":1566,"title":{"22-1":{}},"name":{},"text":{"22":{}},"component":{}}],["ispg13",{"_index":976,"title":{},"name":{},"text":{"11":{}},"component":{}}],["issu",{"_index":234,"title":{"25-9":{}},"name":{},"text":{"2":{},"25":{}},"component":{}}],["item",{"_index":542,"title":{},"name":{},"text":{"3":{}},"component":{}}],["iter",{"_index":451,"title":{"24-17":{}},"name":{},"text":{"3":{},"24":{}},"component":{}}],["it’",{"_index":333,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"18":{}},"component":{}}],["jakarta.persistence.ent",{"_index":1706,"title":{},"name":{},"text":{"25":{}},"component":{}}],["jansen",{"_index":310,"title":{},"name":{},"text":{"2":{}},"component":{}}],["java",{"_index":365,"title":{"19-1":{},"21-21":{},"26-3":{}},"name":{},"text":{"3":{},"4":{},"7":{},"8":{},"10":{},"14":{},"18":{},"19":{},"21":{},"23":{},"24":{},"26":{}},"component":{}}],["java.sql.d",{"_index":1224,"title":{},"name":{},"text":{"14":{}},"component":{}}],["java.sql.tim",{"_index":1223,"title":{},"name":{},"text":{"14":{}},"component":{}}],["java.sql.timestamp",{"_index":1225,"title":{},"name":{},"text":{"14":{}},"component":{}}],["java.util.d",{"_index":1222,"title":{},"name":{},"text":{"14":{}},"component":{}}],["javadoc",{"_index":1179,"title":{},"name":{},"text":{"14":{}},"component":{}}],["javax.persistence.ent",{"_index":1709,"title":{},"name":{},"text":{"25":{}},"component":{}}],["javax.persistence.entitymanag",{"_index":269,"title":{},"name":{},"text":{"2":{}},"component":{}}],["java’",{"_index":1367,"title":{},"name":{},"text":{"18":{}},"component":{}}],["jaw",{"_index":1611,"title":{},"name":{},"text":{"23":{}},"component":{}}],["jdbc",{"_index":1405,"title":{},"name":{},"text":{"19":{}},"component":{}}],["jekyl",{"_index":772,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jennif",{"_index":758,"title":{},"name":{},"text":{"4":{}},"component":{}}],["join",{"_index":168,"title":{"3-16":{},"4-7":{},"4-8":{},"25-8":{}},"name":{},"text":{"2":{},"3":{},"4":{},"25":{}},"component":{}}],["joincolumn",{"_index":699,"title":{},"name":{},"text":{"4":{}},"component":{}}],["joincolumn(nam",{"_index":700,"title":{},"name":{},"text":{"4":{}},"component":{}}],["joincolumn(name=\"language_id",{"_index":693,"title":{},"name":{},"text":{"4":{}},"component":{}}],["joining(field",{"_index":213,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["joining(film$.actor",{"_index":401,"title":{},"name":{},"text":{"3":{}},"component":{}}],["joining(film$.languag",{"_index":402,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jointabl",{"_index":697,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jointyp",{"_index":218,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["jointype.inn",{"_index":724,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jointype.left",{"_index":720,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jointype.right",{"_index":725,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jpa",{"_index":5,"title":{"25-4":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"14":{},"16":{},"18":{},"19":{},"20":{},"23":{},"25":{},"26":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}}}],["jpa/hibernate/spr",{"_index":1385,"title":{},"name":{},"text":{"19":{}},"component":{}}],["jpastream",{"_index":3,"title":{"10":{},"14":{},"18":{},"19":{},"26":{},"2-1":{},"5-4":{},"9-4":{},"18-1":{},"18-5":{},"19-2":{},"23-2":{}},"name":{"26":{}},"text":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["jpastreamer'",{"_index":900,"title":{"10-2":{}},"name":{},"text":{"10":{}},"component":{}}],["jpastreamer.clos",{"_index":1352,"title":{},"name":{},"text":{"18":{}},"component":{}}],["jpastreamer.createjpastreamerbuilder(\"sakila",{"_index":99,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.createstreamsuppli",{"_index":251,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.createstreamsupplier(class",{"_index":192,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.createstreamsupplier(project",{"_index":193,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.createstreamsupplier(streamconfigur",{"_index":172,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.of(\"sakila",{"_index":48,"title":{},"name":{},"text":{"2":{},"3":{},"18":{},"19":{}},"component":{}}],["jpastreamer.of(emf",{"_index":126,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["jpastreamer.of(emf::createentitymanag",{"_index":139,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.of(this::getentitymanag",{"_index":161,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.stream",{"_index":246,"title":{},"name":{},"text":{"2":{},"3":{},"18":{}},"component":{}}],["jpastreamer.stream(class",{"_index":189,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.stream(film.class",{"_index":103,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{}},"component":{}}],["jpastreamer.stream(film.class).filter(film$.length.greaterthan(120",{"_index":602,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["jpastreamer.stream(film.class).filter(film$.rating.equal(\"pg",{"_index":603,"title":{},"name":{},"text":{"3":{},"11":{}},"component":{}}],["jpastreamer.stream(films.class",{"_index":456,"title":{},"name":{},"text":{"3":{}},"component":{}}],["jpastreamer.stream(of(actor.class).joining(actor$.film",{"_index":756,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jpastreamer.stream(of(film.class).joining(film$.actors).joining(film$.languag",{"_index":719,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jpastreamer.stream(of(film.class).joining(film$.languag",{"_index":736,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jpastreamer.stream(of(language.class).joining(language$.film",{"_index":727,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jpastreamer.stream(project",{"_index":191,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.stream(projection.select(film$.filmid",{"_index":653,"title":{},"name":{},"text":{"4":{}},"component":{}}],["jpastreamer.stream(sc",{"_index":327,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["jpastreamer.stream(streamconfigur",{"_index":171,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer.stream(streamconfiguration.of(film.class).joining(film$.actor",{"_index":1745,"title":{},"name":{},"text":{"25":{}},"component":{}}],["jpastreamer::clos",{"_index":118,"title":{},"name":{},"text":{"2":{}},"component":{}}],["jpastreamer:vers",{"_index":834,"title":{},"name":{},"text":{"5":{}},"component":{}}],["jpastreamerpackag",{"_index":1356,"title":{},"name":{},"text":{"18":{}},"component":{}}],["jpastreamerprefix",{"_index":1359,"title":{},"name":{},"text":{"18":{}},"component":{}}],["jpastreamersuffix",{"_index":1360,"title":{},"name":{},"text":{"18":{}},"component":{}}],["jpastreamer’",{"_index":842,"title":{},"name":{},"text":{"5":{},"9":{},"14":{},"25":{}},"component":{}}],["jpql/criteria",{"_index":1757,"title":{"26-1":{}},"name":{},"text":{},"component":{}}],["jvm",{"_index":932,"title":{},"name":{},"text":{"10":{},"11":{},"14":{},"25":{}},"component":{}}],["k",{"_index":527,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["key",{"_index":742,"title":{},"name":{},"text":{"4":{},"10":{},"24":{}},"component":{}}],["kind",{"_index":1577,"title":{},"name":{},"text":{"23":{}},"component":{}}],["know",{"_index":395,"title":{},"name":{},"text":{"3":{},"19":{}},"component":{}}],["known",{"_index":1734,"title":{},"name":{},"text":{"25":{}},"component":{}}],["kwai",{"_index":472,"title":{},"name":{},"text":{"3":{}},"component":{}}],["l.stream",{"_index":1486,"title":{},"name":{},"text":{"21":{}},"component":{}}],["labyrinth",{"_index":475,"title":{},"name":{},"text":{"3":{}},"component":{}}],["laid",{"_index":202,"title":{},"name":{},"text":{"2":{}},"component":{}}],["lambda",{"_index":1184,"title":{},"name":{},"text":{"14":{},"21":{},"24":{}},"component":{}}],["languag",{"_index":392,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["language.film",{"_index":731,"title":{},"name":{},"text":{"4":{}},"component":{}}],["language::getfilm",{"_index":730,"title":{},"name":{},"text":{"4":{}},"component":{}}],["language=nul",{"_index":418,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["language_id",{"_index":708,"title":{},"name":{},"text":{"4":{}},"component":{}}],["languagefilmmap",{"_index":726,"title":{},"name":{},"text":{"4":{}},"component":{}}],["languageid",{"_index":710,"title":{},"name":{},"text":{"4":{}},"component":{}}],["languagemap",{"_index":735,"title":{},"name":{},"text":{"4":{}},"component":{}}],["larger",{"_index":1085,"title":{},"name":{},"text":{"12":{}},"component":{}}],["largest",{"_index":1653,"title":{},"name":{},"text":{"24":{}},"component":{}}],["last",{"_index":1600,"title":{},"name":{},"text":{"23":{},"24":{}},"component":{}}],["last_upd3_0_",{"_index":949,"title":{},"name":{},"text":{"10":{}},"component":{}}],["lastupdate=nul",{"_index":425,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["later",{"_index":852,"title":{},"name":{},"text":{"7":{},"8":{},"18":{},"21":{},"24":{},"25":{}},"component":{}}],["latter",{"_index":1035,"title":{},"name":{},"text":{"12":{}},"component":{}}],["laura",{"_index":795,"title":{},"name":{},"text":{"4":{}},"component":{}}],["layer",{"_index":270,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["lazili",{"_index":393,"title":{},"name":{},"text":{"3":{}},"component":{}}],["lead",{"_index":230,"title":{},"name":{},"text":{"2":{}},"component":{}}],["leagu",{"_index":476,"title":{},"name":{},"text":{"3":{}},"component":{}}],["learn",{"_index":928,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{}}],["leav",{"_index":1743,"title":{},"name":{},"text":{"25":{}},"component":{}}],["left",{"_index":217,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["length",{"_index":436,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{},"19":{},"23":{}},"component":{}}],["length4_0_",{"_index":951,"title":{},"name":{},"text":{"10":{}},"component":{}}],["length=nul",{"_index":421,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["less",{"_index":1058,"title":{"24-14":{}},"name":{},"text":{"12":{},"19":{},"24":{}},"component":{}}],["lessorequal(p",{"_index":1113,"title":{},"name":{},"text":{"13":{}},"component":{}}],["lessorequal(p).neg",{"_index":1110,"title":{},"name":{},"text":{"13":{}},"component":{}}],["lessthan",{"_index":1007,"title":{"12-4":{}},"name":{},"text":{"12":{}},"component":{}}],["lessthan(p",{"_index":1115,"title":{},"name":{},"text":{"13":{}},"component":{}}],["lessthan(p).neg",{"_index":1108,"title":{},"name":{},"text":{"13":{}},"component":{}}],["let",{"_index":1468,"title":{},"name":{},"text":{"21":{}},"component":{}}],["let’",{"_index":317,"title":{},"name":{},"text":{"2":{},"10":{}},"component":{}}],["leverag",{"_index":33,"title":{"26-3":{}},"name":{},"text":{"2":{},"19":{}},"component":{}}],["librari",{"_index":902,"title":{"19-1":{}},"name":{},"text":{"10":{},"19":{},"26":{}},"component":{}}],["life",{"_index":114,"title":{},"name":{},"text":{"2":{}},"component":{}}],["lifecycl",{"_index":137,"title":{},"name":{},"text":{"2":{}},"component":{}}],["lightweight",{"_index":1402,"title":{},"name":{},"text":{"19":{}},"component":{}}],["limbo",{"_index":1718,"title":{},"name":{},"text":{"25":{}},"component":{}}],["limit",{"_index":346,"title":{"3-7":{},"3-8":{},"21-6":{}},"name":{},"text":{"3":{},"4":{},"10":{},"21":{},"25":{}},"component":{}}],["limit(10",{"_index":329,"title":{},"name":{},"text":{"2":{}},"component":{}}],["limit(2",{"_index":1478,"title":{},"name":{},"text":{"21":{}},"component":{}}],["limit(20",{"_index":1746,"title":{},"name":{},"text":{"25":{}},"component":{}}],["limit(3",{"_index":411,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["limit(5",{"_index":943,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{}}],["limit(50",{"_index":513,"title":{},"name":{},"text":{"3":{}},"component":{}}],["limit(page_s",{"_index":640,"title":{},"name":{},"text":{"4":{}},"component":{}}],["limit/skip",{"_index":1744,"title":{},"name":{},"text":{"25":{}},"component":{}}],["line",{"_index":1732,"title":{},"name":{},"text":{"25":{},"26":{}},"component":{}}],["list",{"_index":242,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"9":{},"12":{},"13":{},"14":{},"17":{},"21":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["list::stream",{"_index":1487,"title":{},"name":{},"text":{"21":{}},"component":{}}],["local",{"_index":625,"title":{},"name":{},"text":{"4":{}},"component":{}}],["locald",{"_index":1218,"title":{},"name":{},"text":{"14":{}},"component":{}}],["localdatetim",{"_index":1219,"title":{},"name":{},"text":{"14":{}},"component":{}}],["localtim",{"_index":1220,"title":{},"name":{},"text":{"14":{}},"component":{}}],["locat",{"_index":623,"title":{},"name":{},"text":{"4":{},"19":{}},"component":{}}],["logic",{"_index":971,"title":{},"name":{},"text":{"11":{}},"component":{}}],["long",{"_index":101,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"21":{}},"component":{}}],["longequalpred",{"_index":1230,"title":{},"name":{},"text":{"15":{}},"component":{}}],["longer",{"_index":241,"title":{},"name":{},"text":{"2":{},"3":{},"21":{},"23":{}},"component":{}}],["longfield",{"_index":1209,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["longfilm",{"_index":265,"title":{},"name":{},"text":{"2":{}},"component":{}}],["longgreaterthanpred",{"_index":1236,"title":{},"name":{},"text":{"15":{}},"component":{}}],["longstream",{"_index":679,"title":{},"name":{},"text":{"4":{},"21":{},"24":{}},"component":{}}],["longstream.of(1",{"_index":1531,"title":{},"name":{},"text":{"21":{}},"component":{}}],["longstream.of(3",{"_index":1532,"title":{},"name":{},"text":{"21":{}},"component":{}}],["longstream`",{"_index":1509,"title":{},"name":{},"text":{"21":{}},"component":{}}],["look",{"_index":450,"title":{},"name":{},"text":{"3":{},"10":{},"18":{}},"component":{}}],["lower",{"_index":1476,"title":{},"name":{},"text":{"21":{}},"component":{}}],["made",{"_index":275,"title":{},"name":{},"text":{"2":{},"17":{},"25":{}},"component":{}}],["main",{"_index":35,"title":{},"name":{},"text":{"2":{},"7":{},"18":{},"19":{}},"component":{}}],["main(str",{"_index":97,"title":{},"name":{},"text":{"2":{}},"component":{}}],["make",{"_index":81,"title":{},"name":{},"text":{"2":{},"4":{},"9":{},"10":{},"25":{}},"component":{}}],["manag",{"_index":112,"title":{},"name":{},"text":{"2":{}},"component":{}}],["mani",{"_index":229,"title":{"4-9":{},"4-10":{},"4-11":{}},"name":{},"text":{"2":{},"3":{},"4":{},"21":{},"24":{},"25":{}},"component":{}}],["manner",{"_index":1573,"title":{},"name":{},"text":{"23":{}},"component":{}}],["manual",{"_index":1331,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["manytomany(cascad",{"_index":695,"title":{},"name":{},"text":{"4":{}},"component":{}}],["manytomany(mappedbi",{"_index":714,"title":{},"name":{},"text":{"4":{}},"component":{}}],["manytoon",{"_index":692,"title":{},"name":{},"text":{"4":{}},"component":{}}],["map",{"_index":228,"title":{"4-5":{},"21-3":{},"21-15":{},"21-21":{}},"name":{},"text":{"2":{},"3":{},"4":{},"14":{},"19":{},"21":{},"24":{},"26":{}},"component":{}}],["map(",{"_index":1473,"title":{},"name":{},"text":{"21":{}},"component":{}}],["map(film$.r",{"_index":566,"title":{},"name":{},"text":{"3":{}},"component":{}}],["map(film$.titl",{"_index":1608,"title":{},"name":{},"text":{"23":{}},"component":{}}],["map(projection.select",{"_index":367,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["map(projection.select(film$.filmid",{"_index":666,"title":{},"name":{},"text":{"4":{}},"component":{}}],["map(titlelength::new",{"_index":590,"title":{},"name":{},"text":{"3":{}},"component":{}}],["map.foreach((k",{"_index":523,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["mapmulti",{"_index":1446,"title":{"21-22":{}},"name":{},"text":{"21":{}},"component":{}}],["mapmulti((i",{"_index":1549,"title":{},"name":{},"text":{"21":{}},"component":{}}],["mapmultitodoubl",{"_index":1447,"title":{"21-23":{}},"name":{},"text":{"21":{}},"component":{}}],["mapmultitoint",{"_index":1448,"title":{"21-24":{}},"name":{},"text":{"21":{}},"component":{}}],["mapmultitolong",{"_index":1449,"title":{"21-25":{}},"name":{},"text":{"21":{}},"component":{}}],["mapper",{"_index":1488,"title":{},"name":{},"text":{"21":{}},"component":{}}],["mapper.accept(i",{"_index":1550,"title":{},"name":{},"text":{"21":{}},"component":{}}],["mapper.accept(i.longvalu",{"_index":1553,"title":{},"name":{},"text":{"21":{}},"component":{}}],["maptodoubl",{"_index":599,"title":{"21-18":{}},"name":{},"text":{"3":{},"4":{},"21":{}},"component":{}}],["maptodouble(",{"_index":1521,"title":{},"name":{},"text":{"21":{}},"component":{}}],["maptoint",{"_index":597,"title":{"21-16":{}},"name":{},"text":{"3":{},"4":{},"21":{}},"component":{}}],["maptoint(",{"_index":1511,"title":{},"name":{},"text":{"21":{}},"component":{}}],["maptoint(film$.filmid",{"_index":570,"title":{},"name":{},"text":{"3":{}},"component":{}}],["maptoint(film$.length.asint",{"_index":681,"title":{},"name":{},"text":{"4":{}},"component":{}}],["maptolong",{"_index":598,"title":{"21-17":{}},"name":{},"text":{"3":{},"4":{},"21":{}},"component":{}}],["maptolong(",{"_index":1516,"title":{},"name":{},"text":{"21":{}},"component":{}}],["mark",{"_index":1727,"title":{},"name":{},"text":{"25":{}},"component":{}}],["match",{"_index":610,"title":{},"name":{},"text":{"3":{},"4":{},"18":{},"21":{},"24":{}},"component":{}}],["materi",{"_index":931,"title":{},"name":{},"text":{"10":{}},"component":{}}],["matter",{"_index":510,"title":{},"name":{},"text":{"3":{},"25":{}},"component":{}}],["maven",{"_index":808,"title":{"8":{},"5-2":{},"9-2":{},"18-2":{}},"name":{"8":{}},"text":{"5":{},"8":{},"9":{},"18":{},"25":{}},"component":{}}],["maven/gradl",{"_index":1403,"title":{},"name":{},"text":{"19":{}},"component":{}}],["mavencentr",{"_index":831,"title":{},"name":{},"text":{"5":{},"7":{},"9":{},"18":{}},"component":{}}],["max",{"_index":1616,"title":{"24-6":{}},"name":{},"text":{"24":{}},"component":{}}],["max(string::compareto",{"_index":1651,"title":{},"name":{},"text":{"24":{}},"component":{}}],["max=4",{"_index":1684,"title":{},"name":{},"text":{"24":{}},"component":{}}],["maxresult",{"_index":1738,"title":{},"name":{},"text":{"25":{}},"component":{}}],["mean",{"_index":256,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"11":{},"12":{},"13":{},"14":{},"17":{},"18":{},"19":{},"23":{},"25":{},"26":{}},"component":{}}],["measur",{"_index":1676,"title":{},"name":{},"text":{"24":{}},"component":{}}],["mention",{"_index":1748,"title":{},"name":{},"text":{"25":{}},"component":{}}],["mere",{"_index":847,"title":{},"name":{},"text":{"7":{},"8":{},"10":{}},"component":{}}],["metamodel",{"_index":864,"title":{"10-2":{},"25-1":{},"25-2":{},"25-5":{},"25-7":{}},"name":{},"text":{"7":{},"8":{},"10":{},"14":{},"18":{},"19":{},"25":{}},"component":{}}],["method",{"_index":36,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"21":{},"24":{}},"component":{}}],["michael",{"_index":788,"title":{},"name":{},"text":{"4":{}},"component":{}}],["min",{"_index":1615,"title":{"24-5":{}},"name":{},"text":{"24":{}},"component":{}}],["min(string::compareto",{"_index":1648,"title":{},"name":{},"text":{"24":{}},"component":{}}],["min=1",{"_index":1682,"title":{},"name":{},"text":{"24":{}},"component":{}}],["min=2147483647",{"_index":1687,"title":{},"name":{},"text":{"24":{}},"component":{}}],["mind",{"_index":819,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["minim",{"_index":849,"title":{},"name":{},"text":{"7":{},"8":{}},"component":{}}],["minut",{"_index":439,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"18":{},"19":{}},"component":{}}],["misus",{"_index":337,"title":{},"name":{},"text":{"2":{}},"component":{}}],["model",{"_index":356,"title":{},"name":{},"text":{"3":{},"4":{},"18":{}},"component":{}}],["modif",{"_index":204,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["modul",{"_index":876,"title":{"9-1":{}},"name":{},"text":{"9":{}},"component":{}}],["moon",{"_index":467,"title":{},"name":{},"text":{"3":{}},"component":{}}],["more",{"_index":182,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"14":{},"19":{},"21":{},"23":{},"24":{},"26":{}},"component":{}}],["motion",{"_index":1039,"title":{},"name":{},"text":{"12":{}},"component":{}}],["movi",{"_index":358,"title":{},"name":{},"text":{"3":{},"4":{},"18":{}},"component":{}}],["mpaa",{"_index":1042,"title":{},"name":{},"text":{"12":{}},"component":{}}],["ms",{"_index":322,"title":{},"name":{},"text":{"2":{}},"component":{}}],["multi",{"_index":1444,"title":{"21-21":{}},"name":{},"text":{},"component":{}}],["multipl",{"_index":70,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"9":{},"21":{}},"component":{}}],["mvn",{"_index":1716,"title":{},"name":{},"text":{"25":{}},"component":{}}],["mysql",{"_index":65,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"16":{},"18":{}},"component":{}}],["n",{"_index":405,"title":{},"name":{},"text":{"3":{},"4":{},"12":{},"16":{},"17":{}},"component":{}}],["n.length",{"_index":1591,"title":{},"name":{},"text":{"23":{}},"component":{}}],["n/a",{"_index":1249,"title":{},"name":{},"text":{"16":{}},"component":{}}],["name",{"_index":11,"title":{"2-2":{},"18-8":{},"18-9":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"12":{},"18":{},"19":{},"20":{},"25":{}},"component":{}}],["narrow",{"_index":930,"title":{},"name":{},"text":{"10":{}},"component":{}}],["natur",{"_index":511,"title":{},"name":{},"text":{"3":{},"21":{},"23":{},"26":{}},"component":{}}],["nc",{"_index":534,"title":{},"name":{},"text":{"3":{},"4":{},"12":{}},"component":{}}],["near",{"_index":1713,"title":{},"name":{},"text":{"25":{}},"component":{}}],["necessari",{"_index":285,"title":{},"name":{},"text":{"2":{},"21":{}},"component":{}}],["need",{"_index":30,"title":{},"name":{},"text":{"2":{},"3":{},"7":{},"8":{},"9":{},"10":{},"18":{},"19":{},"22":{},"23":{},"25":{},"26":{}},"component":{}}],["negat",{"_index":1096,"title":{"13":{}},"name":{"13":{}},"text":{"13":{},"14":{},"17":{}},"component":{}}],["never",{"_index":1032,"title":{},"name":{},"text":{"12":{},"17":{}},"component":{}}],["new",{"_index":110,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"12":{},"21":{},"24":{},"25":{}},"component":{}}],["next",{"_index":21,"title":{"2-9":{},"18-10":{}},"name":{},"text":{"2":{},"23":{}},"component":{}}],["nick",{"_index":770,"title":{},"name":{},"text":{"4":{}},"component":{}}],["noin",{"_index":1094,"title":{},"name":{},"text":{"12":{}},"component":{}}],["nolongfilm",{"_index":514,"title":{},"name":{},"text":{"3":{}},"component":{}}],["non",{"_index":1255,"title":{},"name":{},"text":{"16":{}},"component":{}}],["nonematch",{"_index":1618,"title":{"24-9":{}},"name":{},"text":{"24":{}},"component":{}}],["nonematch(\"a\"::equ",{"_index":1657,"title":{},"name":{},"text":{"24":{}},"component":{}}],["nonematch(\"z\"::equ",{"_index":1658,"title":{},"name":{},"text":{"24":{}},"component":{}}],["north",{"_index":428,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["notat",{"_index":1279,"title":{},"name":{},"text":{"17":{}},"component":{}}],["notbetween",{"_index":1010,"title":{"12-8":{}},"name":{},"text":{"12":{}},"component":{}}],["notbetween(",{"_index":1118,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notcontain",{"_index":1266,"title":{"17-15":{}},"name":{},"text":{"17":{}},"component":{}}],["notcontains(p",{"_index":1147,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notcontains(p).neg",{"_index":1148,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notcontainsignorecas",{"_index":1268,"title":{"17-17":{}},"name":{},"text":{"17":{}},"component":{}}],["notcontainsignorecase(p",{"_index":1151,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notcontainsignorecase(p).neg",{"_index":1152,"title":{},"name":{},"text":{"13":{}},"component":{}}],["note",{"_index":508,"title":{},"name":{},"text":{"3":{},"10":{},"12":{},"18":{},"21":{},"23":{},"25":{}},"component":{}}],["notendswith",{"_index":1263,"title":{"17-11":{}},"name":{},"text":{"17":{}},"component":{}}],["notendswith(p",{"_index":1141,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notendswith(p).neg",{"_index":1142,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notendswithignorecas",{"_index":1265,"title":{"17-13":{}},"name":{},"text":{"17":{}},"component":{}}],["notendswithignorecase(p",{"_index":1145,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notequ",{"_index":1006,"title":{"12-3":{}},"name":{},"text":{"12":{}},"component":{}}],["notequal(p",{"_index":1105,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notequal(p).neg",{"_index":1106,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notequalignorecas",{"_index":1258,"title":{"17-5":{}},"name":{},"text":{"17":{}},"component":{}}],["notequalignorecase(p",{"_index":1129,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notequalignorecase(p).neg",{"_index":1130,"title":{},"name":{},"text":{"13":{}},"component":{}}],["noth",{"_index":1593,"title":{},"name":{},"text":{"23":{}},"component":{}}],["notifi",{"_index":1327,"title":{},"name":{},"text":{"18":{},"20":{}},"component":{}}],["notin",{"_index":1011,"title":{"12-10":{}},"name":{},"text":{"12":{}},"component":{}}],["notin(a",{"_index":1122,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notstartswith",{"_index":1259,"title":{"17-7":{}},"name":{},"text":{"17":{}},"component":{}}],["notstartswith(p",{"_index":1133,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notstartswith(p).neg",{"_index":1134,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notstartswithignorecas",{"_index":1261,"title":{"17-9":{}},"name":{},"text":{"17":{}},"component":{}}],["notstartswithignorecase(p",{"_index":1137,"title":{},"name":{},"text":{"13":{}},"component":{}}],["notstartswithignorecase(p).neg",{"_index":1138,"title":{},"name":{},"text":{"13":{}},"component":{}}],["now",{"_index":564,"title":{},"name":{},"text":{"3":{},"9":{},"18":{},"25":{}},"component":{}}],["nroffilmsstartingwitha",{"_index":923,"title":{},"name":{},"text":{"10":{}},"component":{}}],["null",{"_index":655,"title":{},"name":{},"text":{"4":{},"12":{},"16":{},"17":{}},"component":{}}],["nullabl",{"_index":694,"title":{},"name":{},"text":{"4":{},"10":{},"16":{},"19":{}},"component":{}}],["number",{"_index":350,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{},"13":{},"15":{},"17":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["numer",{"_index":618,"title":{"4-6":{}},"name":{},"text":{"4":{}},"component":{}}],["object",{"_index":225,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"12":{},"14":{},"19":{}},"component":{}}],["objects.equals(p",{"_index":1017,"title":{},"name":{},"text":{"12":{}},"component":{}}],["obtain",{"_index":7,"title":{"2-1":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"14":{},"19":{},"21":{},"24":{},"26":{}},"component":{}}],["occur",{"_index":712,"title":{},"name":{},"text":{"4":{}},"component":{}}],["occurr",{"_index":541,"title":{},"name":{},"text":{"3":{}},"component":{}}],["of(class",{"_index":207,"title":{},"name":{},"text":{"2":{}},"component":{}}],["of(film.class",{"_index":607,"title":{},"name":{},"text":{"3":{}},"component":{}}],["offer",{"_index":186,"title":{},"name":{},"text":{"2":{}},"component":{}}],["offici",{"_index":1178,"title":{},"name":{},"text":{"14":{}},"component":{}}],["offset",{"_index":345,"title":{"3-6":{},"3-8":{}},"name":{},"text":{"3":{}},"component":{}}],["omit",{"_index":1556,"title":{},"name":{},"text":{"21":{},"25":{}},"component":{}}],["on",{"_index":62,"title":{"4-9":{},"4-10":{}},"name":{},"text":{"2":{},"3":{},"4":{},"18":{},"20":{},"21":{},"24":{},"26":{}},"component":{}}],["onc",{"_index":31,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"18":{},"21":{},"23":{}},"component":{}}],["onclos",{"_index":1441,"title":{"21-14":{}},"name":{},"text":{"21":{}},"component":{}}],["onetomany(mappedbi",{"_index":711,"title":{},"name":{},"text":{"4":{}},"component":{}}],["open",{"_index":268,"title":{"19-1":{}},"name":{},"text":{"2":{},"25":{}},"component":{}}],["oper",{"_index":238,"title":{"21":{},"22":{},"24":{},"4-5":{},"21-1":{},"21-10":{},"21-15":{},"21-21":{},"21-26":{},"21-30":{},"24-1":{},"24-14":{},"24-19":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"16":{},"17":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["oppos",{"_index":1639,"title":{},"name":{},"text":{"24":{}},"component":{}}],["optim",{"_index":287,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"14":{},"21":{},"24":{}},"component":{}}],["option",{"_index":133,"title":{},"name":{},"text":{"2":{},"25":{},"26":{}},"component":{}}],["optional.empti",{"_index":221,"title":{},"name":{},"text":{"2":{},"24":{}},"component":{}}],["optional[10",{"_index":1671,"title":{},"name":{},"text":{"24":{}},"component":{}}],["optional[a",{"_index":1649,"title":{},"name":{},"text":{"24":{}},"component":{}}],["optional[b",{"_index":1659,"title":{},"name":{},"text":{"24":{}},"component":{}}],["optional[c",{"_index":1652,"title":{},"name":{},"text":{"24":{}},"component":{}}],["optional[filmimpl",{"_index":442,"title":{},"name":{},"text":{"3":{}},"component":{}}],["optionaldouble.empti",{"_index":1679,"title":{},"name":{},"text":{"24":{}},"component":{}}],["optionaldouble[2.5",{"_index":1677,"title":{},"name":{},"text":{"24":{}},"component":{}}],["order",{"_index":344,"title":{"3-5":{}},"name":{},"text":{"3":{},"4":{},"10":{},"12":{},"19":{},"21":{},"23":{},"24":{}},"component":{}}],["ordinari",{"_index":939,"title":{},"name":{},"text":{"10":{},"21":{},"24":{}},"component":{}}],["org.apache.maven.plugin",{"_index":1369,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["org.codehaus.mojo",{"_index":869,"title":{},"name":{},"text":{"8":{},"18":{},"25":{}},"component":{}}],["org.hibernate.jpa.hibernatepersistenceprovid",{"_index":67,"title":{},"name":{},"text":{"2":{},"18":{}},"component":{}}],["origin",{"_index":575,"title":{},"name":{},"text":{"3":{},"13":{},"18":{},"21":{}},"component":{}}],["oscar",{"_index":1589,"title":{},"name":{},"text":{"23":{}},"component":{}}],["other",{"_index":1419,"title":{},"name":{},"text":{"20":{}},"component":{}}],["other_oper",{"_index":1567,"title":{},"name":{"22":{}},"text":{},"component":{}}],["otherwis",{"_index":1168,"title":{},"name":{},"text":{"14":{},"18":{}},"component":{}}],["out",{"_index":203,"title":{},"name":{},"text":{"2":{},"3":{},"11":{},"18":{},"20":{},"21":{},"25":{}},"component":{}}],["output",{"_index":413,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{},"14":{},"16":{},"17":{},"18":{},"23":{},"24":{},"25":{}},"component":{}}],["outsid",{"_index":1087,"title":{},"name":{},"text":{"12":{}},"component":{}}],["over",{"_index":197,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"17":{},"24":{}},"component":{}}],["overrid",{"_index":588,"title":{},"name":{},"text":{"3":{}},"component":{}}],["overus",{"_index":338,"title":{},"name":{},"text":{"2":{}},"component":{}}],["overview",{"_index":354,"title":{},"name":{},"text":{"3":{},"19":{}},"component":{}}],["p",{"_index":1018,"title":{},"name":{},"text":{"12":{}},"component":{}}],["p.contains(field",{"_index":1031,"title":{},"name":{},"text":{"12":{}},"component":{}}],["p1",{"_index":1022,"title":{},"name":{},"text":{"12":{}},"component":{}}],["p2",{"_index":1024,"title":{},"name":{},"text":{"12":{}},"component":{}}],["packag",{"_index":891,"title":{"18-8":{}},"name":{},"text":{"9":{},"10":{},"18":{},"25":{}},"component":{}}],["page",{"_index":615,"title":{"4-1":{},"25-8":{}},"name":{},"text":{"4":{},"25":{}},"component":{}}],["page_s",{"_index":635,"title":{},"name":{},"text":{"4":{}},"component":{}}],["panach",{"_index":151,"title":{},"name":{},"text":{"2":{}},"component":{}}],["panacheentitybas",{"_index":154,"title":{},"name":{},"text":{"2":{}},"component":{}}],["panacherepositori",{"_index":148,"title":{},"name":{},"text":{"2":{}},"component":{}}],["parallel",{"_index":1438,"title":{"21-11":{}},"name":{},"text":{"21":{},"22":{},"24":{},"26":{}},"component":{}}],["param",{"_index":1016,"title":{},"name":{},"text":{"12":{},"16":{},"17":{}},"component":{}}],["paramet",{"_index":634,"title":{"24-15":{}},"name":{},"text":{"4":{},"9":{},"12":{},"14":{},"17":{},"18":{},"21":{},"24":{},"25":{}},"component":{}}],["parameter(",{"_index":1628,"title":{},"name":{},"text":{"24":{}},"component":{}}],["parent",{"_index":1044,"title":{},"name":{},"text":{"12":{}},"component":{}}],["part",{"_index":621,"title":{},"name":{},"text":{"4":{},"10":{},"14":{},"19":{},"20":{}},"component":{}}],["parti",{"_index":812,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["particip",{"_index":753,"title":{},"name":{},"text":{"4":{}},"component":{}}],["particular",{"_index":1499,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["partit",{"_index":616,"title":{"4-2":{}},"name":{},"text":{"4":{}},"component":{}}],["partition",{"_index":646,"title":{},"name":{},"text":{"4":{}},"component":{}}],["partli",{"_index":1198,"title":{},"name":{},"text":{"14":{}},"component":{}}],["pass",{"_index":170,"title":{},"name":{},"text":{"2":{},"3":{},"14":{},"19":{},"21":{},"23":{}},"component":{}}],["past",{"_index":1755,"title":{},"name":{},"text":{"25":{}},"component":{}}],["path",{"_index":866,"title":{},"name":{},"text":{"7":{},"8":{},"18":{},"25":{}},"component":{}}],["pattern",{"_index":1365,"title":{},"name":{},"text":{"18":{},"22":{}},"component":{}}],["peek",{"_index":1437,"title":{"21-9":{}},"name":{},"text":{"21":{}},"component":{}}],["peek(system.out::print",{"_index":1489,"title":{},"name":{},"text":{"21":{}},"component":{}}],["per",{"_index":1460,"title":{},"name":{},"text":{"21":{}},"component":{}}],["perform",{"_index":169,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"14":{},"15":{},"18":{},"20":{},"21":{},"24":{}},"component":{}}],["permit",{"_index":142,"title":{},"name":{},"text":{"2":{}},"component":{}}],["persist",{"_index":9,"title":{"2-2":{}},"name":{},"text":{"2":{},"3":{},"18":{},"19":{},"20":{}},"component":{}}],["persistence.createentitymanagerfactory(\"sakila",{"_index":125,"title":{},"name":{},"text":{"2":{},"20":{}},"component":{}}],["pg",{"_index":529,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{}},"component":{}}],["pg=15",{"_index":804,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pg=194",{"_index":552,"title":{},"name":{},"text":{"3":{}},"component":{}}],["pg=4",{"_index":793,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pg=6",{"_index":798,"title":{},"name":{},"text":{"4":{}},"component":{}}],["pick",{"_index":863,"title":{},"name":{},"text":{"7":{},"8":{},"18":{}},"component":{}}],["pictur",{"_index":1040,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pipelin",{"_index":448,"title":{},"name":{},"text":{"3":{},"10":{},"19":{},"21":{},"23":{},"24":{},"25":{}},"component":{}}],["pitfal",{"_index":1696,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pivot",{"_index":620,"title":{"4-12":{}},"name":{},"text":{"4":{}},"component":{}}],["place",{"_index":69,"title":{},"name":{},"text":{"2":{},"10":{},"18":{}},"component":{}}],["plan",{"_index":296,"title":{},"name":{},"text":{"2":{}},"component":{}}],["play",{"_index":289,"title":{},"name":{},"text":{"2":{}},"component":{}}],["pleas",{"_index":1703,"title":{},"name":{},"text":{"25":{}},"component":{}}],["plugin",{"_index":871,"title":{},"name":{},"text":{"8":{},"18":{},"25":{}},"component":{}}],["point",{"_index":1581,"title":{},"name":{},"text":{"23":{},"25":{}},"component":{}}],["pollock",{"_index":1057,"title":{},"name":{},"text":{"12":{}},"component":{}}],["pom.xml",{"_index":827,"title":{},"name":{},"text":{"5":{},"8":{},"9":{},"18":{}},"component":{}}],["popular",{"_index":1768,"title":{},"name":{},"text":{"26":{}},"component":{}}],["possibl",{"_index":723,"title":{},"name":{},"text":{"4":{},"10":{},"14":{},"23":{}},"component":{}}],["post",{"_index":314,"title":{},"name":{},"text":{"2":{}},"component":{}}],["potenti",{"_index":248,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"18":{}},"component":{}}],["power",{"_index":331,"title":{},"name":{},"text":{"2":{}},"component":{}}],["practic",{"_index":1697,"title":{},"name":{},"text":{"25":{}},"component":{}}],["pre",{"_index":1408,"title":{},"name":{},"text":{"19":{}},"component":{}}],["predic",{"_index":904,"title":{"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"13-1":{},"13-2":{},"13-3":{},"14-1":{}},"name":{"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{}},"text":{"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"21":{},"24":{}},"component":{}}],["predicate::neg",{"_index":1281,"title":{},"name":{},"text":{"17":{}},"component":{}}],["predicate::or",{"_index":1003,"title":{},"name":{},"text":{"11":{}},"component":{}}],["prefer",{"_index":838,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["prefix",{"_index":1361,"title":{},"name":{},"text":{"18":{}},"component":{}}],["prejudic",{"_index":1055,"title":{},"name":{},"text":{"12":{},"18":{}},"component":{}}],["present",{"_index":144,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"9":{},"16":{}},"component":{}}],["prevent",{"_index":732,"title":{},"name":{},"text":{"4":{}},"component":{}}],["previou",{"_index":554,"title":{},"name":{},"text":{"3":{},"4":{},"23":{}},"component":{}}],["previous",{"_index":553,"title":{},"name":{},"text":{"3":{}},"component":{}}],["primit",{"_index":657,"title":{"15":{},"21-15":{},"21-26":{},"24-19":{}},"name":{"15":{}},"text":{"4":{},"14":{},"15":{},"16":{},"21":{},"24":{}},"component":{}}],["princess",{"_index":769,"title":{},"name":{},"text":{"4":{}},"component":{}}],["print",{"_index":491,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{},"14":{},"17":{},"19":{},"21":{},"22":{}},"component":{}}],["prior",{"_index":1707,"title":{},"name":{},"text":{"25":{}},"component":{}}],["privat",{"_index":159,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"10":{},"16":{},"18":{},"19":{},"20":{}},"component":{}}],["problem",{"_index":406,"title":{},"name":{},"text":{"3":{},"4":{},"25":{}},"component":{}}],["process",{"_index":29,"title":{"19-1":{}},"name":{},"text":{"2":{},"5":{},"9":{},"10":{},"18":{},"23":{},"25":{},"26":{}},"component":{}}],["processor",{"_index":899,"title":{"10-1":{},"25-4":{},"25-6":{}},"name":{},"text":{"10":{},"18":{},"25":{}},"component":{}}],["produc",{"_index":215,"title":{"5-1":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"11":{},"12":{},"14":{},"16":{},"17":{}},"component":{}}],["programm",{"_index":1664,"title":{},"name":{},"text":{"24":{}},"component":{}}],["progress",{"_index":1752,"title":{},"name":{},"text":{"25":{}},"component":{}}],["prohibit",{"_index":1719,"title":{},"name":{},"text":{"25":{}},"component":{}}],["project",{"_index":59,"title":{"4-3":{},"18-4":{},"25-3":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"10":{},"18":{},"19":{},"25":{}},"component":{}}],["project.build.directory}/gener",{"_index":873,"title":{},"name":{},"text":{"8":{},"18":{},"25":{}},"component":{}}],["project’",{"_index":826,"title":{},"name":{},"text":{"5":{},"7":{},"8":{},"9":{},"18":{}},"component":{}}],["prone",{"_index":1389,"title":{},"name":{},"text":{"19":{}},"component":{}}],["propag",{"_index":1496,"title":{},"name":{},"text":{"21":{},"23":{}},"component":{}}],["properli",{"_index":1721,"title":{},"name":{},"text":{"25":{}},"component":{}}],["properti",{"_index":447,"title":{"21-10":{}},"name":{},"text":{"3":{},"21":{}},"component":{}}],["provid",{"_index":37,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"8":{},"10":{},"14":{},"18":{},"19":{},"20":{},"21":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["provider.h",{"_index":685,"title":{},"name":{},"text":{"4":{}},"component":{}}],["public",{"_index":94,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"9":{},"10":{},"16":{},"18":{},"19":{},"20":{}},"component":{}}],["pull",{"_index":454,"title":{},"name":{},"text":{"3":{},"14":{},"23":{}},"component":{}}],["pure",{"_index":1607,"title":{},"name":{},"text":{"23":{}},"component":{}}],["push",{"_index":1601,"title":{},"name":{},"text":{"23":{}},"component":{}}],["put",{"_index":1378,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["queri",{"_index":18,"title":{"2-8":{},"25-8":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"14":{},"19":{},"23":{},"25":{},"26":{}},"component":{}}],["question",{"_index":577,"title":{},"name":{},"text":{"3":{},"25":{}},"component":{}}],["quick",{"_index":1313,"title":{"18":{}},"name":{"18":{}},"text":{"18":{},"19":{}},"component":{}}],["quickli",{"_index":820,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["quill",{"_index":483,"title":{},"name":{},"text":{"3":{}},"component":{}}],["r",{"_index":532,"title":{},"name":{},"text":{"3":{},"12":{},"20":{}},"component":{}}],["r=195",{"_index":549,"title":{},"name":{},"text":{"3":{}},"component":{}}],["r=2",{"_index":802,"title":{},"name":{},"text":{"4":{}},"component":{}}],["r=3",{"_index":791,"title":{},"name":{},"text":{"4":{}},"component":{}}],["rang",{"_index":1077,"title":{},"name":{},"text":{"12":{}},"component":{}}],["rate",{"_index":519,"title":{},"name":{},"text":{"3":{},"4":{},"11":{},"12":{},"16":{},"19":{},"20":{}},"component":{}}],["rating5_0_",{"_index":953,"title":{},"name":{},"text":{"10":{}},"component":{}}],["rating='nul",{"_index":423,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["read",{"_index":319,"title":{},"name":{},"text":{"2":{},"3":{},"10":{},"14":{},"19":{},"23":{},"26":{}},"component":{}}],["readi",{"_index":88,"title":{},"name":{},"text":{"2":{}},"component":{}}],["realiti",{"_index":706,"title":{},"name":{},"text":{"4":{}},"component":{}}],["reap",{"_index":1770,"title":{},"name":{},"text":{"26":{}},"component":{}}],["reason",{"_index":1034,"title":{},"name":{},"text":{"12":{},"14":{},"15":{},"25":{}},"component":{}}],["rebuild",{"_index":1701,"title":{},"name":{},"text":{"25":{}},"component":{}}],["rebuilt",{"_index":1692,"title":{"25-3":{}},"name":{},"text":{"25":{}},"component":{}}],["receiv",{"_index":1605,"title":{},"name":{},"text":{"23":{}},"component":{}}],["recip",{"_index":1578,"title":{},"name":{},"text":{"23":{}},"component":{}}],["recogn",{"_index":1187,"title":{},"name":{},"text":{"14":{},"18":{},"25":{}},"component":{}}],["recogniz",{"_index":1192,"title":{},"name":{},"text":{"14":{}},"component":{}}],["recommend",{"_index":258,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"14":{},"25":{}},"component":{}}],["record",{"_index":488,"title":{},"name":{},"text":{"3":{}},"component":{}}],["reduc",{"_index":1622,"title":{"24-16":{}},"name":{},"text":{"24":{},"26":{}},"component":{}}],["reduce((a",{"_index":1670,"title":{},"name":{},"text":{"24":{}},"component":{}}],["reduce(100",{"_index":1672,"title":{},"name":{},"text":{"24":{}},"component":{}}],["reduct",{"_index":1629,"title":{},"name":{},"text":{"24":{}},"component":{}}],["refer",{"_index":56,"title":{"16":{},"13-1":{}},"name":{"16":{}},"text":{"2":{},"3":{},"10":{},"14":{},"16":{},"17":{},"18":{},"20":{},"21":{},"24":{},"25":{}},"component":{}}],["referenc",{"_index":1252,"title":{},"name":{},"text":{"16":{}},"component":{}}],["referencefield",{"_index":1012,"title":{},"name":{},"text":{"12":{},"14":{},"15":{},"16":{},"17":{}},"component":{}}],["regard",{"_index":668,"title":{},"name":{},"text":{"4":{}},"component":{}}],["regardless",{"_index":592,"title":{},"name":{},"text":{"3":{}},"component":{}}],["regular",{"_index":1400,"title":{},"name":{},"text":{"19":{}},"component":{}}],["relat",{"_index":619,"title":{"4-9":{},"4-10":{},"4-11":{}},"name":{},"text":{"4":{},"14":{},"19":{},"25":{}},"component":{}}],["relationship",{"_index":612,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["relax",{"_index":1501,"title":{},"name":{},"text":{"21":{}},"component":{}}],["releas",{"_index":673,"title":{},"name":{},"text":{"4":{},"18":{},"22":{},"25":{}},"component":{}}],["release.a",{"_index":683,"title":{},"name":{},"text":{"4":{}},"component":{}}],["relev",{"_index":375,"title":{},"name":{},"text":{"3":{}},"component":{}}],["reli",{"_index":843,"title":{},"name":{},"text":{"5":{},"9":{},"18":{}},"component":{}}],["remain",{"_index":1404,"title":{},"name":{},"text":{"19":{},"23":{},"26":{}},"component":{}}],["rememb",{"_index":509,"title":{},"name":{},"text":{"3":{}},"component":{}}],["render",{"_index":901,"title":{"10-3":{}},"name":{},"text":{"10":{},"14":{},"19":{},"23":{}},"component":{}}],["rental",{"_index":359,"title":{},"name":{},"text":{"3":{},"4":{},"18":{},"20":{}},"component":{}}],["rental_d6_0_",{"_index":955,"title":{},"name":{},"text":{"10":{}},"component":{}}],["rental_r",{"_index":1421,"title":{},"name":{},"text":{"20":{}},"component":{}}],["rental_r7_0_",{"_index":957,"title":{},"name":{},"text":{"10":{}},"component":{}}],["rentalduration=nul",{"_index":419,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["rentalr",{"_index":1420,"title":{},"name":{},"text":{"20":{}},"component":{}}],["rentalrate=nul",{"_index":420,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["repeat",{"_index":257,"title":{},"name":{},"text":{"2":{}},"component":{}}],["repetit",{"_index":1758,"title":{"26-2":{}},"name":{},"text":{},"component":{}}],["replac",{"_index":51,"title":{},"name":{},"text":{"2":{},"3":{},"18":{},"19":{},"21":{},"24":{},"26":{}},"component":{}}],["replacem8_0_",{"_index":959,"title":{},"name":{},"text":{"10":{}},"component":{}}],["replacementcost=nul",{"_index":422,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["repositori",{"_index":830,"title":{},"name":{},"text":{"5":{},"7":{},"9":{},"18":{},"19":{}},"component":{}}],["repres",{"_index":376,"title":{},"name":{},"text":{"3":{},"10":{},"11":{},"14":{},"18":{},"23":{}},"component":{}}],["represent",{"_index":912,"title":{},"name":{},"text":{"10":{},"21":{},"23":{}},"component":{}}],["request",{"_index":629,"title":{},"name":{},"text":{"4":{},"23":{}},"component":{}}],["requir",{"_index":301,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"15":{},"18":{},"21":{},"24":{}},"component":{}}],["rerun",{"_index":1720,"title":{},"name":{},"text":{"25":{}},"component":{}}],["resid",{"_index":1708,"title":{},"name":{},"text":{"25":{}},"component":{}}],["resolut",{"_index":1756,"title":{},"name":{},"text":{"25":{}},"component":{}}],["resolv",{"_index":664,"title":{},"name":{},"text":{"4":{}},"component":{}}],["resourc",{"_index":128,"title":{"19-4":{}},"name":{},"text":{"2":{},"18":{},"22":{}},"component":{}}],["respect",{"_index":1335,"title":{},"name":{},"text":{"18":{}},"component":{}}],["respons",{"_index":113,"title":{},"name":{},"text":{"2":{},"19":{},"25":{}},"component":{}}],["rest",{"_index":1479,"title":{},"name":{},"text":{"21":{}},"component":{}}],["restrict",{"_index":1048,"title":{},"name":{},"text":{"12":{},"25":{}},"component":{}}],["result",{"_index":452,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"11":{},"12":{},"13":{},"18":{},"19":{},"21":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["retain",{"_index":434,"title":{},"name":{},"text":{"3":{},"21":{},"23":{}},"component":{}}],["retriev",{"_index":617,"title":{"4-6":{}},"name":{},"text":{"4":{}},"component":{}}],["retrofit",{"_index":1576,"title":{},"name":{},"text":{"23":{}},"component":{}}],["return",{"_index":208,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"17":{},"21":{},"22":{},"24":{}},"component":{}}],["reus",{"_index":121,"title":{},"name":{},"text":{"2":{}},"component":{}}],["reusabl",{"_index":250,"title":{},"name":{},"text":{"2":{}},"component":{}}],["reveal",{"_index":654,"title":{},"name":{},"text":{"4":{}},"component":{}}],["revers",{"_index":1395,"title":{},"name":{},"text":{"19":{},"21":{}},"component":{}}],["ridgemont",{"_index":469,"title":{},"name":{},"text":{"3":{}},"component":{}}],["right",{"_index":1729,"title":{},"name":{},"text":{"25":{}},"component":{}}],["rollercoast",{"_index":983,"title":{},"name":{},"text":{"11":{}},"component":{}}],["root",{"_index":761,"title":{},"name":{},"text":{"4":{},"25":{}},"component":{}}],["row",{"_index":362,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"23":{}},"component":{}}],["run",{"_index":149,"title":{},"name":{},"text":{"2":{},"3":{},"14":{},"15":{},"21":{}},"component":{}}],["runnabl",{"_index":1495,"title":{},"name":{},"text":{"21":{}},"component":{}}],["runtim",{"_index":1332,"title":{},"name":{},"text":{"18":{}},"component":{}}],["s",{"_index":1020,"title":{},"name":{},"text":{"12":{},"14":{},"22":{},"24":{}},"component":{}}],["s.equals(\"b",{"_index":1472,"title":{},"name":{},"text":{"21":{}},"component":{}}],["s.foreachordered(system.out::println",{"_index":1571,"title":{},"name":{},"text":{"22":{}},"component":{}}],["s.hashcod",{"_index":1512,"title":{},"name":{},"text":{"21":{}},"component":{}}],["s.length",{"_index":1609,"title":{},"name":{},"text":{"23":{},"24":{}},"component":{}}],["s.map(i",{"_index":1529,"title":{},"name":{},"text":{"21":{}},"component":{}}],["s.startswith(\"a",{"_index":1170,"title":{},"name":{},"text":{"14":{}},"component":{}}],["s.tolowercas",{"_index":1474,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["s1).distinct",{"_index":373,"title":{},"name":{},"text":{"3":{}},"component":{}}],["safe",{"_index":579,"title":{"26-1":{}},"name":{},"text":{"3":{},"18":{},"19":{},"26":{}},"component":{}}],["sakila",{"_index":50,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"16":{},"18":{},"19":{},"20":{}},"component":{}}],["same",{"_index":176,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"11":{},"12":{},"14":{},"18":{},"23":{}},"component":{}}],["sampl",{"_index":972,"title":{},"name":{},"text":{"11":{}},"component":{}}],["satisfi",{"_index":1558,"title":{},"name":{},"text":{"21":{}},"component":{}}],["save",{"_index":249,"title":{},"name":{},"text":{"2":{}},"component":{}}],["sb0",{"_index":1667,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sb0.append(sb1",{"_index":1669,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sb1",{"_index":1668,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sc",{"_index":323,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["scan",{"_index":885,"title":{},"name":{},"text":{"9":{}},"component":{}}],["scanbasepackag",{"_index":888,"title":{},"name":{},"text":{"9":{}},"component":{}}],["scenario",{"_index":281,"title":{},"name":{},"text":{"2":{}},"component":{}}],["schema",{"_index":691,"title":{},"name":{},"text":{"4":{},"10":{},"16":{},"18":{},"19":{},"20":{}},"component":{}}],["scratch",{"_index":80,"title":{},"name":{},"text":{"2":{}},"component":{}}],["second",{"_index":641,"title":{},"name":{},"text":{"4":{},"11":{},"24":{}},"component":{}}],["secondari",{"_index":487,"title":{},"name":{},"text":{"3":{}},"component":{}}],["section",{"_index":24,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"18":{},"25":{}},"component":{}}],["see",{"_index":614,"title":{},"name":{},"text":{"3":{},"4":{},"18":{},"23":{},"26":{}},"component":{}}],["seem",{"_index":938,"title":{},"name":{},"text":{"10":{}},"component":{}}],["select",{"_index":219,"title":{"3-3":{},"3-13":{},"21-30":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"12":{},"20":{},"23":{},"25":{}},"component":{}}],["selecting(project",{"_index":222,"title":{},"name":{},"text":{"2":{}},"component":{}}],["semant",{"_index":675,"title":{},"name":{},"text":{"4":{},"14":{},"23":{}},"component":{}}],["sent",{"_index":1604,"title":{},"name":{},"text":{"23":{}},"component":{}}],["separ",{"_index":893,"title":{},"name":{},"text":{"9":{},"18":{}},"component":{}}],["sequenti",{"_index":1439,"title":{"21-12":{}},"name":{},"text":{"21":{},"22":{}},"component":{}}],["seri",{"_index":1080,"title":{},"name":{},"text":{"12":{}},"component":{}}],["serializ",{"_index":1392,"title":{},"name":{},"text":{"19":{}},"component":{}}],["serv",{"_index":628,"title":{},"name":{},"text":{"4":{}},"component":{}}],["servic",{"_index":897,"title":{},"name":{},"text":{"9":{}},"component":{}}],["set",{"_index":83,"title":{"18-7":{}},"name":{},"text":{"2":{},"3":{},"4":{},"9":{},"12":{},"14":{},"18":{},"19":{},"24":{},"25":{},"26":{}},"component":{}}],["setter",{"_index":1338,"title":{},"name":{},"text":{"18":{}},"component":{}}],["sever",{"_index":71,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"21":{}},"component":{}}],["shall",{"_index":212,"title":{},"name":{},"text":{"2":{},"17":{},"23":{}},"component":{}}],["shanghai",{"_index":478,"title":{},"name":{},"text":{"3":{}},"component":{}}],["shop",{"_index":1337,"title":{},"name":{},"text":{"18":{}},"component":{}}],["short",{"_index":647,"title":{},"name":{},"text":{"4":{},"11":{},"14":{},"15":{}},"component":{}}],["shortequalpred",{"_index":1233,"title":{},"name":{},"text":{"15":{}},"component":{}}],["shortfield",{"_index":1210,"title":{},"name":{},"text":{"14":{},"15":{}},"component":{}}],["shortfilm",{"_index":262,"title":{},"name":{},"text":{"2":{}},"component":{}}],["shortgreaterthanpred",{"_index":1234,"title":{},"name":{},"text":{"15":{}},"component":{}}],["show",{"_index":775,"title":{},"name":{},"text":{"4":{}},"component":{}}],["shown",{"_index":565,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"11":{},"18":{},"22":{},"23":{}},"component":{}}],["side",{"_index":1469,"title":{},"name":{},"text":{"21":{},"25":{}},"component":{}}],["sierra",{"_index":752,"title":{},"name":{},"text":{"4":{},"11":{},"12":{}},"component":{}}],["signific",{"_index":1084,"title":{},"name":{},"text":{"12":{}},"component":{}}],["similar",{"_index":631,"title":{},"name":{},"text":{"4":{},"21":{},"23":{},"24":{}},"component":{}}],["simpl",{"_index":188,"title":{},"name":{},"text":{"2":{},"23":{}},"component":{}}],["simplest",{"_index":45,"title":{},"name":{},"text":{"2":{}},"component":{}}],["simpli",{"_index":1247,"title":{},"name":{},"text":{"15":{},"18":{},"24":{}},"component":{}}],["simplifi",{"_index":705,"title":{},"name":{},"text":{"4":{}},"component":{}}],["singl",{"_index":194,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"19":{},"21":{}},"component":{}}],["site.data.javadoc.inclus",{"_index":1075,"title":{},"name":{},"text":{"12":{}},"component":{}}],["skip",{"_index":370,"title":{"21-7":{}},"name":{},"text":{"3":{},"19":{},"21":{},"23":{},"25":{}},"component":{}}],["skip(1",{"_index":1480,"title":{},"name":{},"text":{"21":{}},"component":{}}],["skip(10",{"_index":942,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{}}],["skip(100",{"_index":496,"title":{},"name":{},"text":{"3":{}},"component":{}}],["skip(pag",{"_index":639,"title":{},"name":{},"text":{"4":{}},"component":{}}],["skip(y).limit(x",{"_index":507,"title":{},"name":{},"text":{"3":{}},"component":{}}],["slightli",{"_index":787,"title":{},"name":{},"text":{"4":{}},"component":{}}],["smallest",{"_index":1630,"title":{},"name":{},"text":{"24":{}},"component":{}}],["smallint(5",{"_index":381,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"18":{},"19":{}},"component":{}}],["snippet",{"_index":1051,"title":{},"name":{},"text":{"12":{}},"component":{}}],["softwar",{"_index":1398,"title":{},"name":{},"text":{"19":{},"26":{}},"component":{}}],["sole",{"_index":78,"title":{},"name":{},"text":{"2":{}},"component":{}}],["solut",{"_index":1698,"title":{},"name":{},"text":{"25":{}},"component":{}}],["someth",{"_index":1244,"title":{},"name":{},"text":{"15":{}},"component":{}}],["sometim",{"_index":1722,"title":{},"name":{},"text":{"25":{}},"component":{}}],["soon",{"_index":908,"title":{},"name":{},"text":{"10":{}},"component":{}}],["sort",{"_index":369,"title":{"21-5":{}},"name":{},"text":{"3":{},"4":{},"10":{},"14":{},"19":{},"21":{},"23":{}},"component":{}}],["sorted(compar",{"_index":638,"title":{},"name":{},"text":{"4":{}},"component":{}}],["sorted(comparator.reverseord",{"_index":1477,"title":{},"name":{},"text":{"21":{}},"component":{}}],["sorted(film$.length",{"_index":328,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["sorted(film$.length.revers",{"_index":410,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["sorted(film$.length.reversed().thencomparing(film$.title.compar",{"_index":941,"title":{},"name":{},"text":{"10":{},"19":{}},"component":{}}],["sorted(film$.length.thencomparing(film$.title.compar",{"_index":486,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sorted(film$.titl",{"_index":495,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sorted(film.titl",{"_index":512,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sourc",{"_index":75,"title":{"19-1":{}},"name":{},"text":{"2":{},"3":{},"4":{},"7":{},"8":{},"10":{},"18":{},"20":{},"23":{},"25":{}},"component":{}}],["sources/annot",{"_index":1353,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["sources/annotations'(3",{"_index":862,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["sources/annotations(3",{"_index":874,"title":{},"name":{},"text":{"8":{},"18":{}},"component":{}}],["sources/annotations/com.speedment.jpastreamer.test",{"_index":1375,"title":{},"name":{},"text":{"18":{}},"component":{}}],["sources/annotations/com/foo/film$.class",{"_index":1355,"title":{},"name":{},"text":{"18":{}},"component":{}}],["sourceset",{"_index":858,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["special",{"_index":644,"title":{},"name":{},"text":{"4":{},"15":{},"21":{}},"component":{}}],["special_9_0_",{"_index":961,"title":{},"name":{},"text":{"10":{}},"component":{}}],["specialfeatures='nul",{"_index":424,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["specif",{"_index":283,"title":{},"name":{},"text":{"2":{},"18":{},"21":{},"25":{}},"component":{}}],["specifi",{"_index":606,"title":{"4-8":{}},"name":{},"text":{"3":{},"4":{},"7":{},"8":{}},"component":{}}],["spliter",{"_index":1623,"title":{"24-18":{}},"name":{},"text":{"24":{}},"component":{}}],["spoken",{"_index":704,"title":{},"name":{},"text":{"4":{}},"component":{}}],["spring",{"_index":877,"title":{"9":{}},"name":{},"text":{"9":{}},"component":{}}],["spring_integr",{"_index":878,"title":{},"name":{"9":{}},"text":{},"component":{}}],["springbootappl",{"_index":889,"title":{},"name":{},"text":{"9":{}},"component":{}}],["springbootapplication(scanbasepackages={\"com.speedment.jpastream",{"_index":890,"title":{},"name":{},"text":{"9":{}},"component":{}}],["spring’",{"_index":896,"title":{},"name":{},"text":{"9":{}},"component":{}}],["sql",{"_index":342,"title":{"3":{}},"name":{"3":{}},"text":{"2":{},"3":{},"4":{},"19":{},"23":{},"26":{}},"component":{}}],["src/main/java",{"_index":860,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["srcdir",{"_index":859,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["stack",{"_index":990,"title":{},"name":{},"text":{"11":{}},"component":{}}],["standard",{"_index":1182,"title":{},"name":{},"text":{"14":{},"18":{},"19":{},"20":{},"25":{}},"component":{}}],["standard:vers",{"_index":857,"title":{},"name":{},"text":{"7":{},"18":{}},"component":{}}],["star",{"_index":755,"title":{},"name":{},"text":{"4":{}},"component":{}}],["stare",{"_index":492,"title":{},"name":{},"text":{"3":{}},"component":{}}],["starr",{"_index":707,"title":{},"name":{},"text":{"4":{}},"component":{}}],["start",{"_index":79,"title":{"18":{}},"name":{"18":{}},"text":{"2":{},"3":{},"4":{},"12":{},"14":{},"17":{},"18":{},"19":{},"23":{},"24":{},"25":{}},"component":{}}],["start_exclusive_end_exclus",{"_index":1029,"title":{},"name":{},"text":{"12":{}},"component":{}}],["start_exclusive_end_inclus",{"_index":1028,"title":{},"name":{},"text":{"12":{}},"component":{}}],["start_inclusive_end_exclus",{"_index":1027,"title":{},"name":{},"text":{"12":{}},"component":{}}],["start_inclusive_end_inclus",{"_index":1026,"title":{},"name":{},"text":{"12":{}},"component":{}}],["startswith",{"_index":924,"title":{"17-6":{}},"name":{},"text":{"10":{},"17":{}},"component":{}}],["startswith(p",{"_index":1135,"title":{},"name":{},"text":{"13":{}},"component":{}}],["startswith(p).neg",{"_index":1132,"title":{},"name":{},"text":{"13":{}},"component":{}}],["startswitha",{"_index":1169,"title":{},"name":{},"text":{"14":{}},"component":{}}],["startswithignorecas",{"_index":1260,"title":{"17-8":{}},"name":{},"text":{"17":{}},"component":{}}],["startswithignorecase(p",{"_index":1139,"title":{},"name":{},"text":{"13":{}},"component":{}}],["startswithignorecase(p).neg",{"_index":1136,"title":{},"name":{},"text":{"13":{}},"component":{}}],["statement",{"_index":397,"title":{},"name":{},"text":{"3":{},"4":{},"23":{}},"component":{}}],["static",{"_index":95,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"18":{}},"component":{}}],["statist",{"_index":1675,"title":{},"name":{},"text":{"24":{}},"component":{}}],["stay",{"_index":267,"title":{},"name":{},"text":{"2":{}},"component":{}}],["step",{"_index":1312,"title":{"18-10":{}},"name":{},"text":{"18":{}},"component":{}}],["still",{"_index":131,"title":{},"name":{},"text":{"2":{},"4":{},"25":{}},"component":{}}],["store",{"_index":360,"title":{},"name":{},"text":{"3":{},"4":{},"10":{}},"component":{}}],["stream",{"_index":15,"title":{"4":{},"23":{},"2-5":{},"2-6":{},"4-4":{},"4-8":{},"10-3":{},"18-6":{},"19-1":{},"21-10":{},"23-1":{},"23-2":{},"24-19":{},"26-1":{},"26-3":{}},"name":{"4":{}},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"14":{},"18":{},"19":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["stream(film.class",{"_index":399,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["stream.clos",{"_index":1570,"title":{},"name":{},"text":{"22":{}},"component":{}}],["stream.empti",{"_index":1650,"title":{},"name":{},"text":{"24":{}},"component":{}}],["stream.foreachordered(system.out::println",{"_index":1569,"title":{},"name":{},"text":{"22":{}},"component":{}}],["stream.of",{"_index":601,"title":{},"name":{},"text":{"3":{},"21":{},"23":{}},"component":{}}],["stream.of(\"b",{"_index":1471,"title":{},"name":{},"text":{"21":{},"22":{},"24":{}},"component":{}}],["stream.of(\"c",{"_index":1481,"title":{},"name":{},"text":{"21":{}},"component":{}}],["stream.of(\"g",{"_index":1089,"title":{},"name":{},"text":{"12":{}},"component":{}}],["stream.of(\"i",{"_index":1640,"title":{},"name":{},"text":{"24":{}},"component":{}}],["stream.of(\"snail",{"_index":1171,"title":{},"name":{},"text":{"14":{}},"component":{}}],["stream.of(1",{"_index":1552,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["stream.of(1.0",{"_index":1548,"title":{},"name":{},"text":{"21":{}},"component":{}}],["stream=6",{"_index":1644,"title":{},"name":{},"text":{"24":{}},"component":{}}],["stream_bas",{"_index":1572,"title":{},"name":{"23":{}},"text":{},"component":{}}],["stream`",{"_index":1465,"title":{},"name":{},"text":{"21":{}},"component":{}}],["streamcomposition.concatandautoclos",{"_index":1001,"title":{},"name":{},"text":{"11":{}},"component":{}}],["streamconfigur",{"_index":164,"title":{"3-2":{}},"name":{},"text":{"2":{},"3":{},"4":{}},"component":{}}],["streamconfiguration.of(film.class",{"_index":200,"title":{},"name":{},"text":{"2":{},"3":{}},"component":{}}],["streamconfiguration.of(film.class).selecting(projection.select(film$.filmid",{"_index":408,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["streamer",{"_index":6,"title":{},"name":{},"text":{"5":{},"8":{},"9":{},"18":{},"19":{}},"component":{"1":{},"2":{},"3":{},"4":{},"5":{},"6":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"13":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}}}],["streamer/issues/23",{"_index":677,"title":{},"name":{},"text":{"4":{}},"component":{}}],["streamlin",{"_index":1766,"title":{},"name":{},"text":{"26":{}},"component":{}}],["streamsuppli",{"_index":232,"title":{},"name":{},"text":{"2":{}},"component":{}}],["streamsupplier.stream",{"_index":255,"title":{},"name":{},"text":{"2":{}},"component":{}}],["streamsupplier.stream(film.class",{"_index":263,"title":{},"name":{},"text":{"2":{}},"component":{}}],["string",{"_index":55,"title":{"17":{},"13-3":{}},"name":{"17":{}},"text":{"2":{},"3":{},"10":{},"12":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"23":{}},"component":{}}],["string::contain",{"_index":1277,"title":{},"name":{},"text":{"17":{}},"component":{}}],["string::endswith",{"_index":1276,"title":{},"name":{},"text":{"17":{}},"component":{}}],["string::equalsignorecas",{"_index":1272,"title":{},"name":{},"text":{"17":{}},"component":{}}],["string::isempti",{"_index":1269,"title":{},"name":{},"text":{"17":{}},"component":{}}],["string::startswith",{"_index":1274,"title":{},"name":{},"text":{"17":{}},"component":{}}],["string[4",{"_index":1661,"title":{},"name":{},"text":{"24":{}},"component":{}}],["stringbuild",{"_index":1457,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["stringbuilder::new",{"_index":1458,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["stringfield",{"_index":918,"title":{},"name":{},"text":{"10":{},"14":{},"17":{}},"component":{}}],["stringfield.cr",{"_index":919,"title":{},"name":{},"text":{"10":{}},"component":{}}],["strongli",{"_index":1046,"title":{},"name":{},"text":{"12":{}},"component":{}}],["style",{"_index":1575,"title":{},"name":{},"text":{"23":{}},"component":{}}],["sub",{"_index":1002,"title":{},"name":{},"text":{"11":{},"21":{}},"component":{}}],["submarin",{"_index":470,"title":{},"name":{},"text":{"3":{}},"component":{}}],["subsequ",{"_index":184,"title":{},"name":{},"text":{"2":{},"3":{},"21":{},"24":{}},"component":{}}],["such",{"_index":145,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"14":{},"18":{},"25":{}},"component":{}}],["suffix",{"_index":1362,"title":{},"name":{},"text":{"18":{}},"component":{}}],["suggest",{"_index":1045,"title":{},"name":{},"text":{"12":{}},"component":{}}],["suit",{"_index":1777,"title":{},"name":{},"text":{"26":{}},"component":{}}],["sum",{"_index":1316,"title":{"24-20":{}},"name":{},"text":{"18":{},"24":{}},"component":{}}],["sum=0",{"_index":1686,"title":{},"name":{},"text":{"24":{}},"component":{}}],["sum=10",{"_index":1681,"title":{},"name":{},"text":{"24":{}},"component":{}}],["summar",{"_index":1710,"title":{},"name":{},"text":{"25":{}},"component":{}}],["summari",{"_index":1674,"title":{},"name":{},"text":{"24":{}},"component":{}}],["summarystatist",{"_index":1625,"title":{"24-22":{}},"name":{},"text":{"24":{}},"component":{}}],["suppli",{"_index":138,"title":{},"name":{},"text":{"2":{}},"component":{}}],["supplier",{"_index":135,"title":{},"name":{},"text":{"2":{},"24":{}},"component":{}}],["supplier<entitymanag",{"_index":13,"title":{"2-4":{}},"name":{},"text":{},"component":{}}],["support",{"_index":813,"title":{},"name":{},"text":{"5":{},"9":{},"15":{},"23":{},"25":{}},"component":{}}],["suppos",{"_index":489,"title":{},"name":{},"text":{"3":{}},"component":{}}],["sure",{"_index":82,"title":{},"name":{},"text":{"2":{},"25":{}},"component":{}}],["suspect",{"_index":482,"title":{},"name":{},"text":{"3":{}},"component":{}}],["synchronis",{"_index":1417,"title":{},"name":{},"text":{"20":{}},"component":{}}],["system",{"_index":284,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"12":{}},"component":{}}],["system.out.format",{"_index":525,"title":{},"name":{},"text":{"3":{}},"component":{}}],["system.out.format(\"long",{"_index":649,"title":{},"name":{},"text":{"4":{}},"component":{}}],["system.out.format(\"ther",{"_index":105,"title":{},"name":{},"text":{"2":{},"12":{},"16":{},"17":{}},"component":{}}],["system.out.println(\"th",{"_index":1502,"title":{},"name":{},"text":{"21":{}},"component":{}}],["system.out.println(\"tuplelist",{"_index":667,"title":{},"name":{},"text":{"4":{}},"component":{}}],["system.out.println(map",{"_index":546,"title":{},"name":{},"text":{"3":{}},"component":{}}],["t",{"_index":1165,"title":{},"name":{},"text":{"14":{},"24":{}},"component":{}}],["tabl",{"_index":195,"title":{"18-6":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"12":{},"14":{},"16":{},"17":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"25":{}},"component":{}}],["table(nam",{"_index":690,"title":{},"name":{},"text":{"4":{},"10":{},"16":{},"18":{},"19":{},"20":{}},"component":{}}],["tailor",{"_index":299,"title":{},"name":{},"text":{"2":{}},"component":{}}],["take",{"_index":1079,"title":{},"name":{},"text":{"12":{},"14":{},"18":{},"21":{},"25":{}},"component":{}}],["takewhil",{"_index":1452,"title":{"21-31":{}},"name":{},"text":{"21":{}},"component":{}}],["takewhile(",{"_index":1563,"title":{},"name":{},"text":{"21":{}},"component":{}}],["talk",{"_index":717,"title":{},"name":{},"text":{"4":{}},"component":{}}],["target",{"_index":925,"title":{},"name":{},"text":{"10":{},"18":{},"25":{}},"component":{}}],["target/gener",{"_index":861,"title":{},"name":{},"text":{"7":{},"18":{},"25":{}},"component":{}}],["teen",{"_index":750,"title":{},"name":{},"text":{"4":{},"11":{}},"component":{}}],["tell",{"_index":1597,"title":{},"name":{},"text":{"23":{}},"component":{}}],["ten",{"_index":1396,"title":{},"name":{},"text":{"19":{}},"component":{}}],["termin",{"_index":237,"title":{"24":{}},"name":{},"text":{"2":{},"22":{},"23":{},"24":{},"25":{}},"component":{}}],["terminal_oper",{"_index":1626,"title":{},"name":{"24":{}},"text":{},"component":{}}],["ters",{"_index":1772,"title":{},"name":{},"text":{"26":{}},"component":{}}],["test",{"_index":624,"title":{},"name":{},"text":{"4":{},"10":{},"12":{},"14":{},"19":{},"21":{}},"component":{}}],["text",{"_index":1491,"title":{},"name":{},"text":{"21":{}},"component":{}}],["therebi",{"_index":721,"title":{},"name":{},"text":{"4":{}},"component":{}}],["therefor",{"_index":1357,"title":{},"name":{},"text":{"18":{},"25":{}},"component":{}}],["think",{"_index":781,"title":{},"name":{},"text":{"4":{}},"component":{}}],["third",{"_index":132,"title":{},"name":{},"text":{"2":{},"4":{}},"component":{}}],["this.jpastream",{"_index":841,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["this.length",{"_index":586,"title":{},"name":{},"text":{"3":{}},"component":{}}],["this.titl",{"_index":584,"title":{},"name":{},"text":{"3":{}},"component":{}}],["thorben",{"_index":309,"title":{},"name":{},"text":{"2":{}},"component":{}}],["those",{"_index":556,"title":{},"name":{},"text":{"3":{},"14":{},"23":{}},"component":{}}],["though",{"_index":670,"title":{},"name":{},"text":{"4":{}},"component":{}}],["thread",{"_index":1497,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["three",{"_index":688,"title":{},"name":{},"text":{"4":{}},"component":{}}],["through",{"_index":1393,"title":{},"name":{},"text":{"19":{},"21":{},"23":{}},"component":{}}],["throughout",{"_index":1325,"title":{},"name":{},"text":{"18":{}},"component":{}}],["thu",{"_index":162,"title":{},"name":{},"text":{"2":{},"3":{},"12":{},"17":{},"18":{},"23":{},"24":{},"25":{}},"component":{}}],["tim",{"_index":1585,"title":{},"name":{},"text":{"23":{}},"component":{}}],["time",{"_index":247,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"12":{},"13":{},"18":{},"19":{},"21":{},"26":{}},"component":{}}],["timeout",{"_index":320,"title":{},"name":{},"text":{"2":{}},"component":{}}],["tinyint(5",{"_index":709,"title":{},"name":{},"text":{"4":{}},"component":{}}],["titl",{"_index":108,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"14":{},"17":{},"18":{},"19":{},"23":{}},"component":{}}],["title10_0_",{"_index":963,"title":{},"name":{},"text":{"10":{}},"component":{}}],["title='ac",{"_index":1343,"title":{},"name":{},"text":{"18":{}},"component":{}}],["title='academi",{"_index":1341,"title":{},"name":{},"text":{"18":{}},"component":{}}],["title='adapt",{"_index":1345,"title":{},"name":{},"text":{"18":{}},"component":{}}],["title='affair",{"_index":1347,"title":{},"name":{},"text":{"18":{}},"component":{}}],["title='african",{"_index":1349,"title":{},"name":{},"text":{"18":{}},"component":{}}],["title='chicago",{"_index":427,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["title='control",{"_index":430,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["title='darn",{"_index":415,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["titlelength",{"_index":581,"title":{},"name":{},"text":{"3":{}},"component":{}}],["titlelength(film",{"_index":583,"title":{},"name":{},"text":{"3":{}},"component":{}}],["toarray",{"_index":682,"title":{"24-12":{}},"name":{},"text":{"4":{},"24":{}},"component":{}}],["toarray(string[]::new",{"_index":1660,"title":{},"name":{},"text":{"24":{}},"component":{}}],["todoublefunct",{"_index":1506,"title":{},"name":{},"text":{"21":{}},"component":{}}],["tointfunct",{"_index":1504,"title":{},"name":{},"text":{"21":{}},"component":{}}],["tolist",{"_index":1621,"title":{"24-13":{}},"name":{},"text":{"24":{}},"component":{}}],["tolongfunct",{"_index":1505,"title":{},"name":{},"text":{"21":{}},"component":{}}],["tomap(entry::getkey",{"_index":562,"title":{},"name":{},"text":{"3":{}},"component":{}}],["tool",{"_index":332,"title":{},"name":{},"text":{"2":{},"5":{},"9":{},"18":{}},"component":{}}],["top",{"_index":815,"title":{},"name":{},"text":{"5":{},"9":{},"11":{}},"component":{}}],["topic",{"_index":1322,"title":{},"name":{},"text":{"18":{}},"component":{}}],["tostr",{"_index":589,"title":{},"name":{},"text":{"3":{}},"component":{}}],["town",{"_index":987,"title":{},"name":{},"text":{"11":{}},"component":{}}],["track",{"_index":1751,"title":{},"name":{},"text":{"25":{}},"component":{}}],["tradit",{"_index":1336,"title":{},"name":{},"text":{"18":{}},"component":{}}],["trait",{"_index":1036,"title":{},"name":{},"text":{"12":{},"16":{},"17":{}},"component":{}}],["transact",{"_index":1416,"title":{"20":{}},"name":{"20":{}},"text":{"20":{}},"component":{}}],["translat",{"_index":355,"title":{},"name":{},"text":{"3":{},"4":{},"10":{},"25":{}},"component":{}}],["travers",{"_index":1603,"title":{},"name":{},"text":{"23":{}},"component":{}}],["tri",{"_index":86,"title":{},"name":{},"text":{"2":{},"20":{},"22":{}},"component":{}}],["trigger",{"_index":1702,"title":{},"name":{},"text":{"25":{}},"component":{}}],["troubleshoot",{"_index":1694,"title":{"25":{}},"name":{"25":{}},"text":{"25":{}},"component":{}}],["true",{"_index":326,"title":{},"name":{},"text":{"2":{},"4":{},"10":{},"11":{},"12":{},"13":{},"14":{},"16":{},"17":{},"21":{},"22":{},"24":{}},"component":{}}],["truman",{"_index":995,"title":{},"name":{},"text":{"11":{},"12":{}},"component":{}}],["truncat",{"_index":1463,"title":{},"name":{},"text":{"21":{}},"component":{}}],["tupl",{"_index":672,"title":{},"name":{},"text":{"4":{}},"component":{}}],["tuplelist",{"_index":665,"title":{},"name":{},"text":{"4":{}},"component":{}}],["turn",{"_index":1561,"title":{},"name":{},"text":{"21":{}},"component":{}}],["twice",{"_index":1551,"title":{},"name":{},"text":{"21":{}},"component":{}}],["two",{"_index":34,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"12":{},"21":{},"23":{}},"component":{}}],["tycoon",{"_index":479,"title":{},"name":{},"text":{"3":{}},"component":{}}],["type",{"_index":205,"title":{"14-3":{},"26-1":{}},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"12":{},"14":{},"15":{},"16":{},"17":{},"18":{},"19":{},"21":{},"24":{},"26":{}},"component":{}}],["typic",{"_index":351,"title":{},"name":{},"text":{"3":{},"19":{}},"component":{}}],["unabl",{"_index":661,"title":{},"name":{},"text":{"4":{}},"component":{}}],["unaffect",{"_index":1776,"title":{},"name":{},"text":{"26":{}},"component":{}}],["under",{"_index":1245,"title":{},"name":{},"text":{"15":{},"18":{}},"component":{}}],["underli",{"_index":240,"title":{},"name":{},"text":{"2":{},"18":{},"19":{},"20":{},"25":{},"26":{}},"component":{}}],["understand",{"_index":335,"title":{},"name":{},"text":{"2":{},"4":{},"14":{}},"component":{}}],["undesir",{"_index":394,"title":{},"name":{},"text":{"3":{}},"component":{}}],["unexpect",{"_index":1742,"title":{},"name":{},"text":{"25":{}},"component":{}}],["unfinish",{"_index":1715,"title":{},"name":{},"text":{"25":{}},"component":{}}],["unfortun",{"_index":1733,"title":{},"name":{},"text":{"25":{}},"component":{}}],["unintend",{"_index":339,"title":{},"name":{},"text":{"2":{}},"component":{}}],["union",{"_index":349,"title":{"3-14":{},"3-15":{}},"name":{},"text":{"3":{}},"component":{}}],["uniqu",{"_index":1459,"title":{},"name":{},"text":{"21":{}},"component":{}}],["unit",{"_index":10,"title":{"2-2":{}},"name":{},"text":{"2":{},"3":{},"18":{},"19":{},"20":{}},"component":{}}],["unlik",{"_index":1559,"title":{},"name":{},"text":{"21":{}},"component":{}}],["unlimit",{"_index":1750,"title":{},"name":{},"text":{"25":{}},"component":{}}],["unnecessari",{"_index":1226,"title":{},"name":{},"text":{"15":{}},"component":{}}],["unord",{"_index":1440,"title":{"21-13":{}},"name":{},"text":{"21":{}},"component":{}}],["until",{"_index":1557,"title":{},"name":{},"text":{"21":{}},"component":{}}],["up",{"_index":84,"title":{},"name":{},"text":{"2":{},"7":{},"8":{},"18":{},"19":{},"23":{},"24":{}},"component":{}}],["updat",{"_index":179,"title":{},"name":{},"text":{"2":{},"10":{},"19":{},"20":{},"25":{}},"component":{}}],["us",{"_index":17,"title":{"2-8":{},"4-5":{},"26-1":{}},"name":{},"text":{"2":{},"3":{},"4":{},"5":{},"7":{},"8":{},"9":{},"10":{},"11":{},"12":{},"14":{},"15":{},"16":{},"18":{},"19":{},"20":{},"21":{},"22":{},"23":{},"24":{},"25":{},"26":{}},"component":{}}],["usag",{"_index":1381,"title":{},"name":{},"text":{"18":{},"21":{}},"component":{}}],["user",{"_index":315,"title":{},"name":{},"text":{"2":{},"3":{},"18":{},"25":{}},"component":{}}],["usual",{"_index":611,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"9":{},"21":{},"24":{}},"component":{}}],["util",{"_index":1763,"title":{},"name":{},"text":{"26":{}},"component":{}}],["v",{"_index":524,"title":{},"name":{},"text":{"3":{},"4":{},"12":{}},"component":{}}],["v,v",{"_index":1019,"title":{},"name":{},"text":{"12":{}},"component":{}}],["v.size",{"_index":528,"title":{},"name":{},"text":{"3":{},"4":{}},"component":{}}],["valu",{"_index":226,"title":{},"name":{},"text":{"2":{},"4":{},"12":{},"17":{},"18":{},"21":{},"24":{}},"component":{}}],["vanilla",{"_index":1188,"title":{},"name":{},"text":{"14":{}},"component":{}}],["varchar(255",{"_index":384,"title":{},"name":{},"text":{"3":{},"10":{},"18":{},"19":{}},"component":{}}],["variant",{"_index":1074,"title":{},"name":{},"text":{"12":{},"21":{},"24":{}},"component":{}}],["varieti",{"_index":1196,"title":{},"name":{},"text":{"14":{},"23":{},"26":{}},"component":{}}],["variou",{"_index":294,"title":{},"name":{},"text":{"2":{}},"component":{}}],["veri",{"_index":1583,"title":{},"name":{},"text":{"23":{}},"component":{}}],["version",{"_index":593,"title":{},"name":{},"text":{"3":{},"4":{},"5":{},"8":{},"9":{},"18":{},"25":{}},"component":{}}],["via",{"_index":130,"title":{},"name":{},"text":{"2":{},"4":{},"5":{},"9":{},"18":{},"19":{},"23":{},"25":{}},"component":{}}],["victori",{"_index":747,"title":{},"name":{},"text":{"4":{}},"component":{}}],["videotap",{"_index":1066,"title":{},"name":{},"text":{"12":{}},"component":{}}],["view",{"_index":1582,"title":{},"name":{},"text":{"23":{}},"component":{}}],["visual",{"_index":1592,"title":{},"name":{},"text":{"23":{}},"component":{}}],["void",{"_index":96,"title":{},"name":{},"text":{"2":{}},"component":{}}],["wahlberg",{"_index":771,"title":{},"name":{},"text":{"4":{}},"component":{}}],["want",{"_index":490,"title":{},"name":{},"text":{"3":{},"19":{},"26":{}},"component":{}}],["way",{"_index":46,"title":{},"name":{},"text":{"2":{},"3":{},"4":{},"10":{},"11":{},"19":{},"23":{},"26":{}},"component":{}}],["websit",{"_index":1413,"title":{},"name":{},"text":{"19":{}},"component":{}}],["well",{"_index":400,"title":{},"name":{},"text":{"3":{},"10":{}},"component":{}}],["what’",{"_index":20,"title":{"2-9":{}},"name":{},"text":{},"component":{}}],["whenev",{"_index":236,"title":{},"name":{},"text":{"2":{},"23":{},"26":{}},"component":{}}],["wherea",{"_index":656,"title":{},"name":{},"text":{"4":{}},"component":{}}],["wherebi",{"_index":1530,"title":{},"name":{},"text":{"21":{},"24":{}},"component":{}}],["whether",{"_index":175,"title":{},"name":{},"text":{"2":{},"24":{}},"component":{}}],["wide",{"_index":1773,"title":{},"name":{},"text":{"26":{}},"component":{}}],["wish",{"_index":120,"title":{},"name":{},"text":{"2":{},"19":{}},"component":{}}],["withhint",{"_index":303,"title":{},"name":{},"text":{"2":{}},"component":{}}],["withhint(\"javax.persistence.query.timeout",{"_index":324,"title":{},"name":{},"text":{"2":{}},"component":{}}],["withhint(\"org.hibernate.readonli",{"_index":325,"title":{},"name":{},"text":{"2":{}},"component":{}}],["withhint(fin",{"_index":306,"title":{},"name":{},"text":{"2":{}},"component":{}}],["withhint(str",{"_index":223,"title":{},"name":{},"text":{"2":{}},"component":{}}],["within",{"_index":1544,"title":{},"name":{},"text":{"21":{}},"component":{}}],["without",{"_index":968,"title":{},"name":{},"text":{"10":{},"25":{}},"component":{}}],["word",{"_index":1647,"title":{},"name":{},"text":{"24":{}},"component":{}}],["work",{"_index":674,"title":{"10":{}},"name":{"10":{}},"text":{"4":{},"10":{},"14":{},"18":{},"19":{},"25":{}},"component":{}}],["workload",{"_index":1774,"title":{},"name":{},"text":{"26":{}},"component":{}}],["write",{"_index":1050,"title":{},"name":{},"text":{"12":{},"19":{},"26":{}},"component":{}}],["wrote",{"_index":311,"title":{},"name":{},"text":{"2":{}},"component":{}}],["x",{"_index":505,"title":{},"name":{},"text":{"3":{}},"component":{}}],["xml",{"_index":61,"title":{},"name":{},"text":{"2":{}},"component":{}}],["y",{"_index":506,"title":{},"name":{},"text":{"3":{}},"component":{}}],["yeild",{"_index":1376,"title":{},"name":{},"text":{"18":{}},"component":{}}],["yield",{"_index":745,"title":{},"name":{},"text":{"4":{},"18":{},"23":{},"25":{}},"component":{}}],["you’r",{"_index":822,"title":{},"name":{},"text":{"5":{},"9":{}},"component":{}}],["z",{"_index":1656,"title":{},"name":{},"text":{"24":{}},"component":{}}],["zellweg",{"_index":801,"title":{},"name":{},"text":{"4":{}},"component":{}}],["zero",{"_index":1545,"title":{},"name":{},"text":{"21":{}},"component":{}}],["zlatan",{"_index":1584,"title":{},"name":{},"text":{"23":{}},"component":{}}]],"pipeline":["stemmer"]},"store":{"documents":{"1":{"id":1,"text":"JPAStreamer Docs Application Configuration","title":"Application Configuration","component":"jpa-streamer","version":"3.0.4","name":"app_configuration","url":"/jpa-streamer/latest/application-configuration/app_configuration.html","titles":[]},"2":{"id":2,"text":"JPAStreamer Docs Fetching Data This section details how to create a basic Stream from your datasource. To initiate the data fetching process, you will need to initialize an instance of JPAStreamer. Once you have obtained access to JPAStreamer, you can leverage two main methods to obtain a Stream from your datasource: stream() and createStreamSupplier(). These methods provide efficient and customizable approaches to interact with your data. In this chapter, we will discuss what differentiates the two approaches. The simplest way to initialize JPAstreamer is by providing the name of the persistence unit like so: JPAStreamer jpaStreamer = JPAStreamer.of(\"sakila\"); (1) 1 \"sakila\" is to be replaced with the name of your persistence unit that can be found in a configuration-file In the example, the String \"sakila\" should refer to the name of your persistence unit. Assuming you are already using a JPA provider, your project should contain an XML-file like the one below, describing the persistence unit: (1) MySQL Sakila Example Database org.hibernate.jpa.HibernatePersistenceProvider 1 The name of the persistence unit, in this case \"sakila\", is used to initialize JPAStreamer. This configuration is just an example configuration for the MySQL Sakila example database. You should use the configuration you already have in place. If you have multiple persistence units, you can initiate several instances of JPAStreamer to establish connections with different sources. JPAStreamer does not need any additional configuration and depends solely on this file to establish a database connection. If your starting a project from scratch, make sure to set up your JPA project before trying to use JPAStreamer. Having obtained a JPAStreamer instance, you are ready to go. Here is an example that includes both the instantiation and the querying: public static void main(String[] args) { JPAStreamer jpaStreamer = JPAStreamer.createJPAStreamerBuilder(\"sakila\") (1) .build(); long count = jpaStreamer.stream(Film.class) .filter(Film$.title.startsWith(\"A\")) .count(); System.out.format(\"There are %d films with a title that starts with A\", count); } When configuring JPAStreamer with the persistence unit name as described above, a new EntityManagerFactory is created and managed by JPAStreamer. In this case, JPAStreamer is responsible for the life cycle of the factory, and calling JPAStreamer::close will close the EntityManagerFactory. If you rather wish to reuse an existing EntityManagerFactory you can initialize JPAStreamer as follows: EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"sakila\"); JPAStreamer jpaStreamer = JPAStreamer.of(emf); In this case, JPAStreamer is not responsible for clearing up the factory resources and calling JPAStreamer::close will not close the EntityManagerFactory. However, EntityManager instances obtained via the factory are still managed by JPAStreamer. As a third option, JPAStreamer can be handed a Supplier of Entity Managers. In this case, JPAStreamer is not responsible for the lifecycle of any supplied Entity Managers. For example: EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"sakila\"); JPAStreamer jpaStreamer = JPAStreamer.of(emf::createEntityManager); This is especially useful in contexts where JPAStreamer may not be permitted to create and manage its own EntityManagerFactory, and/or no reference to an EntityManagerFactory is present. An example of such an environment is inside a PanacheRepository when running Hibernate and Panache. PanacheRepository inherits getEntityManager() from PanacheEntityBase, which can be used to supply JPAStreamer with Entity Managers as follows: @ApplicationScoped public class FilmRepository implements PanacheRepository { private final JPAStreamer jpaStreamer = JPAStreamer.of(this::getEntityManager); } When using a Supplier, JPAStreamer is not responsible for the lifecycle of the Entity Managers, thus JPAStreamer::close will not close any supplied Entity Managers. To create a Stream, you first need to describe the stream source as a StreamConfiguration. The StreamConfiguration declares what entity to use as the base for the query, and e.g. if any joins or projections should be performed. The StreamConfiguration is then passed to JPAStreamer.stream(StreamConfiguration streamConfiguration) or JPAStreamer.createStreamSupplier(StreamConfiguration streamConfiguration). When deciding which of these methods to use, consider whether you will reuse the same stream source frequently or not, and if you are expecting that the source will be updated by an external application in between streams. A more detailed explanation follows in the subsequent sections on each method below. JPAStreamer also offers convenience methods for simple StreamConfigurations: JPAStreamer.stream(Class entityClass) JPAStreamer.stream(Projection projection) JPAStreamer.createStreamSupplier(Class entityClass) JPAStreamer.createStreamSupplier(Projection projection) The simplest way of creating a Stream is to provide a single entity class, creating a Stream of the single table associated with that JPA entity: Stream stream = jpaStreamer.stream(Film.class); (1) 1 Creates a Stream over the Film-table. Passing the entity class Film.class is equivalent of passing StreamConfiguration.of(Film.class). All options available for StreamConfiguration is laid out in the table below: Table 1. StreamConfiguration Modifer and type Method Description StreamConfiguration of(Class entityClass) Creates and returns a new StreamConfiguration that can be used to configure streams. Class entityClass() Returns the entity class that is to appear in a future Stream. Set joins() Returns the fields that shall be joined in a future stream. StreamConfiguration joining(Field field) Creates and returns a new StreamConfiguration configured with the provided field so that it will be eagerly joined when producing elements in the future Stream using join type left. StreamConfiguration joining(Field field, JoinType joinType) Creates and returns a new StreamConfiguration configured with the provided field so that it will be eagerly joined when producing elements in the future Stream using the provided join type. Optional> selections() Returns the projected columns to use when creating entities or Optional.empty() if no projection should be used. StreamConfiguration selecting(Projection projection) Selects the projected columns to initialize when creating initial entities in a future stream. StreamConfiguration withHint(String hintName, Object value) Adds a query hint. Map hints() Returns the map with the query hints that will be configured in a future Stream. There are many examples of how to use a StreamConfiguration in Stream Examples. Calls to JPAStreamer.stream(StreamConfiguration streamConfiguration) will lead to the creation of a StreamSupplier. The StreamSupplier obtains a JPA EntityManager that JPAStreamer uses internally to issue JPA Criteria Queries. Whenever the Stream is terminated with a terminal operation, e.g. collect(), the underlying StreamSupplier and the EntityManager is closed and can no longer be used. final JPAStreamer jpaStreamer = JPAStreamer.of(\"sakila\"); final List films = jpaStreamer.stream(Film.class) (1) .filter(Film$.name.equal(\"Casablanca\")) .collect(toList()); (2) 1 Creates a StreamSupplier that returns a Stream over the Film-table 2 The terminal operation closes the underlying StreamSupplier and its Entity Manager As calls to JPAStreamer.stream() creates a new StreamSupplier each time, you can potentially save resources by reusing a single StreamSupplier for the creation of many streams. A reusable StreamSupplier can be obtained by calling JPAStreamer.createStreamSupplier(). Like JPAStreamer, the StreamSupplier provides a method stream() that returns a Stream as described by the provided StreamConfiguration. There is one important distinction between calls to these methods: JPAStreamer.stream() - the execution of a terminal operation closes the underlying StreamSupplier its EntityManager StreamSupplier.stream() - the execution of a terminal operation does not close the StreamSupplier and its EntityManager This means repeated calls to StreamSupplier.stream() will reuse the same EntityManager. We recommend using a try-with-resources block to automatically close the StreamSupplier when done with the operations: final JPAStreamer jpaStreamer = JPAStreamer.of(\"sakila\"); try (final StreamSupplier streamSupplier = jpaStreamer.createStreamSupplier()) { final List shortFilms = streamSupplier.stream(Film.class) .filter(Film$.length.lessThan(60)) .collect(toList()); (1) final List longFilms = streamSupplier.stream(Film.class) .filter(Film$.length.greatherThanOrEqual(61)) .collect(toList()); (1) } (2) 1 The StreamSupplier and the underlying EntityManager stays open when executing the terminal operation 2 The StreamSupplier and the underlying EntityManager is closed The javax.persistence.EntityManager associated with the StreamSupplier has a first-layer cache. Thus by default, database changes performed by another application, or made directly on the database, may not be detected between calls to StreamSupplier.stream(). To ensure that the cache is cleared between each fetch, use JPAStreamer.stream() instead. If you instantiate JPAStreamer with a Supplier as described here, JPAStreamer will not close the underlying Entity Manager. In that case the lifecycle of the obtained Entity Managers is managed by the supplier. In complex scenarios or when dealing with specific database systems, it may be necessary to provide additional guidance to the underlying JPA provider for optimal query execution. This is where query hints come into play, allowing developers to control and influence various aspects of the query execution process. The query hints influence e.g. the execution plan chosen by the JPA provider, potentially leading to improved query performance or tailored behavior based on specific requirements. To pass a query hint to the underlying JPA provider with JPAStreamer, you need to use a StreamConfiguration. It exposes a method withHint() that accepts the name and value of the query hint. This method call can be chained to set multiple hints. StreamConfiguration withHint(final String hintName, final Object value); The available set of query hints is defined in the JPA specification and the documentation of your underlying JPA provider. Thorben Jansen wrote an excellent blog post on useful query hints available to Hibernate users here. JPAStreamer does not provide any custom query hints. Let’s bring query hints into the context of a JPAStreamer query. Here is an example that issues a read-only query with a timeout of 50 ms: StreamConfiguration sc = StreamConfiguration.of(Film.class) .withHint(\"javax.persistence.query.timeout\", 50) .withHint(\"org.hibernate.readOnly\", true); List films = jpaStreamer.stream(sc) .filter(Film$.title.startsWith(\"A\")) .sorted(Film$.length) .limit(10) .collect(Collectors::toList); While query hints can be powerful tools for query optimization, it’s important to use them carefully and with a clear understanding of their impact. Misusing or overusing query hints can lead to unintended consequences. The next section demonstrates how to use the available Stream operators and how they map to SQL constructs.","title":"Fetching Data","component":"jpa-streamer","version":"3.0.4","name":"fetching-data","url":"/jpa-streamer/latest/fetching-data/fetching-data.html","titles":[{"text":"Obtaining a JPAStreamer instance","hash":"_obtaining_a_jpastreamer_instance","id":1},{"text":"From persistence unit name","hash":"_from_persistence_unit_name","id":2},{"text":"From EntityManagagerFactory","hash":"_from_entitymanagagerfactory","id":3},{"text":"From Supplier<EntityManager>","hash":"_supplier","id":4},{"text":"Creating a Stream","hash":"_creating_a_stream","id":5},{"text":"stream()","hash":"_stream","id":6},{"text":"createStreamSupplier()","hash":"_createstreamsupplier","id":7},{"text":"Using Query Hints","hash":"_using_query_hints","id":8},{"text":"What’s Next","hash":"_whats_next","id":9}]},"3":{"id":3,"text":"JPAStreamer Docs Fetching Data SQL Equivalents This chapter contains a number of typical database queries that can be expressed using JPAStreamer. For users that are accustomed to SQL, this chapter provides an overview of how to translate SQL to Streams. The examples included in this chapter are based on the MySQL \"sakila\" example database, which models a classic movie rental store. An object that corresponds to a row in the database are, by convention, called an \"Entity\". The table below gives an overview of how SQL operators map to the Java Stream API. SQL Java Stream FROM stream() SELECT map(Projection.select()) WHERE filter() (before collecting) ORDER BY sorted() OFFSET skip() LIMIT limit() COUNT count() GROUP BY collect(groupingBY()) HAVING filter() (after collecting) DISTINCT distinct() SELECT map() UNION concat(s0, s1).distinct() JOIN flatmap() FROM can be expressed using .stream(). To access this method, you need access to an instance of a JPAStreamer: JPAStreamer jpaStreamer = JPAStreamer.of(\"sakila\"); (1) 1 \"sakila\" is to be replaced with the name of the relevant persistence unit The method .stream() accepts a reference to the Entity representing the table to be streamed. For example, the table 'film' has a corresponding Film Entity: @Entity public class Film { @Id @Column(name = \"film_id\", columnDefinition = \"smallint(5)\") private Integer filmId; @Column(name = \"title\", columnDefinition = \"varchar(255)\") private String title; ... } This entity can be streamed like so: jpaStreamer.stream(Film.class); which will create a Stream with all the Film entities in the Film table: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ... The Film entities above and below will have its List and Language fields lazily initialized. This is undesirable in many cases where we know we are going to use these fields. Read more hereunder on how to use a StreamConfiguration to read these fields eagerly using a join statement. Anywhere below where stream(Film.class) is used, we might as well also use a StreamConfiguration that can be created like this: StreamConfiguration configuration = StreamConfiguration.of(Film.class) .joining(Film$.actors) .joining(Film$.language); This creates a StreamConfiguration where both the actors and language is (left) joined. Thus, avoiding a potential N + 1 SELECT problem. SELECT can be expressed using a StreamConfiguration or a map()-operation that to a Projection. The StreamConfiguration limits which columns are obtained from the database before the Stream operations are applied: StreamConfiguration sc = StreamConfiguration.of(Film.class).selecting(Projection.select(Film$.filmId, Film$.title)); jpaStreamer.stream(sc) .sorted(Film$.length.reversed()) .limit(3) .forEach(System.out::println); This will produce the following output: Film{filmId=212, title='DARN FORRESTER', description='null', language=null, actors=[], rentalDuration=null, rentalRate=null, length=null, replacementCost=null, rating='null', specialFeatures='null', lastUpdate=null} Film{filmId=141, title='CHICAGO NORTH', description='null', language=null, actors=[], rentalDuration=null, rentalRate=null, length=null, replacementCost=null, rating='null', specialFeatures='null', lastUpdate=null} Film{filmId=182, title='CONTROL ANTHEM', description='null', language=null, actors=[], rentalDuration=null, rentalRate=null, length=null, replacementCost=null, rating='null', specialFeatures='null', lastUpdate=null} You can find more examples of how to use projections in the chapter Projections. WHERE can be expressed using .filter(). By applying a filter to a Stream, certain entities can be retained in the Stream and other entities can be dropped. For example, to find a long film (of length greater than 120 minutes) you can apply a filter like this: jpaStreamer.stream(Film.class) .filter(Film$.length.greaterThan(120)) .forEachOrdered(System.out::println); This will produce the following output: Optional[FilmImpl { filmId = 5, title = AFRICAN EGG,... , length = 130, ...] An important property with JPAStreamer streams is that they are able to optimize their own pipeline by introspection. It looks like the Stream will iterate over all rows in the 'film' table but this is not the case. Instead, JPAStreamer is able to optimize the resulting query in the background which is then passed to the used JPA provider. This means that only the relevant entities are pulled in from the database into the Stream. ORDER BY can be expressed using .sorted(). Sorting all our films based on length can be done this way: List filmsInLengthOrder = jpaStreamer.stream(Films.class) .sorted(Film$.length) (1) .collect(Collectors.toList()); 1 Descending order can be obtained by calling, for example, Film$.length.reversed(). The list will have the following content: Film { filmId = 15, title = ALIEN CENTER, ..., length = 46, ... Film { filmId = 469, title = IRON MOON, ..., length = 46, ... Film { filmId = 730, title = RIDGEMONT SUBMARINE, ..., length = 46, ... Film { filmId = 504, title = KWAI HOMEWARD, ..., length = 46, ... Film { filmId = 505, title = LABYRINTH LEAGUE, ..., length = 46, ... Film { filmId = 784, title = SHANGHAI TYCOON, ..., length = 47, ... Film { filmId = 869, title = SUSPECTS QUILLS, ..., length = 47, ... ... Several \"ORDER BY\" columns can be used by composing comparators: .sorted(Film$.length.thenComparing(Film$.title.comparator()) (1) 1 The .comparator() method must be used for secondary fields. OFFSET can be expressed using .skip(). The .skip() operation is useful to skip a number of records before using them. Suppose you want to print out the films in title order but staring from the 100:th film then the skip-operation can be used like this: films.stream() .sorted(Film$.title) .skip(100) .forEachOrdered(System.out::println); This will produce the following output: Film { filmId = 101, title = BROTHERHOOD BLANKET, ... Film { filmId = 102, title = BUBBLE GROSSE, ... Film { filmId = 103, title = BUCKET BROTHERHOOD, ... ... LIMIT can be expressed using .limit(). The number of records in a Stream can be controlled using the .limit() operation. This example will print out the 3 first films in title order: jpaStreamer.stream(Film.class) .sorted(Film$.title) .limit(3) .forEachOrdered(System.out::println); This will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... LIMIT X OFFSET Y can be expressed by .skip(y).limit(x) (note the order of skip and limit) There are many applications where both .skip() and .limit() are used. Remember that the order of these stream operations matters and that the order is different from what you might be used to from SQL. The following example expresses a stream used to fetch 50 films starting from the 100:th film in natural title order: films.stream() .sorted(Film.TITLE) .skip(100) .limit(50) .forEachOrdered(System.out::println); This will produce the following output: Film { filmId = 101, title = BROTHERHOOD BLANKET, ... Film { filmId = 102, title = BUBBLE GROSSE, ... Film { filmId = 103, title = BUCKET BROTHERHOOD, ... ... COUNT can be expressed using .count(). Stream counting are optimized to database queries. Consider the following stream that counts the number of long films (with a length greater than 120 minutes): long noLongFilms = jpaStreamer.stream(Film.class) .filter(Film$.length.greaterThan(120)) .count(); When run, the code will calculate that there are 457 long films. GROUP BY can be expressed using collect(groupingBy(…​)). Java has its own group-by collector. The example below groups all the Films by 'rating': Map> filmCategories = jpaStreamer.stream(Film.class) .collect( Collectors.groupingBy( Film$.rating ) ); map.forEach((k, v) -> System.out.format( \"Rating %-5s maps to %d films %n\", k, v.size() ) ); This might produce the following output: Rating PG-13 has 223 films Rating R has 195 films Rating NC-17 has 210 films Rating G has 178 films Rating PG has 194 films The entire table will be pulled into the application in this example because all films will be in the Map. To only count the occurrences of items for different classifications a down-stream Collector can be used instead: Map map = jpaStreamer.stream(Film.class) .collect( Collectors.groupingBy( Film$.rating, (1) Collectors.counting() (2) ) ); System.out.println(map); 1 Film rating is used as the classifier 2 The down-stream collector This might produce the following output: {PG-13=223, R=195, NC-17=210, G=178, PG=194} HAVING can be expressed by .filter() applied on a Stream from a previously collected Stream. The previous GROUP BY example can be expanded by filtering out only those categories having more than 200 films. Such a Stream can be expressed by applying a new Stream on a Stream that has been previously collected: Map> filmCategories = jpaStreamer.stream(Film.class) .collect( Collectors.groupingBy( Film$.rating ) ) .entrySet() .stream() .filter(e -> e.getValue().size() > 200) .collect( toMap(Entry::getKey, Entry::getValue) ); Now that only categories with more than 200 films are shown, the content of the Map will correspond to: Rating PG-13 has 223 films Rating NC-17 has 210 films DISTINCT can be expressed using .distinct(). The following code can be used to calculate what different ratings there are in the film tables: Set ratings = jpaStreamer.stream(Film.class) .map(Film$.rating) .distinct() .collect(Collectors.toSet()); In this example, the entire table will be pulled into the application. SELECT can be expressed using .map(). If you do not want to use the entire entity but instead only select one or several fields, that can be done by applying a Map operation to a Stream. Assuming for example you are only interested in the field 'id' of a Film you can select that field like this: final IntStream ids = jpaStreamer.stream(Film.class) .mapToInt(Film$.filmId); This creates an IntStream consisting of the ID:s of all Films by applying the Film$.filmId getter for each Film in the original stream. To select several fields, you can create a custom class that holds only the fields in question or use a class to dcreate a type-safe holder. public static final class TitleLength { private final String title; private final int length; public TitleLength(Film film) { this.title = film.getTitle(); this.length= film.getLength(); } public String title() { return title; } public int length() { return length; } @Override public String toString() { return \"TitleLength{\" + \"title='\" + title + '\\'' + \", length=\" + length + '}'; } } jpaStreamer.stream(Film.class) .map(TitleLength::new) .forEach(System.out::println); This creates a stream of TitleLength with two elements: title (of type String) and length (of type int). NOTE: Currently, JPAStreamer will read all the columns regardless of subsequent mappings. Future versions might cut down on the columns actually being read following .map(), mapToInt(), mapToLong() and mapToDouble() operations. UNION ALL can be expressed using a Stream of Streams followed by a flatMap(Function.identity()) operator. The following example creates a resulting Stream with all Films that are of length greater than 120 minutes and then all films that are of rating \"PG-13\": Stream.of( jpaStreamer.stream(Film.class).filter(Film$.length.greaterThan(120)), jpaStreamer.stream(Film.class).filter(Film$.rating.equal(\"PG-13\")) ) .flatMap(Function.identity()) .distinct() .forEachOrdered(System.out::println); The resulting Stream will contain duplicates with films that have a length both greater than 120 minutes and have a rating \"PG-13\". UNION can be expressed using a Stream of Streams followed by a flatMap(Function.identity()) operator and then followed by .distinct(). The following example creates a Stream with all Films that are of length greater than 120 minutes and then all Films that are of rating \"PG-13\": Stream.of( jpaStreamer.stream(Film.class).filter(Film$.length.greaterThan(120)), jpaStreamer.stream(Film.class).filter(Film$.rating.equal(\"PG-13\")) ) .flatMap(Function.identity()) .distinct() .forEachOrdered(System.out::println); The resulting Stream will not contain duplicates because of the .distinct() operator. It would be more efficient to produce a Stream with the same content (but a different order) using this Stream: jpaStreamer.stream(Film.class) .filter(Film$.length.greaterThan(120).or(Film$.rating.equal(\"PG-13\"))) .forEachOrdered(System.out::println); When performing joins with JPAStreamer the stream source is no longer a single table but multiple joined ones. Such source is defined using a StreamConfiguration with one table as the base. The columns on which to base the join are then specified using .joining() as shown in the example below: jpaStreamer.stream( StreamConfiguration .of(Film.class) (1) .joining(Film$.actors) (2) .joining(Film$.language) (3) ) .filter(Film$.length.between(100, 120)) (4) .forEach(System.out::println); 1 Table with references to other tables 2 Joining in matching entities from the Actor table 3 Joining in matching entities from the Language table 4 Stream operations are applied as usual Join operations require that the relationship between tables is declared in the JPA Entities. For more information and more detailed examples of joins, see Stream Examples - Joins.","title":"SQL Equivalents","component":"jpa-streamer","version":"3.0.4","name":"sql-equivalents","url":"/jpa-streamer/latest/fetching-data/sql-equivalents.html","titles":[{"text":"FROM","hash":"_from","id":1},{"text":"StreamConfiguration","hash":"_streamconfiguration","id":2},{"text":"SELECT","hash":"_select","id":3},{"text":"WHERE","hash":"_where","id":4},{"text":"ORDER BY","hash":"_order_by","id":5},{"text":"OFFSET","hash":"_offset","id":6},{"text":"LIMIT","hash":"_limit","id":7},{"text":"Combining OFFSET and LIMIT","hash":"_combining_offset_and_limit","id":8},{"text":"COUNT","hash":"_count","id":9},{"text":"GROUP BY","hash":"_group_by","id":10},{"text":"HAVING","hash":"_having","id":11},{"text":"DISTINCT","hash":"_distinct","id":12},{"text":"SELECT","hash":"_select_2","id":13},{"text":"UNION ALL","hash":"_union_all","id":14},{"text":"UNION","hash":"_union","id":15},{"text":"JOIN","hash":"_join","id":16}]},"4":{"id":4,"text":"JPAStreamer Docs Fetching Data Stream Examples The section presents several examples that combines the operations described in the previous chapter. All examples are part of the JPAstreamer Demo that can be located here and tested locally on your computer. The examples use the MySQL example database Sakila. It models a classic movie rental store and contains tables such as Film, Actor, Language etc. The following example demonstrates how to serve a request for pages from a GUI or a similar application. The page number (starting with page = 0) and ordering will be given as parameters: private static final int PAGE_SIZE = 20; private static List filmPage(JPAStreamer jpaStreamer, int page, Comparator comparator) { return jpaStreamer.stream(Film.class) .sorted(comparator) .skip(page * PAGE_SIZE) .limit(PAGE_SIZE) .collect(Collectors.toList()); } This method can e.g. be used to fetch the second page of films sorted by title in descending order: filmPage(1, Film$.title.reversed()); Partitioning is a special case of grouping in which there are only two different classes: false or true. Java has its own partitioner that can be used to classify database entities. The example below classifies the films in two different categories: short and long films, where a long film is of length greater than 120 minutes. Map> map = jpaStreamer.stream(Film.class) .collect( Collectors.partitioningBy(Film$.length.greaterThan(120)) ); map.forEach((k, v) -> { System.out.format(\"long is %5s has %d films%n\", k, v.size()); }); This will print: long is false has 543 films long is true has 457 films There are several Stream operations that limit the number of rows obtained from the database (e.g. filter() and limit()). Although, to limit the number of columns we retrieve, JPAstreamer uses Projections. Projections can be used either initially, to limit the Stream source, or in combination with a map()-operation. The following sections describe both methods. Using a Projection, we can initially limit the Stream to include only selected columns. jpaStreamer.stream(Projection.select(Film$.filmId, Film$.title)) (1) .sorted(Film$.length.reversed()) .limit(3) .forEach(System.out::println); 1 Short for StreamConfiguration.of(Film.class).selecting(Projection.select(Film$.filmId, Film$.title)) The Projection is translated by JpaStreamer to a SELECT statement that is applied to the resulting query. This way we limit the given result set to only include values from column film_id and title. The output reveals that all Object fields which are not obtained are given a value of null whereas all primitive fields are assigned either a value of 0 or false (for boolean values): Film{filmId=212, title='DARN FORRESTER', description='null', language=null, actors=[], rentalDuration=null, rentalRate=null, length=null, replacementCost=null, rating='null', specialFeatures='null', lastUpdate=null} Film{filmId=141, title='CHICAGO NORTH', description='null', language=null, actors=[], rentalDuration=null, rentalRate=null, length=null, replacementCost=null, rating='null', specialFeatures='null', lastUpdate=null} Film{filmId=182, title='CONTROL ANTHEM', description='null', language=null, actors=[], rentalDuration=null, rentalRate=null, length=null, replacementCost=null, rating='null', specialFeatures='null', lastUpdate=null} The downside of using a StreamConfiguration as described above is that we are unable to apply filtering and sorting operations to columns which are not included in the initial configuration. In SQL, this corresponds to the statements on the form SELECT A WHERE B=3. This can be resolved by providing a Projection to the map()-operation as follows: List tupleList = jpaStreamer.stream(Film.class) (1) .sorted(Film$.length.reversed()) (2) .limit(3) .map(Projection.select(Film$.filmId, Film$.title)) (3) .collect(Collectors.toList()); System.out.println(\"tupleList = \" + tupleList); 1 The Stream source is not limited in any regard 2 We can apply a sorting operation to the column length even though it is not included in the SELECT clause 3 The mapping results in a Tuple with values for the provided columns This is yet to be optimized in a future release. As of this version, the construct map(Projection.select() works semantically but will still retrieve all columns from the database. See github/speedment/jpa-streamer/issues/23. In the special case of retrieving only a numerical column from the database, you can obtain an IntStream, a DoubleStream or a LongStream using the operations mapToInt(), mapToDouble(), and mapToLong() as follows: int[] filmLengths = jpaStreamer.stream(Film.class) .mapToInt(Film$.length.asInt()) .toArray(); This is yet to be optimized in a future release.As of this version, the constructs mapToInt() etc. works semantically, but the resulting query will still retrieve all columns from the database. Relationships between tables are handled via the JPA provider.Hence, JPAstreamer assumes that the correct relationships are described by the present @Entity beans.The following examples makes use of the three tables Film, Actor and Language from the Sakila database.The corresponding entities are described below: @Entity @Table(name = \"film\", schema = \"sakila\") public class Film { @Id @Column(name = \"film_id\", columnDefinition = \"smallint(5)\") private Integer filmId; @ManyToOne (1) @JoinColumn(name=\"language_id\", nullable = false) private Language language; @ManyToMany(cascade = { CascadeType.ALL }) (2) @JoinTable( name = \"film_actor\", joinColumns = { @JoinColumn(name = \"film_id\") }, inverseJoinColumns = { @JoinColumn(name = \"actor_id\") } ) Set actors = new HashSet<>(); //... } 1 A film can only be spoken in one language (simplified reality) 2 A film can starr many actors @Entity @Table(name = \"language\", schema = \"sakila\") public class Language { @Id @Column(name = \"language_id\", columnDefinition = \"tinyint(5)\") private Integer languageId; @OneToMany(mappedBy = \"language\") (1) private List films; //... } 1 One language can occur in many films @Entity @Table(name = \"actor\", schema = \"sakila\") public class Actor { @Id @Column(name = \"actor_id\", columnDefinition = \"smallint(5)\") private Integer actorId; @ManyToMany(mappedBy = \"actors\") (1) Set films = new ArrayList<>(); //... } 1 An actor can starr in many films So far, we have talked about the relations for joining in entities in other entities (e.g. how an Actor relates to a Film). It is also important when and how that relation is applied. This can be specified using a StreamConfiguration as shown hereunder: import static com.speedment.jpastreamer.streamconfiguration.StreamConfiguration.*; ... jpaStreamer.stream(of(Film.class).joining(Film$.actors).joining(Film$.language)) .filter(Film$.length.between(100, 120)) .forEach(System.out::println); This will create a stream where the film actors and the film language is (JoinType.LEFT) joined into the query, thereby avoiding potential \"select N + 1\" performance problems. More generally, it is possible to specify the join type (JoinType.INNER, JoinType.LEFT or JoinType.RIGHT) using the method: StreamConfiguration joining(Field field, JoinType joinType); A One-to-Many relationship is defined as a relationship between two tables where a row from a first table can have multiple matching rows in a second table. For example, many films can be in the same language. The following example maps the languages to a list of all films that are spoken in that language: Map> languageFilmMap = jpaStreamer.stream(of(Language.class).joining(Language$.films)) .collect(toMap( Function.identity(), Language::getFilms ) ); In this example, we are joining the Language.films thereby preventing an extra query each time Language::getFilms is invoked. A Many-to-One relationship is defined as a relationship between two tables where many multiple rows from a first table can match the same single row in a second table. For example, a single language may be used in many films. The following example maps every film with rating PG-13 to its spoken language: Map languageMap = jpaStreamer.stream(of(Film.class).joining(Film$.language)) (1) .filter(Film$.rating.equal(\"PG-13\")) .collect( Collectors.toMap(Function.identity(), (2) Film::getLanguage (3) ) ); 1 Stream over the Film-table (joining in the field language) 2 The identity function assigns the current Film as the key 3 Enters the spoken language as the value If printed with some formatting this may yield the following output: ALTER VICTORY: English APOLLO TEEN: English AIRPLANE SIERRA: English ... A Many-to-Many relationship is defined as a relationship between two tables where many multiple rows from a first table can match multiple rows in a second table. Often a third table is used to form these relations. For example, an actor may participate in several films and a film usually have several actors. Given the entities above, we can create a filmography that maps every actor to a list of films that they have starred in: Map> filmography = jpaStreamer.stream(of(Actor.class).joining(Actor$.films)) (1) .collect( Collectors.toMap(Function.identity(), (2) Actor::getFilms (3) ) ); 1 Stream over the Actor-table (joining the field films) 2 The identity function assigns the current Actor as the key 3 Enters the List of films as the value If printed with some formatting this may yield the following output: JENNIFER DAVIS: [GREEDY ROOTS, HANOVER GALAXY, ... ] ED CHASE: [ARTIST COLDBLOODED, IMAGE PRINCESS, ... ] NICK WAHLBERG: [JEKYLL FROGMEN, CHISUM BEHAVIOR, ... ] ... The following example shows a pivot table of all the actors and the number of films they have participated in for each film rating category (e.g. “PG-13”): Map> pivot = jpaStreamer.stream(of(Actor.class).joining(Actor$.films)) (1) .collect( groupingBy(Function.identity(), (2) Collectors.flatMapping(a -> a.getFilms().stream(), (3) groupingBy(Film::getRating, counting()) (4) ) ) ); As this is a more advanced example it requires some thinking to understand. 1 Streams the Actor table (joining the field films) 2 Assigns Actor as the key 3 Applies a downstream collector which flatmaps all the films which the actor starr in 4 The films are grouped according to rating, and the number of films of each rating is counted Collectors.flatMapping() is only present in Java 9 and forward. This will produce the following (slightly simplified) output: MICHAEL BOLGER {PG-13=9, R=3, NC-17=6, PG=4, G=8} LAURA BRODY {PG-13=8, R=3, NC-17=6, PG=6, G=3} CAMERON ZELLWEGER {PG-13=8, R=2, NC-17=3, PG=15, G=5} ...","title":"Stream Examples","component":"jpa-streamer","version":"3.0.4","name":"stream-examples","url":"/jpa-streamer/latest/fetching-data/stream-examples.html","titles":[{"text":"Paging","hash":"_paging","id":1},{"text":"Partition By","hash":"_partition_by","id":2},{"text":"Projection","hash":"_projection","id":3},{"text":"Initial Stream configuration","hash":"_initial_stream_configuration","id":4},{"text":"Using a map-operation","hash":"_using_a_map_operation","id":5},{"text":"Retrieving a numerical column","hash":"_retrieving_a_numerical_column","id":6},{"text":"Joins","hash":"_joins","id":7},{"text":"Specifying Stream Joining","hash":"_specifying_stream_joining","id":8},{"text":"One-to-Many relations","hash":"_one_to_many_relations","id":9},{"text":"Many-to-One relations","hash":"_many_to_one_relations","id":10},{"text":"Many-to-Many relations","hash":"_many_to_many_relations","id":11},{"text":"Pivot Data","hash":"_pivot_data","id":12}]},"5":{"id":5,"text":"JPAStreamer Docs Get JPAstreamer CDI Integration JPAstreamer comes with first-party support for projects built on top of CDI. Dependency Injection is a fundamental feature of the CDI API. With this in mind, a JPAstreamer CDI producer can be used to quickly and easily integrate JPAstreamer into your CDI projects. The installation process will differ depending on the build tool you’re using. In this guide, Maven and Gradle are covered. For Maven projects, the following JPAstreamer dependency must be added to the project’s pom.xml file: com.speedment.jpastreamer.integration.cdi cdi-jpastreamer ${jpa-streamer-version} For Gradle projects, the following JPAstreamer dependency must be added to the project’s build.gradle file: repositories { mavenCentral() } dependencies { compile \"com.speedment.jpastreamer.integration.cdi:cdi-jpastreamer:version\" } Once the required dependencies are installed, you can access JPAStreamer using CDI’s Dependency Injection system: @ApplicationScoped public class DummyService { @Inject JPAStreamer jpaStreamer; } Direct field injection is usually not recommended, it’s preferable to inject your dependencies via a constructor: @ApplicationScoped public class DummyService { private final JPAStreamer jpaStreamer; @Inject public DummyService(final JPAStreamer jpaStreamer) { this.jpaStreamer = jpaStreamer; } } JPAstreamer’s CDI injection relies on a EntityManagerFactory bean being present. If you’re using JPA, this is already handled for you.","title":"CDI Integration","component":"jpa-streamer","version":"3.0.4","name":"cdi_integration","url":"/jpa-streamer/latest/get-jpa-streamer/cdi_integration.html","titles":[{"text":"Installing the CDI producer","hash":"_installing_the_cdi_producer","id":1},{"text":"Maven","hash":"_maven","id":2},{"text":"Gradle","hash":"_gradle","id":3},{"text":"Accessing JPAstreamer","hash":"_accessing_jpastreamer","id":4}]},"6":{"id":6,"text":"JPAStreamer Docs Hibernate Integration","title":"Hibernate Integration","component":"jpa-streamer","version":"3.0.4","name":"hibernate_integration","url":"/jpa-streamer/latest/get-jpa-streamer/hibernate_integration.html","titles":[]},"7":{"id":7,"text":"JPAStreamer Docs Get JPAstreamer Install with Gradle Since JPAStreamer acts merely as an API extension for any existing JPA provider it requires minimal installation and configuration efforts. You only need to specify that the JPAStreamer dependency is required to compile your source code. JPAStreamer requires use of Java 8 or later. To install, add the following code to the project’s build.gradle-file: repositories { mavenCentral() } dependencies { (1) compile \"com.speedment.jpastreamer:jpastreamer-core:version\" annotationProcessor \"com.speedment.jpastreamer:fieldgenerator-standard:version\" } sourceSets { (2) main { java { srcDir 'src/main/java' srcDir 'target/generated-sources/annotations'(3) } } } 1 The required JPAstreamer dependencies 2 Picks up the generated metamodel as an additional source directory 3 Path to the generated sources","title":"Install with Gradle","component":"jpa-streamer","version":"3.0.4","name":"install-gradle","url":"/jpa-streamer/latest/get-jpa-streamer/install-gradle.html","titles":[]},"8":{"id":8,"text":"JPAStreamer Docs Get JPAstreamer Install with Maven Since JPAStreamer acts merely as an API extension for any existing JPA provider it requires minimal installation and configuration efforts. You only need to specify that the JPAStreamer dependency is required to compile your source code. JPAStreamer requires use of Java 8 or later. To install, add the following code to the project’s pom.xml-file: (1) com.speedment.jpastreamer jpastreamer-core ${jpa-streamer-version} (2) org.codehaus.mojo build-helper-maven-plugin 3.2.0 generate-sources add-source ${project.build.directory}/generated-sources/annotations(3) 1 The JPAstreamer core dependency 2 Picks up the generated metamodel as an additional source directory 3 Path to the generated sources","title":"Install with Maven","component":"jpa-streamer","version":"3.0.4","name":"install-maven","url":"/jpa-streamer/latest/get-jpa-streamer/install-maven.html","titles":[]},"9":{"id":9,"text":"JPAStreamer Docs Get JPAstreamer Spring Integration JPAStreamer comes with first-party support for projects built on top of Spring Boot. Dependency Injection is a fundamental feature of the Spring framework. With this in mind, a JPAStreamer autoconfiguration module can be used to quickly and easily integrate JPAStreamer into your Spring Boot projects. The installation process will differ depending on the build tool you’re using. In this guide, Maven and Gradle are covered. For Maven projects, the following JPAStreamer dependency must be added to the project’s pom.xml file: com.speedment.jpastreamer.integration.spring spring-boot-jpastreamer-autoconfigure ${jpa-streamer-version} For Gradle projects, the following JPAStreamer dependency must be added to the project’s build.gradle file: repositories { mavenCentral() } dependencies { compile \"com.speedment.jpastreamer.integration.spring:spring-boot-jpastreamer-autoconfigure:version\" } Once the required dependencies are installed, you must make JPAStreamer available for injection by explicitly scanning for annotated components. This is done by setting the parameter scanBasePackages on the SpringBootApplication annotation as follows: @SpringBootApplication(scanBasePackages={\"com.speedment.jpastreamer\"}) If you need to scan multiple base packages, just use a comma separated list e.g. \"com.package.A, com.package.B\". You should now be able to access JPAStreamer using Spring’s Dependency Injection system: @Service public class DummyService { @Autowired private final JPAStreamer jpaStreamer; } Direct field injection is usually not recommended, it’s preferable to inject your dependencies via a constructor: @Service public class DummyService { private final JPAStreamer jpaStreamer; @Autowired public DummyService(final JPAStreamer jpaStreamer) { this.jpaStreamer = jpaStreamer; } } JPAStreamer’s autoconfiguration relies on a EntityManagerFactory bean being present. If you’re using Spring Data JPA, this is already handled for you.","title":"Spring Integration","component":"jpa-streamer","version":"3.0.4","name":"spring_integration","url":"/jpa-streamer/latest/get-jpa-streamer/spring_integration.html","titles":[{"text":"Installing the autoconfiguration module","hash":"_installing_the_autoconfiguration_module","id":1},{"text":"Maven","hash":"_maven","id":2},{"text":"Gradle","hash":"_gradle","id":3},{"text":"Accessing JPAStreamer","hash":"_accessing_jpastreamer","id":4}]},"10":{"id":10,"text":"JPAStreamer Docs How JPAstreamer Works JPAstreamer is a library that enriches the API of an existing JPA provider to include Java Streams as a way to express queries. To do so, JPAstreamer consists of two key parts: The annotation processor that generates a metamodel used to compose predicates that can be interpreted by The Stream renderer. The Stream renderer that inspects the Stream pipelines and renders optimized JPA queries. This section describes how both of these components operate and why they are essential. JPAstreamer requires its own metamodel of the JPA entity beans to render the Java Streams to JPA queries. The metamodel is automatically generated by an annotation processor that operates at compile time as soon as JPAstreamer has been installed. The annotation processor inspects all classes annotated with @Entity, e.g. Foo.class and generates an equivalent Foo$ that represents every column as a Field which can be used to obtain predicates. Let’s have a closer look at the metamodel. The metamodel contains a representation of all @Entity-beans in the application. This means, an @Entity-bean named Film will have a corresponding generated class named Film$ as below: @Entity @Table(name = \"film\", schema = \"sakila\") public class Film { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \"film_id\", nullable = false, updatable = false, columnDefinition = \"smallint(5)\") private Integer filmId; @Column(name = \"title\", nullable = false, columnDefinition = \"varchar(255)\") private String title; // ... } Will be represented in the metamodel as: public class Film$ { public static final ComparableField filmId = ComparableField.create( Film.class, (1) \"filmId\", (2) Film::getFilmId, (3) false (4) ); public static final StringField title = StringField.create( Film.class, \"title\", Film::getTitle, false ); // ... } 1 Declares which table the Field belongs to 2 The name of the field 3 A reference to the associated getter 4 A boolean that describes if the Field is nullable Having access to these fields, operators can be applied which returns a Predicate that can be evaluated by The Stream renderer. For example: long nrOfFilmsStartingWithA = jpaStreamer.stream(Film.class) .filter(Film$.title.startsWith(\"A\")) \"(1) .count(); 1 As title is of type StringField we get access to operators such as startsWith that returns a Predicate that evaluates to true or false. You can read more about the use of fields and predicates here. The metamodel is stored in the projects target-folder and does not need to be checked-in with your source code, nor needs testing. NOTE: The package where generated entities are placed, as well as the name of the generated entities can be configured. Learn more here. Most JPA providers, by default, have the ability to provide the query result as a Stream. That makes it possible to e.g. select all rows of a table and then use Stream operators to narrow down the results. Although, that process requires every object of the table to be materialized by the JVM, which is not desired as it impedes the performance. As Stream is merely a Java interface, JPAstreamer is free to use a custom implementation of that interface. By doing so, JPAstreamer can render what seem like ordinary Streams to optimized JPA queries. The renderer inspects the Stream pipeline and translates the Stream operators to JPA constructs as shown below: jpaStreamer.stream(Film.class) .filter(Film$.rating.equal(\"G\").and(Film$.length.greaterThan(100))) .sorted(Film$.length.reversed().thenComparing(Film$.title.comparator())) .skip(10) .limit(5) .forEach(System.out::println); This Stream is rendered to the following JPA query when executed: select film0_.film_id as film_id1_0_, film0_.description as descript2_0_, film0_.last_update as last_upd3_0_, film0_.length as length4_0_, film0_.rating as rating5_0_, film0_.rental_duration as rental_d6_0_, film0_.rental_rate as rental_r7_0_, film0_.replacement_cost as replacem8_0_, film0_.special_features as special_9_0_, film0_.title as title10_0_ from (1) film film0_ where (2) film0_.rating=? and film0_.length>100 order by (3) film0_.length desc, film0_.title asc limit ?, ? 1 Corresponds to stream(Film.class) 2 Corresponds to filter() 3 Corresponds to sort() This way we obtain the expressiveness of the Stream API without compromising the performance of the queries. For JPAstreamer to render optimized queries you must use the generated fields shown in JPAstreamer's metamodel. Read more about this in the chapter JPAstreamer Predicates.","title":"How JPAstreamer Works","component":"jpa-streamer","version":"3.0.4","name":"how-it-works","url":"/jpa-streamer/latest/how-it-works/how-it-works.html","titles":[{"text":"The annotation processor","hash":"_the_annotation_processor","id":1},{"text":"JPAstreamer's metamodel","hash":"_jpastreamers_metamodel","id":2},{"text":"The Stream renderer","hash":"_the_stream_renderer","id":3}]},"11":{"id":11,"text":"JPAStreamer Docs Predicates Combining Predicates A predicate can be composed of other predicates by means of the and() and or() methods as shown in the examples below. The and() method returns a composed predicate that represents a short-circuiting logical AND of a first predicate and another given second predicate. If the first predicate is evaluated to false, then the second predicate is not evaluated. The following code sample will print out all films that are long (apparently a film is long when its length is greater than 120 minutes) and that has a rating that is \"PG-13\": Predicate isLong = Film$.length.greaterThan(120); Predicate isPG13 = Film$.rating.equal(\"PG-13\"); jpaStreamer.stream(Film.class) .filter(isLong.and(isPG13)) .forEachOrdered(System.out::println); This will produce the following output: Film { filmId = 33, title = APOLLO TEEN, ... , length = 153, ..., rating = PG-13, ... Film { filmId = 35, title = ARACHNOPHOBIA ROLLERCOASTER, ..., length = 147, ..., rating = PG-13, ... Film { filmId = 36, title = ARGONAUTS TOWN, ..., length = 127, ..., rating = PG-13, ... ... The same result can be achieved by just stacking two filter operations on top of each other. So this: jpaStreamer.stream(Film.class) .filter(Film$.length.greaterThan(120)) .filter(Film$.rating.equal(\"PG-13\")) .forEachOrdered(System.out::println); is equivalent to: jpaStreamer.stream(Film.class) .filter(Film$.length.greaterThan(120).and(Film$.rating.equal(\"PG-13\")) .forEachOrdered(System.out::println); The or() method returns a composed predicate that represents a short-circuiting logical OR of a first predicate and another given second predicate. If the first predicate is evaluated to true, then the second predicate is not evaluated. The following code sample will print out all films that are either long (length > 120) or has a rating of \"PG-13\": Predicate isLong = Film$.length.greaterThan(120); Predicate isPG13 = Film$.rating.equal(\"PG-13\"); jpaStreamer.stream(Film.class) .filter(isLong.or(isPG13)) .forEachOrdered(System.out::println); This will produce the following output: Film { filmId = 5, title = AFRICAN EGG, ..., length = 130, ..., rating = G, ... Film { filmId = 6, title = AGENT TRUMAN, ..., length = 169, ..., rating = PG, ... Film { filmId = 7, title = AIRPLANE SIERRA, ..., length = 62, ..., rating = PG-13, ... ... As for the and() method, there is an equivalent way of expressing compositions with or(). Here is an example of how streams can be concatenated to obtain the same functionality as above: StreamComposition.concatAndAutoClose( jpaStreamer.stream(Film.class).filter(Film$.length.greaterThan(120)), jpaStreamer.stream(Film.class).filter(Film$.rating.equal(\"PG-13\")) ) .distinct() .forEachOrdered(System.out::println); Film { filmId = 5, title = AFRICAN EGG, ..., length = 130, ..., rating = G, ... Film { filmId = 6, title = AGENT TRUMAN, ..., length = 169, ..., rating = PG, ... {... a number of films with length > 120} Film { filmId = 7, title = AIRPLANE SIERRA, ..., length = 62, ..., rating = PG-13, ... {... a number of films with rating = \"PG-13} ... In this case, optimized queries will be used for the two sub-streams but the films must be handled by the JVM from the .distinct() operation. JPAstreamer can optimize Predicate::or better than a concatenation of streams followed by a distinct() operation.","title":"Combining Predicates","component":"jpa-streamer","version":"3.0.4","name":"combining-predicates","url":"/jpa-streamer/latest/predicates/combining-predicates.html","titles":[{"text":"and","hash":"_and","id":1},{"text":"or","hash":"_or","id":2}]},"12":{"id":12,"text":"JPAStreamer Docs Predicates Comparable Predicates The following additional methods are available to a ReferenceField that is always associated to a Comparable field (e.g. Integer, String, Date, Time etc.). Comparable fields can be tested for equality and can also be compared to other objects of the same type. The \"Condition\" in the table below is the condition for which the corresponding Predicate will hold true: Method Param Type Operation Condition equal V Objects.equals(p, field) the field is equal to the parameter notEqual V !Objects.equals(p, field) the field is not equal to the parameter lessThan V field p the field is greater than the parameter greaterOrEqual V field >= p the field is greater or equal to the parameter between V,V field >= s && field ? s && field = e the field is not between p1 (exclusive) and p2 (inclusive) notBetween V,V, Inclusion field ? e the field is not between s and e with inclusion according to the given Inclusion parameter (START_INCLUSIVE_END_INCLUSIVE, START_INCLUSIVE_END_EXCLUSIVE, START_EXCLUSIVE_END_INCLUSIVE and START_EXCLUSIVE_END_EXCLUSIVE) in V[] array p contains field the array parameter contains the field in Collection p.contains(field) the Collection contains the field notIn V[] array p does not contain field the array parameter does not contain the field notIn Collection !p.contains(field) the Collection does not contain the field Fields that are null will never fulfill any of the predicates in the list above. Thus, neither equals nor notEquals will return true for null values. The reason equal is not named equals is that the latter name is already used as a method name by the Object class (that every other class inherits from). The latter method has a different meaning than function than equal so a new name had to be used. A ComparableField implements the interface traits HasReferenceOperators and HasComparableOperators. Here is a list with examples for the Comparable Predicates. The examples below assume that the database contains a number of films with ratings according to the Motion Picture Association of America (MPAA) film rating system: G General Audience PG Parental Guidance Suggested PG-13 PG-13 – Parents Strongly Cautioned R R – Restricted NC-17 NC-17 – Adults Only To count all films with a rating that equals \"PG-13\" you can write the following snippet: long count = jpaStreamer.stream(Film.class) .filter(Film$.rating.equal(\"PG-13\")) .count(); System.out.format(\"There are %d films(s) with a PG-13 rating %n\", count); The code will produce the following output: There are 223 films(s) with a PG-13 rating The following example prints all films that has a rating that is not \"PG-13\": jpaStreamer.stream(Film.class) .filter(Film$.rating.notEqual(\"PG-13\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ..., rating = PG, ... Film { filmId = 2, title = ACE GOLDFINGER, ..., rating = G, ... Film { filmId = 3, title = ADAPTATION HOLES, ..., rating = NC-17, ... Film { filmId = 4, title = AFFAIR PREJUDICE, ..., rating = G, ... Film { filmId = 5, title = AFRICAN EGG, ..., rating = G, ... Film { filmId = 6, title = AGENT TRUMAN, ..., rating = PG, ... Film { filmId = 8, title = AIRPORT POLLOCK, ..., rating = R, ... ... The following example prints all films that has a length that is less or equal to 120: jpaStreamer.stream(Film.class) .filter(Film$.length.lessThan(120)) .forEachOrdered(System.out::println); The code will produce the following output: Fil { filmId = 1, title = ACADEMY DINOSAUR, ..., length = 86, ... Film { filmId = 2, title = ACE GOLDFINGER, ..., length = 48, ... Film { filmId = 3, title = ADAPTATION HOLES, ..., length = 50, ... Film { filmId = 4, title = AFFAIR PREJUDICE, ..., length = 117, ... Film { filmId = 7, title = AIRPLANE SIERRA, ..., length = 62, ... ... The following example prints all films that has a length that is greater than 120: jpaStreamer.stream(Film.class) .filter(Film$.length.greaterThan(120)) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 5, title = AFRICAN EGG, ..., length = 130, ... Film { filmId = 6, title = AGENT TRUMAN, ..., length = 169, ... Film { filmId = 11, title = ALAMO VIDEOTAPE, ..., length = 126, ... ... The following example prints all films that has a length that is greater than or equal to 120: jpaStreamer.stream(Film.class) .filter(Film$.length.greaterOrEqual(120)) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 5, title = AFRICAN EGG, ..., length = 130, ... Film { filmId = 6, title = AGENT TRUMAN, ..., length = 169, ... Film { filmId = 11, title = ALAMO VIDEOTAPE, ..., length = 126, ... ... The following example prints all films that has a length that is between 60 (inclusive) and 120 (exclusive): jpaStreamer.stream(Film.class) .filter(Film$.length.between(60, 120)) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ..., length = 86, ... Film { filmId = 4, title = AFFAIR PREJUDICE, ...,, length = 117, ... Film { filmId = 7, title = AIRPLANE SIERRA, ..., length = 62, ... Film { filmId = 9, title = ALABAMA DEVIL, ..., length = 114, ... ... There is also another variant of the between predicate where an {{site.data.javadoc.Inclusion}} parameter determines if a range of results should be start and/or end-inclusive. For an example, take the series [1 2 3 4 5]. If we select elements in the range (2, 4) from this series, we will get the following results: # Inclusive Enum Constant Included Elements 0 START_INCLUSIVE_END_INCLUSIVE [2, 3, 4] 1 START_INCLUSIVE_END_EXCLUSIVE [2, 3] 2 START_EXCLUSIVE_END_INCLUSIVE [3, 4] 3 START_EXCLUSIVE_END_EXCLUSIVE [3] Here is an example that prints all films that has a length that is between 3 (inclusive) and 9 (inclusive): jpaStreamer.stream(Film.class) .filter(Film$.length.between(60, 120, Inclusion.START_INCLUSIVE_END_INCLUSIVE)) The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ..., length = 86, ... Film { filmId = 4, title = AFFAIR PREJUDICE, ...,, length = 117, ... Film { filmId = 7, title = AIRPLANE SIERRA, ..., length = 62, ... Film { filmId = 9, title = ALABAMA DEVIL, ..., length = 114, ... ... The order of the two parameters start and end is significant. If the start parameter is larger than the end parameter, then the between Predicate will always evaluate to false. The following example prints all films that has a length that is not between 60 (inclusive) and 120 (exclusive): jpaStreamer.stream(Film.class) .filter(Film$.length.notBetween(60, 120)) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 2, ..., length = 48, ... Film { filmId = 3, ..., length = 50, ... Film { filmId = 5, ..., length = 130, ... Film { filmId = 6, ..., length = 169, ... Note that a film with length 120 is printed because 120 is outside the range 60 (inclusive) and 120 (exclusive) (because 120 is NOT in the range as 120 is exclusive). There is also another variant of the notBetween predicate where an {{site.data.javadoc.Inclusion}} parameter determines if a range of results should be start and/or end-inclusive. For an example, take the series [1 2 3 4 5]. If you select elements not in the range (2, 4) from this series, we will get the following results: # Inclusive Enum Constant Included Elements 0 START_INCLUSIVE_END_INCLUSIVE [1, 5] 1 START_INCLUSIVE_END_EXCLUSIVE [1, 4, 5] 2 START_EXCLUSIVE_END_INCLUSIVE [1, 2, 5] 3 START_EXCLUSIVE_END_EXCLUSIVE [1, 2, 4, 5] Here is an example that prints all films that has a length that is not between 60 (inclusive) and 120 (inclusive): jpaStreamer.stream(Film.class) .filter(Film$.length.notBetween(60, 120, Inclusion.START_INCLUSIVE_END_INCLUSIVE)) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 2, ..., length = 48, ... Film { filmId = 3, ..., length = 50, ... Film { filmId = 5, ..., length = 130, ... Film { filmId = 6, ..., length = 169, ... ... The order of the two parameters start and end is significant. If the start parameter is larger than the end parameter, then the notBetween Predicate will always evaluate to true. Here is an example that prints all films that has a rating that is either \"G\", \"PG\" or \"PG-13\": jpaStreamer.stream(Film.class) .filter(Film$.rating.in(\"G\", \"PG\", \"PG-13\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, ..., rating = PG, ... Film { filmId = 2, ..., rating = G, ... Film { filmId = 4, ..., rating = G, ... ... There is also a variant of the in predicate that takes a Collection as a parameter. For example like this: Set set = Stream.of(\"G\", \"PG\", \"PG-13\").collect(toSet()); jpaStreamer.stream(Film.class) .filter(Film$.rating.in(set)) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, ..., rating = PG, ... Film { filmId = 2, ..., rating = G, ... Film { filmId = 4, ..., rating = G, ... ... Here is an example that prints all films that has a rating that is neither \"G\", \"PG\" nor \"PG-13\": jpaStreamer.stream(Film.class) .filter(Film$.rating.notIn(\"G\", \"PG\", \"PG-13\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 3, ..., rating = NC-17, ... Film { filmId = 8, ..., rating = R, ... Film { filmId = 10, ..., rating = NC-17, ... There is also a variant of the noIn predicate that takes a Collection as a parameter. For example like this: Set set = Stream.of(\"G\", \"PG\", \"PG-13\").collect(toSet()); jpaStreamer.stream(Film.class) .filter(Film$.rating.notIn(set)) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 3, ..., rating = NC-17, ... Film { filmId = 8, ..., rating = R, ... Film { filmId = 10, ..., rating = NC-17, ... ...","title":"Comparable Predicates","component":"jpa-streamer","version":"3.0.4","name":"comparable-predicates","url":"/jpa-streamer/latest/predicates/comparable-predicates.html","titles":[{"text":"Examples","hash":"_examples","id":1},{"text":"equal","hash":"_equal","id":2},{"text":"notEqual","hash":"_notequal","id":3},{"text":"lessThan","hash":"_lessthan","id":4},{"text":"greaterThan","hash":"_greaterthan","id":5},{"text":"greaterOrEqual","hash":"_greaterorequal","id":6},{"text":"between","hash":"_between","id":7},{"text":"notBetween","hash":"_notbetween","id":8},{"text":"in","hash":"_in","id":9},{"text":"notIn","hash":"_notin","id":10}]},"13":{"id":13,"text":"JPAStreamer Docs Predicates Negating Predicates All predicates (including already negated predicates) can be negated by calling the negate() method. Negation means that the result of the Predicate will be inverted (i.e. true becomes false and false becomes true). Here is a list of predicates and their corresponding negation: Predicate Equivalent Predicate isNull().negate() isNotNull() isNotNull().negate() isNull() Predicate Equivalent Predicate equal.negate(p) notEqual(p) notEqual(p).negate() equal(p) lessThan(p).negate() greaterOrEqual(p) lessOrEqual(p).negate() greaterThan(p) greaterThan(p).negate() lessOrEqual(p) greaterOrEqual(p).negate() lessThan(p) between(s, e).negate() notBetween(s, e) notBetween(s, e).negate() between(s, e) in(a, b, c).negate() notIn(a, b, c) notIn(a, b, c).negate() in(a, b, c) Predicate Equivalent Predicate isEmpty().negate() isNotEmpty() isNotEmpty().negate() isEmpty() equalIgnoreCase(p).negate() notEqualIgnoreCase(p) notEqualIgnoreCase(p).negate() equalIgnoreCase(p) startsWith(p).negate() notStartsWith(p) notStartsWith(p).negate() startsWith(p) startsWithIgnoreCase(p).negate() notStartsWithIgnoreCase(p) notStartsWithIgnoreCase(p).negate() startsWithIgnoreCase(p) endsWith(p).negate() notEndsWith(p) notEndsWith(p).negate() endsWith(p) endsWithIgnoreCase(p).negate() notEndsWithIgnoreCase(p) notStartsWithIgnoreCase(p).negate() startsWithIgnoreCase(p) contains(p).negate() notContains(p) notContains(p).negate() contains(p) containsIgnoreCase(p).negate() notContainsIgnoreCase(p) notContainsIgnoreCase(p).negate() containsIgnoreCase(p) This means that Film$.film_id.equal(1).negate() is equivalent to Film$.film_id.notEqual(1) and Film$.film_id.between(1,100).negate() is equivalent to Film$.film_id.notBetween(1, 100). Negating a Predicate an even number of times will give back the original Predicate. E.g. Film$.film_id.equal(1).negate().negate() is equivalent to Film$.film_id.equal(1)","title":"Negating Predicates","component":"jpa-streamer","version":"3.0.4","name":"negating-predicates","url":"/jpa-streamer/latest/predicates/negating-predicates.html","titles":[{"text":"Reference Predicates","hash":"_reference_predicates","id":1},{"text":"Comparable Predicates","hash":"_comparable_predicates","id":2},{"text":"String Predicates","hash":"_string_predicates","id":3}]},"14":{"id":14,"text":"JPAStreamer Docs Predicates In JPAstreamer, the concept of fields and predicates is of central importance to achieve optimal performance. If you haven’t already, we recommend reading the chapter How JPAstreamer Works, to understand how fields are used by the JPAstreamer renderer to obtain optimized JPA queries. Predicate is a functional Java interface. An instance implementing this interface has a boolean function test that takes a parameter of type T and returns either true or false. JPAstreamer uses such predicates as arguments for Stream operations i.e. filter() and sort(). Here is an example that uses a Predicate to return true if the String begins with an \"A\" and false otherwise: Predicate startsWithA = (String s) -> s.startsWith(\"A\"); Stream.of(\"Snail\", \"Ape\", \"Bird\", \"Ant\", \"Alligator\") .filter(startsWithA) .forEachOrdered(System.out::println); This will print all animals that starts with \"A\": Ape, Ant and Alligator because the filter operator will only pass forward those elements where its Predicate returns true. The official JavaDoc contains more information about the interface Predicate. The fields included as part of the JPAstreamer metamodel (described here) can be used to produce Predicates that are related to the field. Here is an example of how a StringField can be used in conjuction with a Film object: jpaStreamer.stream(Film.class) .filter(Film$.title.startsWith(\"A\")) .forEachOrdered(System.out::println); In this example, the StringField 's method Film$.title::startsWith creates and returns a Predicate that, when tested with a Film, will return true if and only if that Film has a title that starts with an \"A\" (otherwise it will return false). When run, the code above will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, description = ... Film { filmId = 2, title = ACE GOLDFINGER, description = ... ... It would be possible to express the same semantics using a standard anonymous lambda: films.stream() .filter(f -> f.getTitle().startsWith(\"A\")) .forEachOrdered(System.out::println); but JPAstreamer would not be able to recognize and optimize such vanilla lambdas. This means JPAstreamer is forced to pull in the entire Film table and then apply the predicates in the JVM. Because of this, developers are highly encouraged to use the provided Fields when obtaining predicates because these predicates will always be recognizable by the JPAstreamer query optimizer. Do this: filter(Film$.title.greaterOrEqual(\"He\")) Don’t do this: filter(f → \"He\".compareTo(f.getTitle()) ⇐ 0) JPAstreamer uses a variety of field types to represent the attributes of the entity-classes. This is partly due to the fact that different types are compatible with different operations, but also for performance reasons. Below is a table describing how attribute types are mapped to fields. Table 1. How JPAstreamer’s metamodel represents the attribute types as fields Attribute type Field type int IntField double DoubleField float FloatField byte ByteField long LongField short ShortField char CharField Enum EnumField bool BooleanField String StringField Integer ComparableField Double ComparableField Float ComparableField Byte ComparableField Long ComparableField Short ComparableField Character ComparableField Boolean ComparableField CustomType ReferenceField Class[] ReferenceField[]> Set ReferenceField> Map ReferenceField> List ReferenceField> LocalDate ComparableField LocalDateTime ComparableField LocalTime ComparableField Calendar ComparableField java.util.Date ComparableField java.sql.Time ComparableField java.sql.Date ComparableField java.sql.Timestamp ComparableField The following chapters will describe how to get predicates from different Field types and how these predicates can be combined and negated. Reference Predicates describes what predicates can be obtained from ReferenceField Comparable Predicates describes what predicates can be obtained from ComparableField Primitive Predicates describes what predicates can be obtained from all primitive fields i.e. IntField and DoubleField String Fields describes what predicates can be obtained from StringField","title":"JPAstreamer Predicates","component":"jpa-streamer","version":"3.0.4","name":"predicates","url":"/jpa-streamer/latest/predicates/predicates.html","titles":[{"text":"What is a Predicate?","hash":"_what_is_a_predicate","id":1},{"text":"Fields","hash":"_fields","id":2},{"text":"Field types","hash":"_field_types","id":3}]},"15":{"id":15,"text":"JPAStreamer Docs Predicates Primitive Predicates For performance reasons, there are a number of primitive field types available in addition to the ReferenceField type. By using a primitive field, unnecessary boxing and auto-boxing can be avoided. Primitive fields also generate primitive predicates like IntEqualPredicate or LongEqualPredicate. The following primitive types and their corresponding field types are supported by JPAstreamer: Primitive Type Primitive Field Type Example of Predicate implementations byte ByteField ByteEqualPredicate and ByteGreaterThanPredicate short ShortField ShortEqualPredicate and ShortGreaterThanPredicate int IntField IntEqualPredicate and IntGreaterThanPredicate long LongField LongEqualPredicate and LongGreaterThanPredicate float FloatField FloatEqualPredicate and FloatGreaterThanPredicate double DoubleField DoubleEqualPredicate and DoubleGreaterThanPredicate char CharField CharEqualPredicate and CharGreatersThanPredicate boolean BooleanField BooleanPredicate This is something that is handled automatically by JPAstreamer under the hood and does not require any additional coding. The code will simply run faster with these specializations.","title":"Primitive Predicates","component":"jpa-streamer","version":"3.0.4","name":"primitive-predicates","url":"/jpa-streamer/latest/predicates/primitive-predicates.html","titles":[]},"16":{"id":16,"text":"JPAStreamer Docs Predicates Reference Predicates The following methods are available to all ReferenceFields (i.e. fields that are not primitive fields). The \"Condition\" in the table below is the condition for which the corresponding Predicate will hold true: Method Param Type Operation Condition isNull N/A field == null the field is null isNotNull N/A field != null the field is not null A ReferenceField implements the interface trait HasReferenceOperators. Below are examples of how the reference predicates can be used. Both examples operate on the JPA entity Film which has a rating field like so: @Entity @Table(name = \"film\", schema = \"sakila\") public class Film { // ... @Column(name = \"rating\", nullable = true, columnDefinition = \"enum('G','PG','PG-13','R','NC-17')\") private String rating; // ... } The referenced table is present in the MySQL example database Sakila. All films with a rating that is null can be counted like this: long count = jpaStreamer.stream(Film.class) .filter(Film$.rating.isNull()) .count(); System.out.format(\"There are %d films with a null rating %n\", count); The code will produce the following output: There are 0 films with a null rating All films with a rating that is not null can be counted like this: long count = jpaStreamer.stream(Film.class) .filter(Film$.rating.isNotNull()) .count(); System.out.format(\"There are %d films with a non-null rating %n\", count); The code will produce the following output: There are 1000 films with a non-null rating","title":"Reference Predicates","component":"jpa-streamer","version":"3.0.4","name":"reference-predicates","url":"/jpa-streamer/latest/predicates/reference-predicates.html","titles":[{"text":"Examples","hash":"_examples","id":1},{"text":"isNull","hash":"_isnull","id":2},{"text":"isNotNull","hash":"_isnotnull","id":3}]},"17":{"id":17,"text":"JPAStreamer Docs Predicates String Predicates The following additional methods (over ReferenceField) are available to a StringField. The \"Condition\" in the table below is the condition for which the corresponding Predicate will hold true: Method Param Type Operation Condition isEmpty String String::isEmpty the field is empty (i.e. field.length() == 0) isNotEmpty String !String::isEmpty the field is not empty (i.e. field.length() !=0) equalIgnoreCase String String::equalsIgnoreCase the field is equal to the given parameter ignoring case notEqualIgnoreCase String !String::equalsIgnoreCase the field is not equal to the given parameter ignoring case startsWith String String::startsWith the field starts with the given parameter notStartsWith String !String::startsWith the field does not start with the given parameter startsWithIgnoreCase String String::startsWith ic the field starts with the given parameter ignoring case notStartsWithIgnoreCase String !String::startsWith ic the field does not start with the given parameter ignoring case endsWith String String::endsWith the field ends with the given parameter notEndsWith String !String::endsWith the field does not end with the given parameter endsWithIgnoreCase String String::endsWith ic the field ends with the given parameter notEndsWithIgnoreCase String !String::endsWith ic the field does not end with the given parameter contains String String::contains the field contains the given parameter notContains String !String::contains the field does not contain the given parameter containsIgnoreCase String String::contains ic the field contains the given parameter ignoring case notContainsIgnoreCase String !String::contains ic Fields that are null will never fulfill any of the predicates in the list above. Thus, neither contains nor notContains will return true for null values. A StringField implements the interface traits HasReferenceOperators, HasComparableOperators} and HasStringOperators. An informal notation of method references is made in the table above with \\\"!\\\" indicating the Predicate::negate method. I.e. it means that the operation indicates a Predicate that will return the negated value. The notation \\\"ic\\\" means that the method reference shall be applied ignoring case. Here is a list with examples for the String Predicates. The following example that prints the number of films that has a title that is empty (e.g. is equal to \"\"): jpaStreamer.stream(Film.class) .filter(Film$.title.isEmpty()) .count(); System.out.format(\"There are %d films(s) with an empty title %n\", count); The code will produce the following output: There are 0 films(s) with an empty title The following example prints the films that has a title that is not empty (e.g. is not equal to \"\"): jpaStreamer.stream(Film.class) .filter(Film$.title.isNotEmpty()) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ... The following example prints the films that has a title that equals to \"AlABama dEVil\" ignoring case: jpaStreamer.stream(Film.class) .filter(Film$.title.equalIgnoreCase(\"AlABama dEVil\")) .forEachOrdered(System.out::println); ---- The code will produce the following output: FilmImpl { filmId = 9, title = ALABAMA DEVIL, ... The following example prints the films that has a title that does not equal to \"AlABama dEVil\" ignoring case: jpaStreamer.stream(Film.class) .filter(Film$.title.notEqualIgnoreCase(\"AlABama dEVil\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ... The following example prints the films that has a title that starts with \"ALABAMA\": jpaStreamer.stream(Film.class) .filter(Film$.title.startsWith(\"ALABAMA\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 9, title = ALABAMA DEVIL, ... The following example prints the films that has a title that does not start with \"ALABAMA\": jpaStreamer.stream(Film.class) .filter(Film$.title.notStartsWith(\"ALABAMA\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ... The following example prints the films that has a title that starts with \"ala\" ignoring case: jpaStreamer.stream(Film.class) .filter(Film$.title.startsWithIgnoreCase(\"ala\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 9, title = ALABAMA DEVIL, ... The following example prints the films that has a title that does not start with \"ala\" ignoring case: jpaStreamer.stream(Film.class) .filter(Film$.title.notStartsWithIgnoreCase(\"ala\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ... The following example prints the films that has a title that ends with \"DEVIL\": jpaStreamer.stream(Film.class) .filter(Film$.title.endsWith(\"DEVIL\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 9, title = ALABAMA DEVIL, ... Film { filmId = 155, title = CLEOPATRA DEVIL, ... Film { filmId = 313, title = FIDELITY DEVIL, ... The following example prints the films that has a title that does not end with \"DEVIL\": jpaStreamer.stream(Film.class) .filter(Film$.title.notEndsWith(\"DEVIL\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ... The following example prints the films that has a title that ends with \"deVIL\" ignoring case: jpaStreamer.stream(Film.class) .filter(Film$.title.endsWithIgnoreCase(\"deVIL\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 9, title = ALABAMA DEVIL, ... Film { filmId = 155, title = CLEOPATRA DEVIL, ... Film { filmId = 313, title = FIDELITY DEVIL, ... The following example prints the films that has a title that does not start with \"deVIL\" ignoring case: jpaStreamer.stream(Film.class) .filter(Film$.title.notEndsWithIgnoreCase(\"deVIL\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ... The following example prints the films that has a title that contains the string \"CON\": jpaStreamer.stream(Film.class) .filter(Film$.title.contains(\"CON\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 23, title = ANACONDA CONFESSIONS, ... Film { filmId = 127, title = CAT CONEHEADS, ... Film { filmId = 138, title = CHARIOTS CONSPIRACY, ... The following example prints the films that has a title that does not contain the string \"CON\": jpaStreamer.stream(Film.class) .filter(Film$.title.notContains(\"CON\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ... The following example prints the films that has a title that contains the string \"CoN\" ignoring case: jpaStreamer.stream(Film.class) .filter(Film$.title.containsIgnoreCase(\"CoN\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 23, title = ANACONDA CONFESSIONS, ... Film { filmId = 127, title = CAT CONEHEADS, ... Film { filmId = 138, title = CHARIOTS CONSPIRACY, ... ... The following example prints the films that has a title that does not contain the string \"CoN\" ignoring case: jpaStreamer.stream(Film.class) .filter(Film$.title.containsIgnoreCase(\"CoN\")) .forEachOrdered(System.out::println); The code will produce the following output: Film { filmId = 1, title = ACADEMY DINOSAUR, ... Film { filmId = 2, title = ACE GOLDFINGER, ... Film { filmId = 3, title = ADAPTATION HOLES, ... ...","title":"String Predicates","component":"jpa-streamer","version":"3.0.4","name":"string-predicates","url":"/jpa-streamer/latest/predicates/string-predicates.html","titles":[{"text":"Examples","hash":"_examples","id":1},{"text":"isEmpty","hash":"_isempty","id":2},{"text":"isNotEmpty","hash":"_isnotempty","id":3},{"text":"equalIgnoreCase","hash":"_equalignorecase","id":4},{"text":"notEqualIgnoreCase","hash":"_notequalignorecase","id":5},{"text":"startsWith","hash":"_startswith","id":6},{"text":"notStartsWith","hash":"_notstartswith","id":7},{"text":"startsWithIgnoreCase","hash":"_startswithignorecase","id":8},{"text":"notStartsWithIgnoreCase","hash":"_notstartswithignorecase","id":9},{"text":"endsWith","hash":"_endswith","id":10},{"text":"notEndsWith","hash":"_notendswith","id":11},{"text":"endsWithIgnoreCase","hash":"_endswithignorecase","id":12},{"text":"notEndsWithIgnoreCase","hash":"_notendswithignorecase","id":13},{"text":"contains","hash":"_contains","id":14},{"text":"notContains","hash":"_notcontains","id":15},{"text":"containsIgnoreCase","hash":"_containsignorecase","id":16},{"text":"notContainsIgnoreCase","hash":"_notcontainsignorecase","id":17}]},"18":{"id":18,"text":"JPAStreamer Docs Quick-start with JPAstreamer This section helps you get started with JPAstreamer in a few minutes. The process can be summed up in four steps: Installing JPAstreamer Build your project to generate fields Initiate JPAstreamer Streaming a table The provided guide does not intend to be an exhaustive explanation of these steps but rather provide enough information to set you off streaming in no time. Hence, most of the topics are explained in greater depth throughout the JPAstreamer documentation. Use of JPAstreamer requires Java 8 or later. This guide assumes you are starting from an existing project that conveys to the standard JPA specification i.e. represent database tables as Entities etc. The installation is performed by notifying your build tool that the JPAstreamer dependency is required to compile your source code. This is accomplished by using either of the following dependencies for Maven or Gradle. Install JPAStreamer by adding the following code in the project’s pom.xml-file: (1) com.speedment.jpastreamer jpastreamer-core ${jpa-streamer-version} (2) org.codehaus.mojo build-helper-maven-plugin 3.2.0 generate-sources add-source ${project.build.directory}/generated-sources/annotations(3) 1 The JPAstreamer core dependency 2 Picks up the generated metamodel as an additional source directory 3 Path to the generated sources Install JPAStreamer by adding the following code in the project’s build.gradle-file: repositories { mavenCentral() } dependencies { (1) compile \"com.speedment.jpastreamer:jpastreamer-core:version\" annotationProcessor \"com.speedment.jpastreamer:fieldgenerator-standard:version\" } sourceSets { (2) main { java { srcDir 'src/main/java' srcDir 'target/generated-sources/annotations'(3) } } } 1 The required JPAstreamer dependencies 2 Picks up the generated metamodel as an additional source directory 3 Path to the generated sources JPAstreamer relies on an annotation processor to generate the static metamodel classes required for the type-safe Stream parameters. This generation automatically takes place during compile time. Once you have added the JPAstreamer dependency, just go ahead and build your project. The metamodel is generated into the target folder in the same package as the corresponding Entity. You may have to manually configure the output target folder as a source folder, or else the runtime compiler may not be aware of the generated classes. See Install with Maven or Install with Gradle for instructions on how to perform this configuration with Maven and Gradle respectively. JPAstreamer does not need to be manually configured to recognize the underlying data source. Instead, it is using the existing description of the persistence unit. For example: MySQL Sakila Example Database org.hibernate.jpa.HibernatePersistenceProvider After installation, JPAstreamer is initialized with the name of the persistance unit: JPAStreamer jpaStreamer = JPAStreamer.of(\"sakila\"); (1) 1 \"sakila\" is to be replaced with the name of your persistence unit The persistence unit described in the example above is the MySQL Sakila example database. This models a traditional movie rental shop and contains tables such as Film. In this example, the entity-bean corresponding to the film-table looks like this: @Entity @Table(name = \"film\", schema = \"sakila\") public class Film { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \"film_id\", columnDefinition = \"smallint(5)\") private Integer filmId; @Column(name = \"title\", columnDefinition = \"varchar(255)\") private String title; // ... additional fields and corresponding getters and setters } To stream the entries of this table, simply call jpaStreamer.stream() and provide the entity class: jpaStreamer.stream(Film.class) (1) .forEach(System.out::println); 1 Film.class refers to the annotated Entity that models the table which is to be streamed This will yield the following output: Film {filmId=1, title='ACADEMY DINOSAUR', ... Film {filmId=2, title='ACE GOLDFINGER', ... Film {filmId=3, title='ADAPTATION HOLES', ... Film {filmId=4, title='AFFAIR PREJUDICE', ... Film {filmId=5, title='AFRICAN EGG', ... To release any resources potentially held by JPAstreamer, simply close the streamer using the command jpaStreamer.close(); jpaStreamer.close(); You can configure where the annotation processor generates entities and how they are named using the Maven Compiler Plugin. This section describes how that is done. By default, all generated classes will be placed under target/generated-sources/annotations in a package that matches that of the original entity. Thus, a com.foo.Film.class entity will yield a target/generated-sources/annotations/com/foo/Film$.class. You can change the package name for all entities by setting the compiler argument jpaStreamerPackage. If your entities have package private fields, they may not be accessible to the generated Entities. Therefore, take caution when deciding to place the generated entities in a separate package. As shown in examples throughout the user guide, generated entities are by default given the name of the original entity with an extra $ at the end. Meaning an entity Foo.class will yield a Foo$.class. You can change the naming convention by setting the compiler argument jpaStreamerPrefix and jpaStreamerSuffix. The prefix will be added at the start of the original entity name and the suffix will be appended at the end. The default suffix $ applies if no custom values are provided via the compiler arguments. If just one of jpaStreamerPrefix and jpaStreamerSuffix is set, the other will automatically default to an empty string. For example, just setting the prefix to A will result in entities with the name AFoo.class. Take note that the naming pattern must adhere to Java’s naming conventions. Here is a complete example configuration of the plugin that sets both the package name, prefix, and suffix. org.apache.maven.plugins maven-compiler-plugin 3.10.1 -AjpaStreamerPackage=com.speedment.jpastreamer.test (1) -AjpaStreamerPrefix=A (2) -AjpaStreamerSuffix=B (3) 1 Package name is set to com.speedment.jpastreamer.test 2 Entity prefix is set to A (start) 3 Entity suffix is set to B (ending) In the above example, all generated entities will be placed in /target/generated-sources/annotations/com.speedment.jpastreamer.test. An original entity with the name Film will yeild a generated entity called AFilmB. Now that you have access to JPAstreamer it’s time to put the expressiveness of Java Streams to work. If you are not yet familiar with the Stream API, you may find our guide on Stream Fundamentals helpful. Otherwise, feel free to check out the collection of examples of JPAStreamer usage.","title":"Quick-start with JPAstreamer","component":"jpa-streamer","version":"3.0.4","name":"quick-start","url":"/jpa-streamer/latest/quick-start/quick-start.html","titles":[{"text":"Installing JPAstreamer","hash":"_installing_jpastreamer","id":1},{"text":"Maven","hash":"_maven","id":2},{"text":"Gradle","hash":"_gradle","id":3},{"text":"Build your project to generate fields","hash":"_build_your_project_to_generate_fields","id":4},{"text":"Initiate JPAstreamer","hash":"_initiate_jpastreamer","id":5},{"text":"Streaming a table","hash":"_streaming_a_table","id":6},{"text":"Code Generator Settings","hash":"_code_generator_settings","id":7},{"text":"Package name","hash":"_package_name","id":8},{"text":"Generated entity name","hash":"_generated_entity_name","id":9},{"text":"Next Steps","hash":"_next_steps","id":10}]},"19":{"id":19,"text":"JPAStreamer Docs Introduction JPAstreamer is a library for expressing JPA/Hibernate/Spring queries using standard Java Streams. With a single dependency, your application can immediately operate on database elements using standard Stream operators e.g. filter(), sort() and map(). As a result, your queries are more expressive, intuitive and less error-prone. For example, starting with a standard JPA Entity you can effortlessly derive intuitive stream queries: @Entity @Table(name = \"film\", schema = \"sakila\") public class Film implements Serializable { @Id @GeneratedValue(strategy = GenerationType.IDENTITY) @Column(name = \"film_id\", nullable = false, updatable = false, columnDefinition = \"smallint(5)\") private Integer filmId; @Column(name = \"title\", nullable = false, columnDefinition = \"varchar(255)\") private String title; @Column(name = \"length\", columnDefinition = \"smallint(5)\") private Integer length; @Column(name = \"rating\", columnDefinition = \"enum('G','PG','PG-13','R','NC-17')\") private String rating; } To operate on the elements of the table, JPAStreamer is first initialized as following (in this case using a persistence unit named \"sakila\"): JPAStreamer jpaStreamer = JPAStreamer.of(\"sakila\"); The obtained streamer is then used to create Streams that are rendered to database queries through JPA. For example: jpaStreamer.stream(Film.class) .filter(Film$.rating.equal(\"G\")) .sorted(Film$.length.reversed().thenComparing(Film$.title.comparator())) (1) .skip(10) .limit(5) .forEach(System.out::println); This will print films rated G in reversed length order (where films of equal length will be in title order) but skipping the first ten and then printing only the following five films. Film$ is automatically generated from the Film-table entity at compile-time by JPAStreamer as part of its metamodel. More examples are available in the chapter Stream Examples. JPAstreamer is a library that is added to enrich the API of the underlying JPA provider. It does not impact the existing application code and there is no need to replace any software components. Below is an overview of a typical database application leveraging JPAstreamer. Application Code The API is extended to include Java Streams as a way of writing type-safe queries. This means the application code typically consists of a combination of regular JPA queries and Stream pipelines. As a result, developers are free to choose a more expressive, intuitive and less error-prone way of fetching data. JPAstreamer JPAstreamer is added as a lightweight dependency to the Maven/Gradle build. It integrates with the JPA layer by rendering the Stream queries to JPA and passing them to the underlying JPA provider for execution. JPA Layer JPAstreamer can integrate with any existing JPA provider. The JPA layer remains responsible for the persisting and reading of objects in the database. JDBC (SQL) Layer and Relational Database Since the JPA provider is responsible for the database connection (most often) via JDBC, any database compatible with the chosen JPA provider can be used with JPAstreamer. If this is your first time getting to know JPAstreamer, you may want to know Why JPAstreamer is a great addition to your database application and How JPAstreamer Works. After becoming familiar with the main concepts, you can follow the Quick-start Guide to get set up in minutes. In case you don’t have an existing project at hand to use for testing, there is a pre-configured demo that can be located in the JPAstreamer Demo Repository. If you wish to learn more about the Java Stream API, start with the chapter Stream Fundamentals. Gitter Chat - https://gitter.im/speedment/jpa-streamer JPAstreamer Demo Repository - https://github.com/speedment/jpa-streamer-demo/ Website - https://www.jpastreamer.org GitHub - https://github.com/speedment/jpa-streamer","title":"JPAstreamer Documentation","component":"jpa-streamer","version":"3.0.4","name":"introduction","url":"/jpa-streamer/latest/introduction/introduction.html","titles":[{"text":"An Open Source Library to Instantly Process Data as Java Streams","hash":"_an_open_source_library_to_instantly_process_data_as_java_streams","id":1},{"text":"How JPAstreamer fits into your application","hash":"_how_jpastreamer_fits_into_your_application","id":2},{"text":"Where to begin","hash":"_where_to_begin","id":3},{"text":"Resources","hash":"_resources","id":4}]},"20":{"id":20,"text":"JPAStreamer Docs Transactions Transactions are an essential part of JPA that determines when modifications to the data is synchronised with the underlying database. JPAstreamer can assist with the modifications while the actual transactions are handled using standard JPA. Below is an example of a JPA transaction that updates a selection of entries in a table. The entity to operate on is called Film that, among others, declare the fields rating and rentalRate. @Entity @Table(name = \"film\", schema = \"sakila\") public class Film { //... @Column(name = \"rating\", columnDefinition = \"enum('G','PG','PG-13','R','NC-17')\") private String rating; @Column(name = \"rental_rate\", columnDefinition = \"decimal(4,2)\") private Float rentalRate; //... } The transaction below performs a one dollar increase of the rental rate of every R-rated film (for adults only) in a film-table: final EntityManagerFactory emf = Persistence.createEntityManagerFactory(\"sakila\"); (1) final EntityManager em = emf.createEntityManager(); final JPAStreamer jpaStreamer = JPAStreamer.of(emf); (2) try { em.getTransaction().begin(); jpaStreamer.stream(Film.class) (3) .filter(Film$.rating.equal(\"R\")) (4) .forEach(f -> { f.setRentalRate(f.getRentalRate() + 1)); (5) em.merge(f); (6) } em.getTransaction().commit(); } catch(Exception e) { em.getTransaction().rollback(); } 1 \"sakila\" refers to the name of the persistence unit 2 The EntityManagerFactory can be provided to the JPAStreamer builder 3 Selects the entries from the Film-table 4 Filters out only the R-rated films 5 Increases the current rental rate with 1 dollar 6 Notifies the transaction of the update The source code for this example can be found here.","title":"Transactions","component":"jpa-streamer","version":"3.0.4","name":"transactions","url":"/jpa-streamer/latest/transactions/transactions.html","titles":[]},"21":{"id":21,"text":"JPAStreamer Docs Stream Fundamentals Intermediate Operations An intermediate operation is an operation that allows further operations to be added to a Stream. For example, filter is an intermediate operation since additional operations can be added to a Stream pipeline after filter has been applied to the Stream. In the examples below, many of the lambdas could be replaced by method references (e.g. the lambda () → new StringBuilder can be replaced by a method reference StringBuilder::new). The following intermediate operations are accepted by a Stream: Operation Parameter Returns a Stream that: filter Predicate Contains only the elements that match the Predicate map Function Contains the results of applying the given Function to the elements of this stream distinct - Contains the distinct (i.e. unique) elements in the stream as per the element’s equals() method sorted - Contains the elements in the stream in sorted order as per the element’s compareTo() method sorted Comparator Contains the elements in the stream in sorted order as per the given Comparator limit long Contains the original elements in the stream but truncated to be no longer than the given long value skip long Contains the original elements in the stream but after discarding the given long value of elements flatMap Function Contains the elements of the Stream`s in this stream obtained by applying the given `Function to the stream elements of this stream peek Consumer Contains the original elements in the stream but additionally letting the given Consumer accept each element (side effect) Below are examples that demonstrate how these operations can be applied. Stream.of(\"B\", \"A\", \"C\" , \"B\") .filter(s -> s.equals(\"B\")) Returns a Stream with the elements \"B\" and \"B\" because only elements that are equal to \"B\" will pass the filter operation. Stream.of(\"B\", \"A\", \"C\" , \"B\") .map(s -> s.toLowerCase()) Returns a Stream with the elements \"b\", \"a\", \"c\" and \"b\" because each element will be mapped (converted) to its lower case representation. Stream.of(\"B\", \"A\", \"C\" , \"B\") .distinct() Returns a Stream with the elements \"B\", \"A\" and \"C\" because only unique elements will pass the distinct operation. Stream.of(\"B\", \"A\", \"C\" , \"B\") .sorted() Returns a Stream with the elements \"A\", \"B\", \"B\" and \"C\" because the sort operation will sort all elements in the stream in natural order. Stream.of(\"B\", \"A\", \"C\" , \"B\") .sorted(Comparator.reverseOrder()) Returns a Stream with the elements \"C\", \"B\", \"B\" and \"A\" because the sort operation will sort all elements in the stream according to the provided Comparator (in reversed natural order). Stream.of(\"B\", \"A\", \"C\" , \"B\") .limit(2) Returns a Stream with the elements \"B\" and \"A\" because after the two first elements the rest of the elements will be discarded. Stream.of(\"B\", \"A\", \"C\" , \"B\") .skip(1) Returns a Stream with the elements \"A\", \"C\" and \"B\" because the first element in the stream will be skipped. Stream.of( Stream.of(\"B\", \"A\"), Stream.of(\"C\", \"B\") ) .flatMap(Function.identity()) .forEachOrdered(System.out::println); Returns a Stream with the elements \"B\", \"A\", \"C\" and \"B\" because the two streams (that each contain two elements) are \"flattened\" to a single Stream with four elements. Stream.of( Arrays.asList(\"B\", \"A\"), Arrays.asList(\"C\", \"B\") ) .flatMap(l -> l.stream()) Returns a Stream with the elements \"B\", \"A\", \"C\" and \"B\" because the two lists (that each contain two elements) are \"flattened\" to a single Stream with four elements. The lists are converted to sub-streams using the List::stream mapper method. Stream.of(\"B\", \"A\", \"C\" , \"B\") .peek(System.out::print) Returns a Stream with the elements \"B\", \"A\", \"C\" and \"B\" but, when consumed in its entirety, will print out the text \"BACB\" as a side effect. Side-effect usage is discouraged in Streams. Use this operation for debug only. There are also a number of intermediate operations that controls the properties of the Stream and has no effect on its actual content. These are: Operation Parameter Returns a Stream that: parallel - is parallel (not sequential) sequential - is sequential (not parallel) unordered - is unordered (data might appear in any order) onClose Runnable will run the provided Runnable when closed Stream.of(\"B\", \"A\", \"C\" , \"B\") .parallel() Returns a Stream with the elements \"B\", \"A\", \"C\" and \"B\" but, when consumed, elements in the Stream may be propagated through the pipeline using different Threads. By default, parallel streams are executed on the default `ForkJoinPool. Stream.of(\"B\", \"A\", \"C\" , \"B\") .parallel() .sequential() Returns a Stream with the elements \"B\", \"A\", \"C\" and \"B\" that is not parallel. Stream.of(\"B\", \"A\", \"C\" , \"B\") .unordered() Returns a Stream with the given elements but not necessary in any particular order. So when consumed, elements might be encountered in any order, for example in the order \"C\", \"B\", \"B\", \"A\". Note that unordered is just a relaxation of the stream requirements. Unordered streams can retain their original element order or elements can appear in any other order. Stream.of(\"B\", \"A\", \"C\", \"B\") .onClose( () -> System.out.println(\"The Stream was closed\") ); Is a Stream with the elements \"B\", \"A\", \"C\" and \"B\" but, when closed, will print out the text \"The Stream was closed\". There are also some intermediate operations that maps a Stream to one of the special primitive stream types; IntStrem, LongStream and DoubleStream: Operation Parameter Returns a Stream that: mapToInt ToIntFunction Is an IntStream containing int elements obtained by applying the given ToIntFunction to the elements of this stream mapToLong ToLongFunction Is a LongStream containing long elements obtained by applying the given ToLongFunction to the elements of this stream mapToDouble ToDoubleFunction Is a DoubleStream containing double elements obtained by applying the given ToDoubleFunction to the elements of this stream flatMapToInt Function Contains the int elements of the IntStream`s in this stream obtained by applying the given `Function to the stream elements of this stream flatMapToLong Function Contains the long elements of the LongStream`s in this stream obtained by applying the given `Function to the stream elements of this stream flatMapToDouble Function Contains the double elements of the DoubleStream`s in this stream obtained by applying the given `Function to the stream elements of this stream In many cases, primitive streams provide better performance but can only handle streams of: int, long and double. Stream.of(\"B\", \"A\", \"C\" , \"B\") .mapToInt(s -> s.hashCode()) Returns an IntStream with the int elements 66, 65, 67 and 66. (A is 65, B is 66 and so on) Stream.of(\"B\", \"A\", \"C\", \"B\") .mapToLong(s -> s.hashCode() * 1_000_000_000_000l) Returns a LongStream with the long elements 66000000000000, 65000000000000, 67000000000000 and 66000000000000. Stream.of(\"B\", \"A\", \"C\", \"B\") .mapToDouble(s -> s.hashCode() / 10.0) Returns a DoubleStream with the double elements 6.6, 6.5, 6.7 and 6.6. === flatMapToInt Stream.of( IntStream.of(1, 2), IntStream.of(3, 4) ) .flatMapToInt(s -> s.map(i -> i + 1)) Returns an IntStream with the int elements 2, 3, 4 and 5 because the two `IntStream`s where flattened to one stream whereby 1 was added to each element. Stream.of( LongStream.of(1, 2), LongStream.of(3, 4) ) .flatMapToLong(s -> s.map(i -> i + 1)) Returns a LongStream with the long elements 2, 3, 4 and 5 because the two LongStreams where flattened to one stream whereby 1 was added to each element. Stream.of( DoubleStream.of(1.0, 2.0), DoubleStream.of(3.0, 4.0) ) .flatMapToDouble(s -> s.map(i -> i + 1)) Returns a DoubleStream with the double elements 2.0, 3.0, 4.0 and 5.0 because the two `DoubleStream`s where flattened to one stream whereby 1 was added to each element. Java 16 introduced several new map operations, expanding the capabilities of Streams. The mapMulti() function enables the mapping of a single element within the Stream to zero or multiple elements, contingent on specific conditions. Operation Parameter Returns a Stream that: mapMulti BiConsumer Returns a stream consisting of the results of replacing each element of this stream with multiple elements, specifically zero or more elements. mapMultiToDouble BiConsumer Returns a DoubleStream consisting of the results of replacing each element of this stream with multiple elements, specifically zero or more elements. mapMultiToInt BiConsumer Returns an IntStream consisting of the results of replacing each element of this stream with multiple elements, specifically zero or more elements. mapMultiToLong BiConsumer Returns a LongStream consisting of the results of replacing each element of this stream with multiple elements, specifically zero or more elements. These operations are only available in applications running Java 16 or later. Stream.of(1.0, 2.0, 3.0, 4.0, 5.0) .mapMulti((i, mapper) -> { if (i % 2 == 0) { mapper.accept(i); mapper.accept(i); } }); Returns a Stream with the elements [2.0, 2.0, 4.0, 4.0] because the even elements were duplicated by accepting them twice. Stream.of(1.0, 2.0, 3.0, 4.0, 5.0) .mapMulti((i, mapper) -> { if (i % 2 == 0) { mapper.accept(i); mapper.accept(i); } }); Returns an DoubleStream with the elements [2.0, 2.0, 4.0, 4.0] because the even elements were duplicated by accepting them twice. Stream.of(1, 2, 3, 4, 5) .mapMulti((i, mapper) -> { if (i % 2 == 0) { mapper.accept(i); mapper.accept(i); } }); Returns an IntStream with the elements [2, 2, 4, 4] because the even elements were duplicated by accepting them twice. Stream.of(1.0, 2.0, 3.0, 4.0, 5.0) .mapMulti((i, mapper) -> { if (i % 2 == 0) { mapper.accept(i.longValue()); mapper.accept(i.longValue()); } }); Returns an LongStream with the elements [2, 2, 4, 4] because the even elements were duplicated by accepting them twice. Primitive streams (like IntStream and LongStream) provide similar functionality as ordinary streams but usually the parameter count and types differ so that primitive streams can accept more optimized function variants. Here is a table of some additional Intermediate Operations that primitive Streams can take: Operation Parameter Returns a Stream that: boxed - contains the boxed elements in the original stream (e.g. an int is boxed to an Integer) asLongStream - contains the elements in the original stream converted to long elements asDoubleStream - contains the elements in the original stream converted to double elements IntStream.of(1, 2, 3, 4) .boxed() returns a Stream with the Integer elements 1, 2, 3 and 4 because the original int elements were boxed to their corresponding Integer elements. IntStream.of(1, 2, 3, 4) .asLongStream() returns a LongStream with the long elements 1, 2, 3 and 4 because the original int elements were converted to long elements. IntStream.of(1, 2, 3, 4) .asDoubleStream() returns a DoubleStream with the double elements 1.0, 2.0, 3.0 and 4.0 because the original int elements were converted to double elements. Two stream operations exist for capturing or omitting elements within the stream until a particular condition is satisfied. Unlike a filter, these operations discontinue predicate evaluation once it turns true for the first time. Operation Parameter Returns a Stream that: takeWhile Predicate Contains the elements in the original stream until the the first one fails the Predicate test dropWhile Predicate Contains the elements in the original stream dropping all elements until the the first one fails the Predicate test then containing the rest of the elements Stream.of(\"B\", \"A\", \"C\", \"B\") .takeWhile(s -> \"B\".compareTo(s) >= 0) Returns a Stream with the elements \"B\" and \"A\" because when \"C\" is encountered in the Stream, that element and all following are dropped. Stream.of(\"B\", \"A\", \"C\", \"B\") .dropWhile(s -> \"B\".compareTo(s) >= 0) Returns a Stream with the elements \"C\" and \"B\" because elements are dropped from the Stream but when \"C\" in encountered, subsequent elements are not dropped.","title":"Intermediate Operations","component":"jpa-streamer","version":"3.0.4","name":"intermediate_operations","url":"/jpa-streamer/latest/stream-fundamentals/intermediate_operations.html","titles":[{"text":"Common Operations","hash":"_common_operations","id":1},{"text":"filter()","hash":"_filter","id":2},{"text":"map()","hash":"_map","id":3},{"text":"distinct()","hash":"_distinct","id":4},{"text":"sorted()","hash":"_sorted","id":5},{"text":"limit()","hash":"_limit","id":6},{"text":"skip()","hash":"_skip","id":7},{"text":"flatMap()","hash":"_flatmap","id":8},{"text":"peek()","hash":"_peek","id":9},{"text":"Stream Property Operations","hash":"_stream_property_operations","id":10},{"text":"parallel()","hash":"_parallel","id":11},{"text":"sequential()","hash":"_sequential","id":12},{"text":"unordered()","hash":"_unordered","id":13},{"text":"onClose()","hash":"_onclose","id":14},{"text":"Map to Primitive Operations","hash":"_map_to_primitive_operations","id":15},{"text":"mapToInt()","hash":"_maptoint","id":16},{"text":"mapToLong()","hash":"_maptolong","id":17},{"text":"mapToDouble()","hash":"_maptodouble","id":18},{"text":"flatMapToLong()","hash":"_flatmaptolong","id":19},{"text":"flatMapToDouble()","hash":"_flatmaptodouble","id":20},{"text":"Map Multi Operations (Java 16 Only)","hash":"_map_multi_operations_java_16_only","id":21},{"text":"mapMulti()","hash":"_mapmulti","id":22},{"text":"mapMultiToDouble()","hash":"_mapmultitodouble","id":23},{"text":"mapMultiToInt()","hash":"_mapmultitoint","id":24},{"text":"mapMultiToLong()","hash":"_mapmultitolong","id":25},{"text":"Primitive Operations","hash":"_primitive_operations","id":26},{"text":"boxed()","hash":"_boxed","id":27},{"text":"asLongStream()","hash":"_aslongstream","id":28},{"text":"asDoubleStream()","hash":"_asdoublestream","id":29},{"text":"Selective Operations","hash":"_selective_operations","id":30},{"text":"takeWhile()","hash":"_takewhile","id":31},{"text":"dropWhile()","hash":"_dropwhile","id":32}]},"22":{"id":22,"text":"JPAStreamer Docs Stream Fundamentals Other Operations There are a few operations that do not classify as either an intermediate operation or a terminal operation. These are shown in the table below: Operation Action isParallel Returns true if the Stream is parallel, else false close Closes the Stream and releases all its resources (if any) Stream.of(\"B\", \"A\", \"C\", \"B\") .parallel() .isParallel() returns true because the Stream is parallel. Stream.of(\"B\", \"A\", \"C\", \"B\") .sequential() .isParallel() returns false because the Stream is not parallel. Stream stream = Stream.of(\"B\", \"A\", \"C\", \"B\"); stream.forEachOrdered(System.out::println); stream.close(); prints all elements in the Stream and then closes the Stream. Some streams (e.g. streams from files) need to be closed to release their resources. Use the try-with-resource patterns if the Stream must be closed: try (Stream s = Stream.of(\"B\", \"A\", \"C\", \"B\")) { s.forEachOrdered(System.out::println); }","title":"Other Operations","component":"jpa-streamer","version":"3.0.4","name":"other_operations","url":"/jpa-streamer/latest/stream-fundamentals/other_operations.html","titles":[{"text":"isParallel","hash":"_isparallel","id":1},{"text":"close","hash":"_close","id":2}]},"23":{"id":23,"text":"JPAStreamer Docs Stream Fundamentals JPAstreamer is all about Java 8 Streams that allow you to process data in a declarative manner similar to using SQL statements. If you are not yet familiar with the concept of Streams, you are encouraged to read this chapter carefully. Although, if you are comfortable with the use of Stream, feel free to skip directly to the next chapter. A Java 8 Stream is an interface with implementations that support functional style operations on a stream of elements. The entire Java Collection framework was retrofitted with Stream support in Java 8. Streams can be used to express a kind of “recipe“ style of operations, allowing us to compose a number of function. The functions are applied to the elements in the Stream only when the Stream is “started“. A Stream recipe says what to do but generally not how to do it which is good from an abstraction point of view. This means that Streams can be very efficient and general. Consider the following simple example: Stream.of( (1) \"Zlatan\", \"Tim\", \"Bo\", \"George\", \"Adam\", \"Oscar\" ) .filter(n -> n.length() > 2) (2) .sorted() (3) .collect(Collectors.toList()); (4) 1 Creates a Stream with the given content 2 Retains only those Strings that are longer than 2 characters (i.e. \"Bo\" is dropped) 3 Sorts the remaining Strings in natural order 4 Collects the remaining sorted Strings in a List A visual representation of the Stream pipeline. It starts by creating a Stream using the statement Stream.of(). Note that nothing happens with the Stream at this point. This yields a Stream which can be used to further build a “recipe” around. By adding filter() only Strings that are longer than two characters will be included. Again, the Stream is not started, this only tells the Stream that when it starts, the Strings should be filtered. Next, a sorted() operator is added to the Stream recipe (more formally called a Stream pipeline). This means that when the Stream is started, all Strings that passes the filter shall be sorted in natural order. Again, nothing is flowing through the Stream. The last operation to be added is collect(). This operation is different to all the previous operations in the way that it is a Terminal operation. Whenever a Terminal operation is applied to a Stream, the Stream cannot accept additional operations to its pipeline. It also means that the Stream is started. It shall be noted that elements in a Stream are pulled by the Terminal operation (i.e. the collect operation) and not pushed by the Stream-source. So, collect() asks for the first element and that request then traverse up to the Stream-source that will provide the first element “Zlatan”. The filter() operator will check if the length of “Zlatan” is greater than two (which it is) and will then propagate “Zlatan” to the sorted() operator. Because the sorted() operation needs to see all Strings before it can decide on its output order, it will ask the Stream-source for all its remaining elements which, via the filter, is sent down the Stream. Once all Strings are received by the sorted() operator, it will sort the Strings and then output its first element (i.e. “Adam”) to the collect() operator. The result of the entire Stream pipeline will thus be: \"Adam\", \"George\", \"Oscar\", \"Tim\", \"Zlatan\" A Stream consists of a source followed by a pipeline of an arbitrary number of intermediate operations and a terminal operation. With JPAstreamer, it is possible to use the same Stream semantics to operate on JPA Entities. In that case, database rows are streamed rather than Strings (as shown in the example above). This way, database tables can be viewed as pure Java Streams as shown hereunder: jpaStreamer.stream(Film.class) (1) .map(Film$.title) (2) .filter(s -> s.length() > 4) (3) .sorted() (4) .collect(Collectors.toList()); (5) 1 Creates a Stream of films from a database table represented by a JPA Entity called Film 2 Extract the title (a `String) from a Film using the automatically generated field Film$ 3 Retains only those Strings that are longer than four characters (i.e. \"Jaws\" is dropped) 4 Sorts the remaining Strings in natural order 5 Collects the remaining sorted Strings in a List Since Stream is an interface, JPAstreamer can select from a variety of different implementations of a Stream depending on the pipeline that is used and other factors. The Stream described above is rendered to a database query through JPA.","title":"Stream Fundamentals","component":"jpa-streamer","version":"3.0.4","name":"stream_basics","url":"/jpa-streamer/latest/stream-fundamentals/stream_basics.html","titles":[{"text":"What is a Stream?","hash":"_what_is_a_stream","id":1},{"text":"Streams with JPAstreamer","hash":"_streams_with_jpastreamer","id":2}]},"24":{"id":24,"text":"JPAStreamer Docs Stream Fundamentals Terminal Operations A terminal operation starts the Stream and returns a result that depends on the Stream pipeline and content.For example, collect is a terminal operation because additional operation cannot be added to a Stream pipeline after collect has been called. In the examples below, many of the lambdas could be replaced by method references (e.g. the lambda () → new StringBuilder can be replaced by a method reference StringBuilder::new). The following terminal operations are accepted by a Stream: Operation Parameter(s) Action forEach Consumer Performs the given Consumer action for each element in the stream in any order forEachOrdered Consumer Performs the given Consumer action for each element in the stream in stream order collect Collector Returns a reduction of the elements in the stream. For example a List, Set or a Map min Comparator Returns the smallest element (as determined by the provided Comparator) in the stream (if any) max Comparator Returns the biggest element (as determined by the provided Comparator) in the stream (if any) count - Returns the number of elements in the stream anyMatch Predicate Returns whether at least one element in this stream matches the provided Predicate allMatch Predicate Returns whether all elements in this stream match the provided Predicate noneMatch Predicate Returns whether no elements in this stream match the provided Predicate findFirst - Returns the first element in this stream (if any) findAny - Returns any element in this stream (if any) toArray - Returns an array containing all the elements in this stream toArray IntFunction Returns an array containing all the elements in this stream whereby the array is created using the provided IntFunction toList - Returns a list containing all the elements in this stream Stream.of(\"B\", \"A\", \"C\" , \"B\") .forEach(System.out::print); might output \"CBBA\". However, there is no guarantee of a particular order using forEach. Despite this, most Stream implementations actually would output \"BACB\". Stream.of(\"B\", \"A\", \"C\" , \"B\") .forEachOrdered(System.out::print); always outputs \"BACB\" (as opposed to forEach). Stream.of(\"B\", \"A\", \"C\" , \"B\") .collect(Collectors.toList()); returns a List equal to [\"B\", \"A\", \"C\", \"B\"] Stream.of(\"B\", \"A\", \"C\" , \"B\") .collect(Collectors.toSet()); returns a Set equal to [\"A\", \"B\", \"C\"] Stream.of(\"I\", \"am\", \"a\", \"stream\") .collect(Collectors.toMap( s -> s.toLowerCase(), // Key extractor s -> s.length()) // Value extractor ) returns a Map equal to {a=1, stream=6, i=1, am=2}. Thus, the Map contains a mapping from a word (key) to how many characters that word has (value). Stream.of(\"B\", \"A\", \"C\" , \"B\") .min(String::compareTo); returns Optional[A] because \"A\" is the smallest element in the stream. Stream.empty() .min(String::compareTo); returns Optional.empty because there is no min value because the stream is empty. Stream.of(\"B\", \"A\", \"C\" , \"B\") .max(String::compareTo); returns Optional[C] because \"C\" is the largest element in the stream. Stream.empty() .max(String::compareTo); returns Optional.empty because there is no max value because the stream is empty. Stream.of(\"B\", \"A\", \"C\" , \"B\") .count(); returns 4 because there are four elements in the stream. Stream.empty() .count(); returns 0 because there are no elements in an empty stream. Stream.of(\"B\", \"A\", \"C\", \"B\") .anyMatch(\"A\"::equals); returns true because there is an \"A\" element in the stream. Stream.of(\"B\", \"A\", \"C\", \"B\") .anyMatch(\"Z\"::equals); returns false because there are no \"Z\" elements in the stream. Stream.of(\"B\", \"A\", \"C\", \"B\") .noneMatch(\"A\"::equals); returns false because there is an \"A\" element in the stream. Stream.of(\"B\", \"A\", \"C\", \"B\") .noneMatch(\"Z\"::equals); returns true because there are no \"Z\" elements in the stream. Stream.of(\"B\", \"A\", \"C\", \"B\") .findFirst(); returns Optional[B] because \"B\" is the first element in the stream. Stream.empty() .findFirst(); returns Optional.empty because the stream is empty. Stream.of(\"B\", \"A\", \"C\", \"B\") .findAny(); might return Optional[C] or any other element in the stream. Stream.empty() .findAny(); returns Optional.empty because the stream is empty. Stream.of(\"B\", \"A\", \"C\", \"B\") .toArray(); Returns an array containing [B, A, C, B] created automatically by the toArray operator. Stream.of(\"B\", \"A\", \"C\", \"B\") .toArray(String[]::new) Returns an array containing [B, A, C, B] that will be created by the provided constructor, for example using the equivalent to new String[4]. Stream.of(\"B\", \"A\", \"C\", \"B\") .toList(); Returns a List containing [B, A, C, B]. Use of this method requires Java 16 or later. Here is a list of other terminal operations that are a bit less commonly used by at least some programmers: Operation Parameter(s) Action collect Supplier, BiConsumer, BiConsumer Returns a reduction of the elements in the stream starting with an empty reduction (e.g. an empty List) obtained from the Supplier and then applying the first BiConsumer for each element and at the end, combining using the second BiConsumer reduce T, BinaryOperation Using a first T and then subsequently applying a BinaryOperation for each element in the stream, returns the value of the last value (reduction) reduce BinaryOperation By subsequently applying a BinaryOperation for each element in the stream, returns the value of the last value (reduction) reduce T, BiFunction, BinaryOperator In parallel, using first values T and then subsequently applying a BiFunction for each element in the stream, returns the value of the last values combined using the combining BinaryOperator iterator - Returns an Iterator of all the values in this stream spliterator - Returns a Spliterator with all the values in this stream Stream.of(\"B\", \"A\", \"C\", \"B\") .collect( () -> new StringBuilder(), (sb0, sb1) -> sb0.append(sb1), (sb0, sb1) -> sb0.append(sb1) ); returns a StringBuilder containing \"BACB\" that will be created by the provided supplier and then built up by the append-lambdas. Stream.of(1, 2, 3, 4) .reduce((a, b) -> a + b); returns the value of Optional[10] because 10 is the sum of all Integer elements in the Stream. If the Stream is empty, Optional.empty() is returned. Stream.of(1, 2, 3, 4) .reduce(100, (a, b) -> a + b); returns the value of 110 since all the Integer elements in the Stream are added to the Integer 100. If the Stream is empty, 100 is returned. Stream.of(1, 2, 3, 4) .parallel() .reduce( 0, (a, b) -> a + b, (a, b) -> a + b ); returns the value of 10 since this example simply adds all the Integer elements in the Stream beginning with 0. The Stream can be executed in parallel whereby the last lambda will be used to combine results from each thread. If the Stream is empty, 0 is returned. Iterator iterator = Stream.of(\"B\", \"A\", \"C\", \"B\") .iterator(); creates a new Iterator over all the elements in the Stream. Spliterator spliterator = Stream.of(\"B\", \"A\", \"C\", \"B\") .spliterator(); creates a new Spliterator over all the elements in the Stream. Primitive streams (like IntStream and LongStream) provide similar functionality as ordinary streams but usually the parameter count and types differ so that primitive streams can accept more optimized function variants. Here is a list of terminal operations that are available only for primitive streams: Operation Parameter(s) Action sum - Returns a reduction of the elements which is the sum of all elements in the stream average - Returns a reduction of the elements which is the average of all elements in the stream (if any) summaryStatistics - Returns a reduction of the elements which is a summary of a number of statistic measurements (min, max, sum, average and count) IntStream.of(1, 2, 3, 4) .sum(); returns 10 because 10 is the sum of all elements in the Stream. IntStream.of(1, 2, 3, 4) .average(); returns OptionalDouble[2.5] because 2.5 is the average of all elements in the Stream. If the Stream is empty, OptionalDouble.empty() is returned. IntStream.of(1, 2, 3, 4) .summaryStatistics(); returns IntSummaryStatistics{count=4, sum=10, min=1, average=2.500000, max=4}. If the stream is empty, IntSummaryStatistics{count=0, sum=0, min=2147483647, average=0.000000, max=-2147483648} is returned (max is initially set to Integer.MIN_VALUE which is -2147483648 and min is set to Integer.MAX_VALUE which is 2147483648).","title":"Terminal Operations","component":"jpa-streamer","version":"3.0.4","name":"terminal_operations","url":"/jpa-streamer/latest/stream-fundamentals/terminal_operations.html","titles":[{"text":"Common Operations","hash":"_common_operations","id":1},{"text":"forEach()","hash":"_foreach","id":2},{"text":"forEachOrdered()","hash":"_foreachordered","id":3},{"text":"collect()","hash":"_collect","id":4},{"text":"min()","hash":"_min","id":5},{"text":"max()","hash":"_max","id":6},{"text":"count()","hash":"_count","id":7},{"text":"anyMatch()","hash":"_anymatch","id":8},{"text":"noneMatch()","hash":"_nonematch","id":9},{"text":"findFirst()","hash":"_findfirst","id":10},{"text":"findAny()","hash":"_findany","id":11},{"text":"toArray()","hash":"_toarray","id":12},{"text":"toList()","hash":"_tolist","id":13},{"text":"Less Common Operations","hash":"_less_common_operations","id":14},{"text":"collect with 3 Parameters","hash":"_collect_with_3_parameters","id":15},{"text":"reduce()","hash":"_reduce","id":16},{"text":"iterator()","hash":"_iterator","id":17},{"text":"spliterator()","hash":"_spliterator","id":18},{"text":"Primitive Stream Operations","hash":"_primitive_stream_operations","id":19},{"text":"sum()","hash":"_sum","id":20},{"text":"average()","hash":"_average","id":21},{"text":"summaryStatistics()","hash":"_summarystatistics","id":22}]},"25":{"id":25,"text":"JPAStreamer Docs Troubleshooting This section explores pitfalls that users may encounter while working with JPAStreamer and provides practical solutions to address them. There can be a number of reasons that explains why the metamodel is not being generated as expected: Project was not rebuilt after installation The JPA Entities are not compatible with the annotation processor Compilation errors arise when metamodel was deleted Annotation processors are not enabled If you have installed JPAStreamer using Maven or Gradle you must rebuild your project to trigger the annotation processor. If this has no effect, please consider the other common reasons for failure. JPAStreamer 3.0.0 and later adhere to the JPA 3 standard. This means the code generator will only detect classes annotated with jakarta.persistence.Entity. Take note that prior to JPA 3 this annotation resided in the package javax.persistence.Entity. Thus, if you are using JPA 2 the code generator will not process the entities and the result is an empty target/generated-sources/annotations-folder. To summarize: JPAStreamer 3.0.0 and later - Entities must be annotated with jakarta.persistence.Entity JPAStreamer 1.1.4 and earlier - Entities must be annotated with javax.persistence.Entity In the near future we will be backporting some of the updates to JPA 2 compatible versions. If you deleted your metamodel e.g. as a result of an unfinished mvn clean install this might set the code in a limbo. As the project sources are depending on the use of the generated classes, the project fails to compile and might even prohibit rerunning the code generator. In such cases we have found it helpful to use the Maven Compiler Plugin to trigger JPAStreamer’s annotation processor without also compiling the code. Here is a useful configuration: org.apache.maven.plugins maven-compiler-plugin 3.10.1 only (1) 1 Only annotation processing is done, no compilation. There are parameters available to reference a specific annotation processor, however these should not be needed as Maven will automatically detect all annotation processors on the path (assuming JPAStreamer is installed properly). The code generator responsible for creating JPAStreamer’s metamodel is formally referred to as an annotation processor. The use of annotation processors is sometimes prohibited by default by your IDE. Therefore, if you are building your application via e.g. IntelliJ, you need to make sure that annotation processors are enabled. As there are many IDEs to chose from and their interfaces change constantly with new releases we omit describing how to update the settings in this user guide, but googling for \"Enable annotation processors\" and the name of your IDE is a good start. As the generated metamodel is put into the target folder, your IDE may not recognize the generated sources as source files. This effectively means the generated classes cannot be detected for import in your application. To mark the output folder target/generated-sources/annotations as a source folder, use the Build Helper Maven Plugin as demonstrated below: org.codehaus.mojo build-helper-maven-plugin 3.4.0 generate-sources add-source ${project.build.directory}/generated-sources/annotations You can also right-click on the folder in your IDE and select an option along the lines of \"Mark Directory as → Generated Sources Root\". Either of these actions (adding the Maven plugin or manually selecting the folder) should result in the metamodel classes being made available for import in your project. Join queries unfortunately cannot be combined with .limit() and .skip() operations at this point. This is a known bug, or may we claim - a limitation of the JPA Criteria API. As the Stream query pipeline is translated to a Criteria Query, JPAStreamer is restricted to the operations supported by the underlying API. There are known complications related to setting a limit (maxResult) or a skip (firstResult) in conjunction with a join operation as these operations do not apply to the aggregated table, and can yield unexpected results. For now, this leaves us no other option than asking that you apply a limit/skip in the JVM after executing the query. Here is an example: List films = jpaStreamer.stream(StreamConfiguration.of(Film.class).joining(Film$.actors)) .filter(Film$.title.startsWith(\"A\")) // .limit(20) (1) .collect(Collectors.toList()); (2) films.stream().limit(20).forEach(System.out::println); (3) 1 Applying a limit here will fail due to mentioned constraints 2 The terminating operation will trigger the execution of the unlimited query 3 Apply the limit on the complete result set on the JVM side There is an issue tracking any updates on this matter here. This page is a work in progress, and we may not have addressed your concern at this point. If you cannot find an answer to your question here, we recommend that you check out the past and current issues on GitHub. Still haven’t found a resolution to your problem? Please help us improve JPAStreamer by opening a new issue.","title":"Troubleshooting","component":"jpa-streamer","version":"3.0.4","name":"troubleshooting","url":"/jpa-streamer/latest/troubleshooting/troubleshooting.html","titles":[{"text":"Metamodel Generation","hash":"_metamodel_generation","id":1},{"text":"No Metamodel is Generated","hash":"_no_metamodel_is_generated","id":2},{"text":"Project was not rebuilt after installation","hash":"rebuild","id":3},{"text":"The JPA Entities are not compatible with the annotation processor","hash":"compatible","id":4},{"text":"No metamodel is generated after deletion","hash":"compilation","id":5},{"text":"Annotation processors are not enabled","hash":"ide","id":6},{"text":"The Metamodel Cannot be Found","hash":"_the_metamodel_cannot_be_found","id":7},{"text":"Paging Join Queries","hash":"_paging_join_queries","id":8},{"text":"Other Issues","hash":"_other_issues","id":9}]},"26":{"id":26,"text":"JPAStreamer Docs Why JPAstreamer? JPAstreamer provides a fully type-safe API for writing JPA queries. This helps to detect errors at compile time and allows you to utilize IntelliSense for increased efficiency when coding. By doing so, JPAstreamer aspires to streamline the process of querying. Java Stream is a declarative interface that has gained popularity for its intuitive way of declaring your intent, what you want, rather than how to obtain that result. Most of the Stream operators happens to map naturally to SQL constructs (see SQL equivalents), which is why you can easily reap the benefits of the Java Stream interface when querying. As a result, your queries can be more terse while remaining expressive and intuitive to read. There is an ecosystem of libraries compatible with Streams which provide further assistance when handling data. As an example, the result of your query can easily be reduced to a wide variety of Java Collections i.e. a Map, List or a Set. You also have the option of parallelizing the workload of the Stream with a one-line command. JPAstreamer is designed to extend the API of the underlying JPA provider. This means that there is no need to replace existing software components, and your current codebase remains unaffected. Although, going forward, you can use the Stream query interface whenever it suits your needs.","title":"Why JPAstreamer?","component":"jpa-streamer","version":"3.0.4","name":"why-jpastreamer","url":"/jpa-streamer/latest/why-jpastreamer/why-jpastreamer.html","titles":[{"text":"Use type-safe Streams instead of JPQL/Criteria Builder","hash":"_use_type_safe_streams_instead_of_jpqlcriteria_builder","id":1},{"text":"Avoid repetitive and complex coding","hash":"_avoid_repetitive_and_complex_coding","id":2},{"text":"Leverage the Java stream ecosystem","hash":"_leverage_the_java_stream_ecosystem","id":3},{"text":"No disturbance of the existing codebase","hash":"_no_disturbance_of_the_existing_codebase","id":4}]}},"components":{},"componentVersions":{"jpa-streamer/3.0.4":{"displayVersion":"3.0.4","title":"JPAStreamer Docs","version":"3.0.4","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/latest/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/latest/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/latest/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/latest/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/latest/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/latest/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/latest/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/latest/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/latest/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/latest/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/latest/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/latest/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/latest/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/latest/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/latest/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/latest/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/latest/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/latest/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/latest/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/latest/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/latest/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/latest/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/latest/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/latest/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9},{"items":[{"content":"Troubleshooting","url":"/jpa-streamer/latest/troubleshooting/troubleshooting.html","urlType":"internal"}],"root":true,"order":10}]},"jpa-streamer/3.0.3":{"displayVersion":"3.0.3","title":"JPAStreamer Docs","version":"3.0.3","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/3.0.3/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/3.0.3/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/3.0.3/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/3.0.3/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/3.0.3/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/3.0.3/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/3.0.3/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/3.0.3/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/3.0.3/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/3.0.3/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/3.0.3/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/3.0.3/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/3.0.3/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/3.0.3/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/3.0.3/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/3.0.3/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/3.0.3/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/3.0.3/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/3.0.3/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/3.0.3/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/3.0.3/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/3.0.3/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/3.0.3/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/3.0.3/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9},{"items":[{"content":"Troubleshooting","url":"/jpa-streamer/3.0.3/troubleshooting/troubleshooting.html","urlType":"internal"}],"root":true,"order":10}]},"jpa-streamer/3.0.2":{"displayVersion":"3.0.2","title":"JPAStreamer Docs","version":"3.0.2","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/3.0.2/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/3.0.2/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/3.0.2/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/3.0.2/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/3.0.2/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/3.0.2/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/3.0.2/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/3.0.2/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/3.0.2/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/3.0.2/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/3.0.2/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/3.0.2/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/3.0.2/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/3.0.2/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/3.0.2/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/3.0.2/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/3.0.2/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/3.0.2/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/3.0.2/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/3.0.2/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/3.0.2/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/3.0.2/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/3.0.2/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/3.0.2/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9},{"items":[{"content":"Troubleshooting","url":"/jpa-streamer/3.0.2/troubleshooting/troubleshooting.html","urlType":"internal"}],"root":true,"order":10}]},"jpa-streamer/3.0.1":{"displayVersion":"3.0.1","title":"JPAStreamer Docs","version":"3.0.1","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/3.0.1/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/3.0.1/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/3.0.1/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/3.0.1/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/3.0.1/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/3.0.1/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/3.0.1/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/3.0.1/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/3.0.1/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/3.0.1/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/3.0.1/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/3.0.1/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/3.0.1/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/3.0.1/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/3.0.1/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/3.0.1/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/3.0.1/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/3.0.1/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/3.0.1/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/3.0.1/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/3.0.1/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/3.0.1/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/3.0.1/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/3.0.1/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/3.0.0":{"displayVersion":"3.0.0","title":"JPAStreamer Docs","version":"3.0.0","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/3.0.0/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/3.0.0/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/3.0.0/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/3.0.0/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/3.0.0/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/3.0.0/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/3.0.0/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/3.0.0/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/3.0.0/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/3.0.0/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/3.0.0/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/3.0.0/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/3.0.0/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/3.0.0/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/3.0.0/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/3.0.0/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/3.0.0/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/3.0.0/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/3.0.0/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/3.0.0/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/3.0.0/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/3.0.0/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/3.0.0/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/3.0.0/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/1.1.4":{"displayVersion":"1.1.4","title":"JPAStreamer Docs","version":"1.1.4","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/1.1.4/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/1.1.4/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/1.1.4/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/1.1.4/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/1.1.4/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/1.1.4/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/1.1.4/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/1.1.4/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/1.1.4/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/1.1.4/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/1.1.4/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/1.1.4/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/1.1.4/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/1.1.4/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/1.1.4/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/1.1.4/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/1.1.4/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/1.1.4/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/1.1.4/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/1.1.4/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/1.1.4/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/1.1.4/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/1.1.4/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/1.1.4/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/1.1.3":{"displayVersion":"1.1.3","title":"JPAStreamer Docs","version":"1.1.3","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/1.1.3/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/1.1.3/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/1.1.3/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/1.1.3/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/1.1.3/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/1.1.3/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/1.1.3/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/1.1.3/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/1.1.3/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/1.1.3/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/1.1.3/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/1.1.3/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/1.1.3/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/1.1.3/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/1.1.3/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/1.1.3/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/1.1.3/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/1.1.3/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/1.1.3/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/1.1.3/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/1.1.3/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/1.1.3/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/1.1.3/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/1.1.3/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/1.1.2":{"displayVersion":"1.1.2","title":"JPAStreamer Docs","version":"1.1.2","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/1.1.2/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/1.1.2/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/1.1.2/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/1.1.2/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/1.1.2/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/1.1.2/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/1.1.2/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/1.1.2/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/1.1.2/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/1.1.2/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/1.1.2/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/1.1.2/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/1.1.2/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/1.1.2/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/1.1.2/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/1.1.2/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/1.1.2/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/1.1.2/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/1.1.2/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/1.1.2/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/1.1.2/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/1.1.2/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/1.1.2/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/1.1.2/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/1.1.0":{"displayVersion":"1.1.0","title":"JPAStreamer Docs","version":"1.1.0","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/1.1.0/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/1.1.0/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/1.1.0/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/1.1.0/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/1.1.0/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/1.1.0/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/1.1.0/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/1.1.0/get-jpa-streamer/spring_integration.html","urlType":"internal"},{"content":"CDI Integration","url":"/jpa-streamer/1.1.0/get-jpa-streamer/cdi_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/1.1.0/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/1.1.0/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/1.1.0/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/1.1.0/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/1.1.0/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/1.1.0/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/1.1.0/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/1.1.0/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/1.1.0/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/1.1.0/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/1.1.0/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/1.1.0/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/1.1.0/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/1.1.0/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/1.1.0/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/1.0.2":{"displayVersion":"1.0.2","title":"JPAStreamer Docs","version":"1.0.2","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/1.0.2/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/1.0.2/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/1.0.2/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/1.0.2/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/1.0.2/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/1.0.2/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/1.0.2/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/1.0.2/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/1.0.2/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/1.0.2/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/1.0.2/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/1.0.2/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/1.0.2/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/1.0.2/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/1.0.2/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/1.0.2/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/1.0.2/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/1.0.2/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/1.0.2/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/1.0.2/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/1.0.2/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/1.0.2/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/1.0.2/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/1.0.1":{"displayVersion":"1.0.1","title":"JPAStreamer Docs","version":"1.0.1","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/1.0.1/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/1.0.1/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/1.0.1/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/1.0.1/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/1.0.1/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/1.0.1/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/1.0.1/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/1.0.1/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/1.0.1/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/1.0.1/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/1.0.1/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/1.0.1/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/1.0.1/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/1.0.1/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/1.0.1/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/1.0.1/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/1.0.1/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/1.0.1/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/1.0.1/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/1.0.1/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/1.0.1/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/1.0.1/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/1.0.1/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/1.0.0":{"displayVersion":"1.0.0","title":"JPAStreamer Docs","version":"1.0.0","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/1.0.0/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/1.0.0/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/1.0.0/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/1.0.0/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/1.0.0/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/1.0.0/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/1.0.0/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/1.0.0/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/1.0.0/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/1.0.0/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/1.0.0/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/1.0.0/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/1.0.0/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/1.0.0/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/1.0.0/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/1.0.0/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/1.0.0/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/1.0.0/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/1.0.0/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/1.0.0/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/1.0.0/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/1.0.0/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/1.0.0/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/0.1.8":{"displayVersion":"0.1.8","title":"JPAStreamer Docs","version":"0.1.8","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/0.1.8/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/0.1.8/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/0.1.8/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/0.1.8/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/0.1.8/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/0.1.8/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/0.1.8/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/0.1.8/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/0.1.8/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/0.1.8/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/0.1.8/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/0.1.8/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/0.1.8/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/0.1.8/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/0.1.8/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/0.1.8/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/0.1.8/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/0.1.8/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/0.1.8/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/0.1.8/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/0.1.8/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/0.1.8/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/0.1.8/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/0.1.7":{"displayVersion":"0.1.7","title":"JPAStreamer Docs","version":"0.1.7","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/0.1.7/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/0.1.7/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/0.1.7/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/0.1.7/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/0.1.7/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/0.1.7/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/0.1.7/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/0.1.7/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/0.1.7/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/0.1.7/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/0.1.7/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/0.1.7/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/0.1.7/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/0.1.7/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/0.1.7/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/0.1.7/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/0.1.7/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/0.1.7/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/0.1.7/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/0.1.7/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/0.1.7/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/0.1.7/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/0.1.7/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/0.1.6":{"displayVersion":"0.1.6","title":"JPAStreamer Docs","version":"0.1.6","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/0.1.6/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/0.1.6/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/0.1.6/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/0.1.6/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/0.1.6/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/0.1.6/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/0.1.6/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/0.1.6/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/0.1.6/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/0.1.6/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/0.1.6/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/0.1.6/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/0.1.6/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/0.1.6/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/0.1.6/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/0.1.6/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/0.1.6/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/0.1.6/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/0.1.6/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/0.1.6/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/0.1.6/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/0.1.6/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/0.1.6/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/0.1.5":{"displayVersion":"0.1.5","title":"JPAStreamer Docs","version":"0.1.5","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/0.1.5/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/0.1.5/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/0.1.5/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/0.1.5/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/0.1.5/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/0.1.5/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/0.1.5/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/0.1.5/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/0.1.5/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/0.1.5/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/0.1.5/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/0.1.5/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/0.1.5/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/0.1.5/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/0.1.5/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/0.1.5/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/0.1.5/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/0.1.5/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/0.1.5/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/0.1.5/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/0.1.5/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/0.1.5/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/0.1.5/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/0.1.4":{"displayVersion":"0.1.4","title":"JPAStreamer Docs","version":"0.1.4","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/0.1.4/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/0.1.4/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/0.1.4/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/0.1.4/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/0.1.4/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/0.1.4/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/0.1.4/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/0.1.4/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/0.1.4/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/0.1.4/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/0.1.4/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/0.1.4/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/0.1.4/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/0.1.4/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/0.1.4/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/0.1.4/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/0.1.4/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/0.1.4/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/0.1.4/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/0.1.4/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/0.1.4/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/0.1.4/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/0.1.4/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/0.1.3":{"displayVersion":"0.1.3","title":"JPAStreamer Docs","version":"0.1.3","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/0.1.3/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/0.1.3/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/0.1.3/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/0.1.3/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/0.1.3/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/0.1.3/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/0.1.3/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/0.1.3/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/0.1.3/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/0.1.3/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/0.1.3/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/0.1.3/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/0.1.3/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/0.1.3/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/0.1.3/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/0.1.3/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/0.1.3/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/0.1.3/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/0.1.3/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/0.1.3/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/0.1.3/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/0.1.3/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/0.1.3/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/0.1.2":{"displayVersion":"0.1.2","title":"JPAStreamer Docs","version":"0.1.2","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/0.1.2/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/0.1.2/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/0.1.2/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/0.1.2/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/0.1.2/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/0.1.2/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/0.1.2/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/0.1.2/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/0.1.2/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/0.1.2/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/0.1.2/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/0.1.2/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/0.1.2/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/0.1.2/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/0.1.2/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/0.1.2/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/0.1.2/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/0.1.2/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/0.1.2/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/0.1.2/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/0.1.2/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/0.1.2/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/0.1.2/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]},"jpa-streamer/0.1.0":{"displayVersion":"0.1.0","title":"JPAStreamer Docs","version":"0.1.0","name":"jpa-streamer","asciidoc":{"attributes":{"env":"site","env-site":"","site-gen":"antora","site-gen-antora":"","attribute-missing":"warn","data-uri":null,"icons":"font","sectanchors":"","source-highlighter":"highlight.js","site-title":"JPAStreamer","page-pagination":true},"sourcemap":false},"url":"/jpa-streamer/0.1.0/introduction/introduction.html","navigation":[{"items":[{"content":"Introduction","url":"/jpa-streamer/0.1.0/introduction/introduction.html","urlType":"internal"}],"root":true,"order":1},{"items":[{"content":"Why JPAstreamer?","url":"/jpa-streamer/0.1.0/why-jpastreamer/why-jpastreamer.html","urlType":"internal"}],"root":true,"order":2},{"items":[{"content":"How JPAstreamer Works","url":"/jpa-streamer/0.1.0/how-it-works/how-it-works.html","urlType":"internal"}],"root":true,"order":3},{"items":[{"content":"Quick-start with JPAstreamer","url":"/jpa-streamer/0.1.0/quick-start/quick-start.html","urlType":"internal"}],"root":true,"order":4},{"items":[{"content":"Get JPAstreamer","items":[{"content":"Install with Maven","url":"/jpa-streamer/0.1.0/get-jpa-streamer/install-maven.html","urlType":"internal"},{"content":"Install with Gradle","url":"/jpa-streamer/0.1.0/get-jpa-streamer/install-gradle.html","urlType":"internal"},{"content":"Spring Integration","url":"/jpa-streamer/0.1.0/get-jpa-streamer/spring_integration.html","urlType":"internal"}]}],"root":true,"order":5},{"items":[{"content":"Predicates","url":"/jpa-streamer/0.1.0/predicates/predicates.html","urlType":"internal","items":[{"content":"Reference Predicates","url":"/jpa-streamer/0.1.0/predicates/reference-predicates.html","urlType":"internal"},{"content":"Comparable Predicates","url":"/jpa-streamer/0.1.0/predicates/comparable-predicates.html","urlType":"internal"},{"content":"String Predicates","url":"/jpa-streamer/0.1.0/predicates/string-predicates.html","urlType":"internal"},{"content":"Primitive Predicates","url":"/jpa-streamer/0.1.0/predicates/primitive-predicates.html","urlType":"internal"},{"content":"Negating Predicates","url":"/jpa-streamer/0.1.0/predicates/negating-predicates.html","urlType":"internal"},{"content":"Combining Predicates","url":"/jpa-streamer/0.1.0/predicates/combining-predicates.html","urlType":"internal"}]}],"root":true,"order":6},{"items":[{"content":"Stream Fundamentals","url":"/jpa-streamer/0.1.0/stream-fundamentals/stream_basics.html","urlType":"internal","items":[{"content":"Intermediate Operations","url":"/jpa-streamer/0.1.0/stream-fundamentals/intermediate_operations.html","urlType":"internal"},{"content":"Terminal Operations","url":"/jpa-streamer/0.1.0/stream-fundamentals/terminal_operations.html","urlType":"internal"},{"content":"Other Operations","url":"/jpa-streamer/0.1.0/stream-fundamentals/other_operations.html","urlType":"internal"}]}],"root":true,"order":7},{"items":[{"content":"Fetching Data","url":"/jpa-streamer/0.1.0/fetching-data/fetching-data.html","urlType":"internal","items":[{"content":"SQL Equivalents","url":"/jpa-streamer/0.1.0/fetching-data/sql-equivalents.html","urlType":"internal"},{"content":"Stream Examples","url":"/jpa-streamer/0.1.0/fetching-data/stream-examples.html","urlType":"internal"}]}],"root":true,"order":8},{"items":[{"content":"Transactions","url":"/jpa-streamer/0.1.0/transactions/transactions.html","urlType":"internal"}],"root":true,"order":9}]}}}})